<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Files on Doxybook Example</title>
    <link>https://alandefreitas.github.io/doxybook/hugo-book/files/</link>
    <description>Recent content in Files on Doxybook Example</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://alandefreitas.github.io/doxybook/hugo-book/files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>src</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_68267d1309a1af8e8297ef4c3efbcdba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_68267d1309a1af8e8297ef4c3efbcdba/</guid>
      <description>src # Directories # Name src/Assets src/Audio src/Graphics src/Gui src/Utils Files # Name src/Engine.hpp src/Exception.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Assets</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_e0c1ede47f21c4a643a1257f949f98e0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_e0c1ede47f21c4a643a1257f949f98e0/</guid>
      <description>src/Assets # Files # Name src/Assets/Asset.hpp src/Assets/Assets.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Assets/Asset.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/asset_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/asset_8hpp/</guid>
      <description>src/Assets/Asset.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Assets Classes # Name class Engine::Assets::Asset union Engine::Assets::Asset::Event struct Engine::Assets::Asset::Event::Loaded struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Waiting Source code # #pragma once #include &amp;lt;queue&amp;gt; #include &amp;lt;string&amp;gt; namespace Engine { namespace Assets { class Asset { public: union Event { struct Loaded { bool success; int usage; } loaded; struct Unloaded { bool success; } unloaded; struct Waiting { Asset* other; } waiting; }; explicit Asset(const std::string&amp;amp; name); virtual ~Asset() = 0; virtual void load(); virtual void unload(); const Event&amp;amp; getEvent() const { return event; } private: Event event; }; } } Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Assets/Assets.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/assets_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/assets_8hpp/</guid>
      <description>src/Assets/Assets.hpp # Source code # #pragma once #include &amp;#34;AssetModel.hpp&amp;#34; #include &amp;#34;AssetManager.hpp&amp;#34; Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Audio</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_c64386e93f356b78d4612c7b7741707c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_c64386e93f356b78d4612c7b7741707c/</guid>
      <description>src/Audio # Files # Name src/Audio/Audio.hpp src/Audio/AudioBuffer.hpp src/Audio/AudioManager.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Audio/Audio.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/audio_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/audio_8hpp/</guid>
      <description>src/Audio/Audio.hpp # Source code # #pragma once #include &amp;#34;AudioBuffer.hpp&amp;#34; #include &amp;#34;AudioManager.hpp&amp;#34; Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Audio/AudioBuffer.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/audiobuffer_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/audiobuffer_8hpp/</guid>
      <description>src/Audio/AudioBuffer.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Audio Classes # Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. Source code # #pragma once #include &amp;#34;../Utils/ArrayView.hpp&amp;#34; namespace Engine { namespace Audio { class AudioManager; class AudioBuffer; typedef int (*Callback)(AudioBuffer&amp;amp; buffer, size_t offset); using Callback2 = int (*)(AudioBuffer&amp;amp; buffer, size_t offset, void* user); extern void doSomething(AudioBuffer&amp;amp; buffer); class AudioBuffer { public: enum class Type { UNKNOWN = 0, INT_8 = 1 &amp;lt;&amp;lt; 1, INT_16 = 1 &amp;lt;&amp;lt; 2, INT_24 = 1 &amp;lt;&amp;lt; 3, INT_32 = 1 &amp;lt;&amp;lt; 4, FLOAT_32 = 1 &amp;lt;&amp;lt; 5 }; template &amp;lt;typename T&amp;gt; using AudioData = Utils::ArrayView&amp;lt;T&amp;gt;; typedef AudioData&amp;lt;uint8_t&amp;gt; AudioData8U; struct TypedAudioData { AudioData8U buffer; Type type; }; explicit AudioBuffer(const std::string&amp;amp; filename); virtual ~AudioBuffer() = default; void play(AudioManager&amp;amp; manager) const; void stop(AudioManager&amp;amp; manager) const; void loop(AudioManager&amp;amp; manager) const; void setData(const TypedAudioData&amp;amp; data); template &amp;lt;size_t Size&amp;gt; void setDataMultiple(const TypedAudioData data[Size]) { } void setData(const TypedAudioData data[], size_t size); friend class AudioManager; friend void Audio::doSomething(AudioBuffer&amp;amp; buffer); void setCallback(Callback callback); void setCallback2(Callback2 callback, void* user); protected: float* getData(); bool playing{false}; }; } // namespace Audio } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Audio/AudioManager.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/audiomanager_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/audiomanager_8hpp/</guid>
      <description>src/Audio/AudioManager.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Audio Classes # Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Source code # #pragma once #include &amp;#34;AudioBuffer.hpp&amp;#34; namespace Engine { namespace Audio { class AudioManager final { public: AudioManager(int numOfChannels = 128); ~AudioManager(); void enque(const AudioBuffer&amp;amp; buffer); }; } // namespace Audio } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Engine.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/engine_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/engine_8hpp/</guid>
      <description>src/Engine.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Functions # Name std::string someGlobalFunc()Some global extern function. Functions Documentation # function someGlobalFunc # std::string someGlobalFunc() Some global extern function.
Source code # #include &amp;#34;Assets/Assets.hpp&amp;#34; #include &amp;#34;Audio/Audio.hpp&amp;#34; #include &amp;#34;Exception.hpp&amp;#34; #include &amp;#34;Graphics/Graphics.hpp&amp;#34; #include &amp;#34;Gui/Gui.hpp&amp;#34; #include &amp;#34;Utils/Utils.hpp&amp;#34; extern std::string someGlobalFunc(); namespace Engine { extern std::string getVersion(); } // namespace Engine //----------------------------------------------------------- //----------------------------------------------------------- Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Exception.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/exception_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/exception_8hpp/</guid>
      <description>src/Exception.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Classes # Name class Engine::Exception Source code # #pragma once #include &amp;lt;exception&amp;gt; #include &amp;lt;string&amp;gt; namespace Engine { class Exception: public std::exception { public: Exception() = default; explicit Exception(std::string msg) : msg(std::move(msg)) { } const char* what() const throw() override { return msg.c_str(); } private: std::string msg; }; } Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_3419e189e460663ec2c964233bf8dcd6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_3419e189e460663ec2c964233bf8dcd6/</guid>
      <description>src/Graphics # Files # Name src/Graphics/Framebuffer.hpp src/Graphics/Graphics.hpp src/Graphics/Handle.hpp src/Graphics/Renderer.hpp src/Graphics/Texture.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture3D.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Framebuffer.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/framebuffer_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/framebuffer_8hpp/</guid>
      <description>src/Graphics/Framebuffer.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes # Name class Engine::Graphics::Framebuffer Source code # #pragma once #include &amp;#34;Texture.hpp&amp;#34; namespace Engine { namespace Graphics { class Framebuffer : public Texture { public: Framebuffer(int width, int height); virtual ~Framebuffer(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Graphics.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/graphics_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/graphics_8hpp/</guid>
      <description>src/Graphics/Graphics.hpp # Source code # #pragma once #include &amp;#34;Framebuffer.hpp&amp;#34; #include &amp;#34;Handle.hpp&amp;#34; #include &amp;#34;Renderer.hpp&amp;#34; #include &amp;#34;Texture.hpp&amp;#34; #include &amp;#34;Texture2D.hpp&amp;#34; #include &amp;#34;Texture3D.hpp&amp;#34; Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Handle.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/handle_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/handle_8hpp/</guid>
      <description>src/Graphics/Handle.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes # Name class Engine::Graphics::Handle Source code # #pragma once namespace Engine { namespace Graphics { class Handle { public: Handle() = default; virtual ~Handle() = default; int getHandle() const { return handle; } protected: // OpenGL handle int handle; }; inline int getHandle(Handle&amp;amp; handle) { return handle.getHandle(); } } // namespace Graphics } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Renderer.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/renderer_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/renderer_8hpp/</guid>
      <description>src/Graphics/Renderer.hpp # Source code # #pragma once Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Texture.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/texture_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/texture_8hpp/</guid>
      <description>src/Graphics/Texture.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes # Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. Source code # #pragma once #include &amp;#34;Handle.hpp&amp;#34; namespace Engine { namespace Graphics { class Texture : protected Handle { public: enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32 }; explicit Texture(Type type); virtual ~Texture() = default; virtual int getWidth() const = 0; virtual int getHeight() const = 0; virtual int getDepth() const = 0; inline bool isLoaded() const { return loaded; } protected: bool loaded{false}; Type type; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Texture2D.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/texture2d_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/texture2d_8hpp/</guid>
      <description>src/Graphics/Texture2D.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes # Name class Engine::Graphics::Texture2D Source code # #pragma once #include &amp;#34;Texture.hpp&amp;#34; namespace Engine { namespace Graphics { class Texture2D : public Texture { public: Texture2D(int width, int height, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture2D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Graphics/Texture3D.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/texture3d_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/texture3d_8hpp/</guid>
      <description>src/Graphics/Texture3D.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes # Name class Engine::Graphics::Texture3D Some deprecated class. Source code # #pragma once #pragma once #include &amp;#34;Texture.hpp&amp;#34; namespace Engine { namespace Graphics { class Texture3D : public Texture { public: Texture3D(int width, int height, int depth, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture3D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Gui</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/</guid>
      <description>src/Gui # Files # Name src/Gui/Gui.hpp src/Gui/GuiWidget.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Gui/Gui.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/gui_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/gui_8hpp/</guid>
      <description>src/Gui/Gui.hpp # Source code # #pragma once Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Gui/GuiWidget.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/guiwidget_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/guiwidget_8hpp/</guid>
      <description>src/Gui/GuiWidget.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Gui Classes # Name class Engine::Gui::GuiWidget Some generic gui widget class. Source code # #pragma once class QObject; // Forward definition namespace Engine { namespace Gui { class GuiWidget { public: explicit GuiWidget(QObject* parent); virtual ~GuiWidget() = default; signals: void mySignal(QObject* object, int a, bool b); public slots: void mySlot(QObject* object, int a, bool b); private: QObject* parent; }; } // namespace Gui } // namespace Engine Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_a7363e98f9e0bdd87618633653859815/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/dir_a7363e98f9e0bdd87618633653859815/</guid>
      <description>src/Utils # Files # Name src/Utils/ArrayView.hpp src/Utils/Config.hpp src/Utils/Log.hpp src/Utils/Path.hpp src/Utils/Utils.hpp Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils/ArrayView.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/arrayview_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/arrayview_8hpp/</guid>
      <description>src/Utils/ArrayView.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Utils Classes # Name class Engine::Utils::ArrayView Filesystem path utility functions. Source code # #pragma once namespace Engine { namespace Utils { template&amp;lt;typename T = uint8_t&amp;gt; class ArrayView { public: ArrayView(const T* src, size_t len); virtual ~ArrayView() = default; virtual const T* data() const; virtual size_t size() const; }; } } Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils/Config.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/config_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/config_8hpp/</guid>
      <description>src/Utils/Config.hpp # Defines # Name ENGINE_VERSION Autogenerated version string by CMake. ENGINE_ARCH Macros Documentation # define ENGINE_VERSION # #define ENGINE_VERSION &amp;#34;v1.0.1&amp;#34; Autogenerated version string by CMake.
define ENGINE_ARCH # #define ENGINE_ARCH &amp;#34;amd64&amp;#34; Source code # #pragma once #define ENGINE_VERSION &amp;#34;v1.0.1&amp;#34; #define ENGINE_ARCH &amp;#34;amd64&amp;#34; Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils/Log.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/log_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/log_8hpp/</guid>
      <description>src/Utils/Log.hpp # Defines # Name LOG_DEBUG(MSG, &amp;hellip;) Macros Documentation # define LOG_DEBUG # #define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Source code # #pragma once #include &amp;lt;stdio.h&amp;gt; #define LOG_DEBUG(MSG, ...) printf(MSG, ##__VA_ARGS__) Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils/Path.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/path_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/path_8hpp/</guid>
      <description>src/Utils/Path.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Utils Engine::Utils::Path Filesystem path utility functions. Source code # #pragma once #include &amp;lt;string&amp;gt; namespace Engine { namespace Utils { namespace Path { std::string getFilename(const std::string&amp;amp; path); std::string getExtension(const std::string&amp;amp; path); } } } Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
    <item>
      <title>src/Utils/Utils.hpp</title>
      <link>https://alandefreitas.github.io/doxybook/hugo-book/files/utils_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alandefreitas.github.io/doxybook/hugo-book/files/utils_8hpp/</guid>
      <description>src/Utils/Utils.hpp # Namespaces # Name Engine This namespace contains all of the necessary engine components. Engine::Utils Source code # #pragma once #include &amp;#34;Path.hpp&amp;#34; #include &amp;#34;ArrayView.hpp&amp;#34; #include &amp;#34;Config.hpp&amp;#34; #include &amp;#34;Log.hpp&amp;#34; namespace Engine { namespace Utils { inline void name_with_underscores(const std::string&amp;amp; arg) { (void)arg; } } } Updated on 2022-11-15 at 04:08:15 +0000</description>
    </item>
    
  </channel>
</rss>
