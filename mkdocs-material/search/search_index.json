{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Doxybook Example","text":"<p>This is a mainpage of Doxybook example output. This file is generated from <code>\\mainpage</code> command within Engine.hpp file.</p>"},{"location":"#images","title":"Images:","text":""},{"location":"#refs","title":"Refs:","text":"<ul> <li>Some texture class ref</li> <li>Some audio buffer class ref</li> </ul>"},{"location":"#simple-list","title":"Simple list:","text":"<ul> <li>list item 1<ul> <li>sub item 1<ul> <li>sub sub item 1 with italic</li> <li>sub sub item 2 with bold</li> </ul> </li> <li>sub item 2</li> </ul> </li> <li>list item 2<ul> <li>sub item 3<ul> <li>sub sub item 3 with ~~strike through~~</li> <li>sub sub item 4 with <code>monospaced</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"#enumerated-list","title":"Enumerated list:","text":"<ol> <li>list item 1<ul> <li>sub item 1<ul> <li>sub sub item 1 with italic</li> <li>sub sub item 2 with bold</li> </ul> </li> <li>sub item 2</li> </ul> </li> <li>list item 2<ul> <li>sub item 3<ul> <li>sub sub item 3 with ~~strike through~~</li> </ul> </li> </ul> </li> </ol>"},{"location":"#hyper-links","title":"Hyper links:","text":"<ul> <li>GitHub repository</li> </ul>"},{"location":"#code-blocks","title":"Code blocks:","text":"<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char** argv) {\n    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"#subpages","title":"Subpages:","text":"<p>This manual is divided in the following sections:</p> <ul> <li>Introduction</li> <li>Advanced usage</li> </ul>"},{"location":"#snippet","title":"Snippet:","text":"<pre><code>\n#include \"Engine.hpp\"\n\n// A dummy example \nint main() {\n    // Create pixels buffer\n    const auto pixels = std::make_unique&lt;uint8_t[]&gt;(new uint8_t[1024*1024*3]);\n    fillData(*pixels, \"path/to/texture.png\");\n\n    // Create a texture out of the pixels\n    Engine::Graphics::Texture2D texture(1024, 1024, *data);\n\n    // Done\n    return 0;\n}\n</code></pre> <p>Filename: example-1.cpp</p>"},{"location":"#table","title":"Table:","text":"First Header Second Header Third Header     Content Cell Content Cell Content Cell with ref Engine::Audio::AudioBuffer   Content Cell Content Cell Content Cell with link"},{"location":"#inline-formula","title":"Inline formula","text":"<p>Please see mkdocs-readthedocs example at https://alandefreitas.github.io/doxybook/mkdocs-readthedocs/ to see a working example using mkdocs + pymdownx.arithmatex</p> <p>The distance between ((x_1,y_1)) and ((x_2,y_2)) is (\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}).</p>"},{"location":"#block-formula","title":"Block formula","text":"<p>[ |I_2|=\\left| \\int_{0}^T \\psi(t) \\left{ u(a,t)- \\int_{\\gamma(t)}^a \\frac{d\\theta}{k(\\theta,t)} \\int_{a}^\\theta c(\\xi)u_t(\\xi,t)\\,d\\xi \\right} dt \\right| ]</p>"},{"location":"#blockquote","title":"Blockquote","text":"<p>This is some random blockquote! </p>   <p>Updated on 2023-01-02</p>"},{"location":"classes/","title":"Classes","text":"Class      Engine This namespace contains all of the necessary engine components. (namespace)   Assets (namespace)   Asset (class)   Event (union)   Loaded (struct)   Unloaded (struct)   Waiting (struct)   Audio (namespace)   AudioBuffer A simple audio buffer to hold PCM samples(class)   TypedAudioData Use this to populate the buffer. (struct)   AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. (class)   Exception (class)   Graphics (namespace)   Framebuffer (class)   Handle (class)   Texture This is a base texture class that serves as a base class for other texture types. (interface)   Texture2D (class)   Texture3D Some deprecated class. (class)   Gui (namespace)   GuiWidget Some generic gui widget class. (class)   Utils (namespace)   ArrayView Filesystem path utility functions. (class)   Path Filesystem path utility functions. (namespace)   std (namespace)     <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/","title":"Engine::Assets::Asset","text":"<p>An example game engine / Generic assets / Asset</p> <p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>\nclass Asset;\n</code></pre>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#public-classes","title":"Public Classes","text":"Name     union Event"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor)  = 0 (virtual function)   load Call this method to load the asset.  (virtual function)   unload Call this method to unload the asset.  (virtual function)   getEvent const Returns the current status of the asset.  (function)"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Assets_1_1Asset/#function-asset","title":"function Asset","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>explicit Asset(const std::string &amp; name);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#function-asset_1","title":"function ~Asset","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>virtual ~Asset() = 0;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#function-load","title":"function load","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>virtual void\nload();\n</code></pre> <p>Call this method to load the asset. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#function-unload","title":"function unload","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>virtual void\nunload();\n</code></pre> <p>Call this method to unload the asset. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Assets_1_1Asset/#function-getevent","title":"function getEvent","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>const Event &amp;\ngetEvent() const;\n</code></pre> <p>Returns the current status of the asset. </p> <p>Description</p> <p>Use this to determine the state, for example if the assets is being loaded or unloaded. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/","title":"Engine::Audio::AudioBuffer","text":"<p>An example game engine / Audio buffers and devices / AudioBuffer</p> <p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>\nclass AudioBuffer;\n</code></pre> <p>A simple audio buffer to hold PCM samples</p> <p>Description</p> <p>Lorem ipsum donor </p> <pre><code>// Some random code\nusing namespace Engine;\n\nAudio::AudioBuffer buffer(\"path/to/file.wav\");\nbuffer.play(audioManager);\n</code></pre> <p>More detailed description! </p> <pre><code>// Another code sample\n#include &lt;iostream&gt;\nusing namespace Engine;\nAudio::AudioBuffer buffer(\"path/to/file.wav\");\nstd::cout &lt;&lt; buffer.play(...) &lt;&lt; std::endl;\n</code></pre> <p>Author: Matus Novak </p> <p>Date: 2017-2019 </p> <p>Note: </p> <ul> <li>Some random note </li> <li>Some second random note </li> </ul> <p>Bug: Some random bug </p> <p>Some other random bug </p> <p>Test: Some random test description </p> <p>Todo: Some random todo </p> <p>Warning: Some random warning </p> <p>Precondition: First initialize the system. </p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#public-classes","title":"Public Classes","text":"Name     struct TypedAudioData Use this to populate the buffer."},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types","title":"Public Types","text":"Member Types Definition     Type Different type of audio formats.  (enum)   AudioData <code>[Utils::ArrayView](/doxybook/mkdocs-material/classes/classEngine_1_1Utils_1_1ArrayView/)&lt; T &gt;</code> (using)   AudioData8U <code>[AudioData](/doxybook/mkdocs-material/classes/classEngine_1_1Audio_1_1AudioBuffer/#using-audiodata)&lt; uint8_t &gt;</code> (typedef)"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor for Audio::AudioBuffer.  (function)   (destructor) = default Audio::AudioBuffer destructor.  (virtual function)   play const Play this buffer.  (function)   stop const Stop this buffer playing.  (function)   loop const Loop this buffer forever.  (function)   setData (function)   setDataMultiple (function template)   setCallback Set the callback function.  (function)   setCallback2 Set the callback function.  (function)"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions","title":"Protected Functions","text":"Member Protected Functions Description     getData (function)"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     playing <code>bool</code> (protected variable)"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#friends","title":"Friends","text":"Friends Description     AudioManager (public friend class)   Audio::doSomething (public friend void)"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types_1","title":"Public Types","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#enum-type","title":"enum Type","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>enum class Type;\n</code></pre>    Enumerator Value Description     UNKNOWN 0 Dont use this   INT_8 1 &lt;&lt; 1 8-bit signed integer   INT_16 1 &lt;&lt; 2 16-bit signed integer   INT_24 1 &lt;&lt; 3 24-bit signed integer   INT_32 1 &lt;&lt; 4 32-bit signed integer   FLOAT_32 1 &lt;&lt; 5 32-bit float    <p>Different type of audio formats. </p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#using-audiodata","title":"using AudioData","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>template &lt;typename T&gt;\nusing AudioData = Utils::ArrayView&lt; T &gt;;\n</code></pre>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#typedef-audiodata8u","title":"typedef AudioData8U","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>typedef AudioData&lt;uint8_t&gt; Engine::Audio::AudioBuffer::AudioData8U;\n</code></pre>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer","title":"function AudioBuffer","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>explicit AudioBuffer(const std::string &amp; filename);\n</code></pre> <p>Constructor for Audio::AudioBuffer. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer_1","title":"function ~AudioBuffer","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>virtual ~AudioBuffer() = default;\n</code></pre> <p>Audio::AudioBuffer destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-play","title":"function play","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\nplay(AudioManager &amp; manager) const;\n</code></pre> <p>Play this buffer. </p> <p>Parameters</p> <ul> <li>manager - Which manager to play the sound with </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-stop","title":"function stop","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\nstop(AudioManager &amp; manager) const;\n</code></pre> <p>Stop this buffer playing. </p> <p>Parameters</p> <ul> <li>manager - Which manager to stop the sound with </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-loop","title":"function loop","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\nloop(AudioManager &amp; manager) const;\n</code></pre> <p>Loop this buffer forever. </p> <p>Parameters</p> <ul> <li>manager - Which manager to loop the sound with </li> </ul> <p>Notes</p> <p>This will loop forever until you call stop </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata","title":"function setData","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <p>```cpp  title=\"(1)\"  void setData(const TypedAudioData &amp; data);</p> <pre><code>\n```cpp  title=\"(2)\" \nvoid\nsetData(const TypedAudioData data[], size_t size);\n</code></pre> <p>Some deprecated function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdatamultiple","title":"function setDataMultiple","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>template &lt;size_t Size&gt;\nvoid\nsetDataMultiple(const TypedAudioData data[Size]);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback","title":"function setCallback","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\nsetCallback(Callback callback);\n</code></pre> <p>Set the callback function. </p> <p>Parameters</p> <ul> <li>callback - The callback function pointer </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>Audio::Callback</li> </ul>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback2","title":"function setCallback2","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\nsetCallback2(Callback2 callback, void * user);\n</code></pre> <p>Set the callback function. </p> <p>Parameters</p> <ul> <li>callback - The callback function pointer </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p> <p>See Also</p> <ul> <li>Audio::Callback</li> </ul>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions_1","title":"Protected Functions","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#function-getdata","title":"function getData","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>float *\ngetData();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#variable-playing","title":"variable playing","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>bool playing {false};\n</code></pre>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#friends_1","title":"Friends","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiomanager","title":"friend AudioManager","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>friend\nclass AudioManager(AudioManager);\n</code></pre>"},{"location":"classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiodosomething","title":"friend Audio::doSomething","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>friend\nvoid Audio::doSomething(AudioBuffer &amp; buffer);\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/","title":"Engine::Audio::AudioManager","text":"<p>An example game engine / Audio buffers and devices / AudioManager</p> <p>Defined in header <code>&lt;src/Audio/AudioManager.hpp&gt;</code></p> <pre><code>\nclass AudioManager;\n</code></pre> <p>An audio manager that accepts multiple Audio::AudioBuffer instances. </p> <p>Description</p> <p>Lorem Ipsum Donor. Some Random link with bold and italics And the following is a <code>typewritter</code> font. And here is some list items:</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item with bold text</li> </ul> <p>Followed by some more text and another list:</p> <ul> <li>First item</li> <li>Second item</li> </ul> <p>See Also: Audio::AudioBuffer</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) (function)   enque (function)"},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager","title":"function AudioManager","text":"<p>Defined in header <code>&lt;src/Audio/AudioManager.hpp&gt;</code></p> <pre><code>AudioManager(int numOfChannels =128);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager_1","title":"function ~AudioManager","text":"<p>Defined in header <code>&lt;src/Audio/AudioManager.hpp&gt;</code></p> <pre><code>~AudioManager();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Audio_1_1AudioManager/#function-enque","title":"function enque","text":"<p>Defined in header <code>&lt;src/Audio/AudioManager.hpp&gt;</code></p> <pre><code>void\nenque(const AudioBuffer &amp; buffer);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Exception/","title":"Engine::Exception","text":"<p>An example game engine / Exception</p> <p>Defined in header <code>&lt;src/Exception.hpp&gt;</code></p> <pre><code>\nclass Exception;\n</code></pre> <p>Inherits from <code>std::exception</code></p>"},{"location":"classes/classEngine_1_1Exception/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   what const override (function)"},{"location":"classes/classEngine_1_1Exception/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Exception/#function-exception","title":"function Exception","text":"<p>Defined in header <code>&lt;src/Exception.hpp&gt;</code></p> <p>```cpp  title=\"(1)\"  Exception() = default;</p> <pre><code>\n```cpp  title=\"(2)\" \nexplicit Exception(std::string msg);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Exception/#function-what","title":"function what","text":"<p>Defined in header <code>&lt;src/Exception.hpp&gt;</code></p> <pre><code>const char *\nwhat() const override;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/","title":"Engine::Graphics::Framebuffer","text":"<p>An example game engine / Graphical related classes / Framebuffer</p> <p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>\nclass Framebuffer;\n</code></pre> <p>Inherits from Texture, Handle</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) (virtual function)   getWidth const override Returns the width of the texture in pixels.  (virtual function)   getHeight const override Returns the height of the texture in pixels.  (virtual function)   getDepth const override Returns the depth of the texture in pixels.  (virtual function)"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types(inherited from Engine::Graphics::Texture)</p>    Member Types Definition     Type <code>Type</code> (enum)    <p>Public Functions(inherited from Engine::Graphics::Texture)</p>    Member Functions Description     Texture (function)   ~Texture = default (virtual function)   isLoaded const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Texture)</p>    Member Protected Attributes Description     loaded <code>bool</code> (protected variable)   type Type (protected variable)    <p>Public Functions(inherited from Engine::Graphics::Handle)</p>    Member Functions Description     Handle = default (function)   ~Handle = default (virtual function)   getHandle const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Handle)</p>    Member Protected Attributes Description     handle <code>int</code> (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer","title":"function Framebuffer","text":"<p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>Framebuffer(int width, int height);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer_1","title":"function ~Framebuffer","text":"<p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>virtual ~Framebuffer();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getwidth","title":"function getWidth","text":"<p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>virtual int\ngetWidth() const override;\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return value</p> <p>Width in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getheight","title":"function getHeight","text":"<p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>virtual int\ngetHeight() const override;\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return value</p> <p>Height in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getdepth","title":"function getDepth","text":"<p>Defined in header <code>&lt;src/Graphics/Framebuffer.hpp&gt;</code></p> <pre><code>virtual int\ngetDepth() const override;\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return value</p> <p>Depth in pixels </p> <p>Notes</p> <p>If this texture is 2D the depth is always 1 pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/","title":"Engine::Graphics::Handle","text":"<p>An example game engine / Graphical related classes / Handle</p> <p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>\nclass Handle;\n</code></pre> <p>Inherited by: <code>Handle</code> is a base class for Texture</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) = default (function)   (destructor) = default (virtual function)   getHandle const (function)"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     handle <code>int</code> (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#function-handle","title":"function Handle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>Handle() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#function-handle_1","title":"function ~Handle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>virtual ~Handle() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#function-gethandle","title":"function getHandle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>int\ngetHandle() const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Handle/#variable-handle","title":"variable handle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>int handle;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/","title":"Engine::Graphics::Texture","text":"<p>An example game engine / Graphical related classes / Texture</p> <p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>\nclass Texture;\n</code></pre> <p>This is a base texture class that serves as a base class for other texture types. </p> <p>Description</p> <pre><code>\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"Engine.hpp\"\n\n// A dummy example \nint main() {\n    // Create pixels buffer\n    const auto pixels = std::make_unique&lt;uint8_t[]&gt;(new uint8_t[1024*1024*3]);\n    fillData(*pixels, \"path/to/texture.png\");\n\n    // Create a texture out of the pixels\n    Engine::Graphics::Texture2D texture(1024, 1024, *data);\n\n    // Done\n    return 0;\n}\n</code></pre> <p>Filename: example-1.cpp</p> <p>Bug: This has some weird bug too! </p> <p>Inherits from Handle</p> <p>Inherited by: <code>Texture</code> is a base class for Framebuffer, Texture2D,  and Texture3D</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#public-types","title":"Public Types","text":"Member Types Definition     Type <code>Type</code> (enum)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) = default (virtual function)   getWidth const = 0 Returns the width of the texture in pixels.  (virtual function)   getHeight const = 0 Returns the height of the texture in pixels.  (virtual function)   getDepth const = 0 Returns the depth of the texture in pixels.  (virtual function)   isLoaded const (function)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     loaded <code>bool</code> (protected variable)   type Type (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from Engine::Graphics::Handle)</p>    Member Functions Description     Handle = default (function)   ~Handle = default (virtual function)   getHandle const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Handle)</p>    Member Protected Attributes Description     handle <code>int</code> (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#public-types_1","title":"Public Types","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#enum-type","title":"enum Type","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>enum class Type;\n</code></pre>    Enumerator Value Description     UNKNOWN 0    RGBA_8     RGB_8     RGBA_16     RGB_16     RGBA_32     RGB_32"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-texture","title":"function Texture","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>explicit Texture(Type type);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-texture_1","title":"function ~Texture","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>virtual ~Texture() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-getwidth","title":"function getWidth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>virtual int\ngetWidth() const = 0;\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return value</p> <p>Width in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-getheight","title":"function getHeight","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>virtual int\ngetHeight() const = 0;\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return value</p> <p>Height in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-getdepth","title":"function getDepth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>virtual int\ngetDepth() const = 0;\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return value</p> <p>Depth in pixels </p> <p>Notes</p> <p>If this texture is 2D the depth is always 1 pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#function-isloaded","title":"function isLoaded","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>bool\nisLoaded() const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#variable-loaded","title":"variable loaded","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>bool loaded {false};\n</code></pre>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;src/Graphics/Texture.hpp&gt;</code></p> <pre><code>Type type;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/","title":"Engine::Graphics::Texture2D","text":"<p>An example game engine / Graphical related classes / Texture2D</p> <p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>\nclass Texture2D;\n</code></pre> <p>Inherits from Texture, Handle</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) (virtual function)   getWidth const override Returns the width of the texture in pixels.  (virtual function)   getHeight const override Returns the height of the texture in pixels.  (virtual function)   getDepth const override Returns the depth of the texture in pixels.  (virtual function)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types(inherited from Engine::Graphics::Texture)</p>    Member Types Definition     Type <code>Type</code> (enum)    <p>Public Functions(inherited from Engine::Graphics::Texture)</p>    Member Functions Description     Texture (function)   ~Texture = default (virtual function)   isLoaded const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Texture)</p>    Member Protected Attributes Description     loaded <code>bool</code> (protected variable)   type Type (protected variable)    <p>Public Functions(inherited from Engine::Graphics::Handle)</p>    Member Functions Description     Handle = default (function)   ~Handle = default (virtual function)   getHandle const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Handle)</p>    Member Protected Attributes Description     handle <code>int</code> (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d","title":"function Texture2D","text":"<p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>Texture2D(\n    int width, \n    int height, \n    uint8_t * data, \n    Texture::Type type =Texture::Type::RGBA8);\n</code></pre> <p>Parameters</p> <ul> <li>data - The pointer to the raw pixels data </li> <li>height - The height of the image held by the data pointer </li> <li>type - What is the type of this pixels array? </li> <li>width - The width of the image held by the data pointer </li> </ul> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d_1","title":"function ~Texture2D","text":"<p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>virtual ~Texture2D();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#function-getwidth","title":"function getWidth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>virtual int\ngetWidth() const override;\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return value</p> <p>Width in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#function-getheight","title":"function getHeight","text":"<p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>virtual int\ngetHeight() const override;\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return value</p> <p>Height in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture2D/#function-getdepth","title":"function getDepth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture2D.hpp&gt;</code></p> <pre><code>virtual int\ngetDepth() const override;\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return value</p> <p>Depth in pixels </p> <p>Notes</p> <p>If this texture is 2D the depth is always 1 pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/","title":"Engine::Graphics::Texture3D","text":"<p>An example game engine / Graphical related classes / Texture3D</p> <p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>\nclass Texture3D;\n</code></pre> <p>Some deprecated class. </p> <p>Deprecated:</p> <p>Don't use this texture type </p> <p>Inherits from Texture, Handle</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) (virtual function)   getWidth const override Returns the width of the texture in pixels.  (virtual function)   getHeight const override Returns the height of the texture in pixels.  (virtual function)   getDepth const override Returns the depth of the texture in pixels.  (virtual function)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Types(inherited from Engine::Graphics::Texture)</p>    Member Types Definition     Type <code>Type</code> (enum)    <p>Public Functions(inherited from Engine::Graphics::Texture)</p>    Member Functions Description     Texture (function)   ~Texture = default (virtual function)   isLoaded const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Texture)</p>    Member Protected Attributes Description     loaded <code>bool</code> (protected variable)   type Type (protected variable)    <p>Public Functions(inherited from Engine::Graphics::Handle)</p>    Member Functions Description     Handle = default (function)   ~Handle = default (virtual function)   getHandle const (function)    <p>Protected Attributes(inherited from Engine::Graphics::Handle)</p>    Member Protected Attributes Description     handle <code>int</code> (protected variable)"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d","title":"function Texture3D","text":"<p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>Texture3D(\n    int width, \n    int height, \n    int depth, \n    uint8_t * data, \n    Texture::Type type =Texture::Type::RGBA8);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d_1","title":"function ~Texture3D","text":"<p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>virtual ~Texture3D();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#function-getwidth","title":"function getWidth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>virtual int\ngetWidth() const override;\n</code></pre> <p>Returns the width of the texture in pixels. </p> <p>Return value</p> <p>Width in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#function-getheight","title":"function getHeight","text":"<p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>virtual int\ngetHeight() const override;\n</code></pre> <p>Returns the height of the texture in pixels. </p> <p>Return value</p> <p>Height in pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Graphics_1_1Texture3D/#function-getdepth","title":"function getDepth","text":"<p>Defined in header <code>&lt;src/Graphics/Texture3D.hpp&gt;</code></p> <pre><code>virtual int\ngetDepth() const override;\n</code></pre> <p>Returns the depth of the texture in pixels. </p> <p>Return value</p> <p>Depth in pixels </p> <p>Notes</p> <p>If this texture is 2D the depth is always 1 pixels </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/","title":"Engine::Gui::GuiWidget","text":"<p>An example game engine / Some gui related stuff and whatever / GuiWidget</p> <p>Defined in header <code>&lt;src/Gui/GuiWidget.hpp&gt;</code></p> <pre><code>\nclass GuiWidget;\n</code></pre> <p>Some generic gui widget class. </p>"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots","title":"Public Slots","text":"Member Slots Description     mySlot (slot)"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals","title":"Public Signals","text":"Member Signals Description     mySignal (signal)"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) = default (virtual function)"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots_1","title":"Public Slots","text":""},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#slot-myslot","title":"slot mySlot","text":"<p>Defined in header <code>&lt;src/Gui/GuiWidget.hpp&gt;</code></p> <pre><code>void mySlot(\n    QObject * object,\n    int a,\n    bool b\n);\n</code></pre>"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals_1","title":"Public Signals","text":""},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#signal-mysignal","title":"signal mySignal","text":"<p>Defined in header <code>&lt;src/Gui/GuiWidget.hpp&gt;</code></p> <pre><code>void mySignal(\n    QObject * object,\n    int a,\n    bool b\n);\n</code></pre>"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget","title":"function GuiWidget","text":"<p>Defined in header <code>&lt;src/Gui/GuiWidget.hpp&gt;</code></p> <pre><code>explicit GuiWidget(QObject * parent);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget_1","title":"function ~GuiWidget","text":"<p>Defined in header <code>&lt;src/Gui/GuiWidget.hpp&gt;</code></p> <pre><code>virtual ~GuiWidget() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/","title":"Engine::Utils::ArrayView","text":"<p>An example game engine / Some useful utilities / ArrayView</p> <p>Defined in header <code>&lt;src/Utils/ArrayView.hpp&gt;</code></p> <pre><code>template &lt;typename T = uint8_t&gt; \nclass ArrayView;\n</code></pre> <p>Filesystem path utility functions. </p> <p>Template Parameters</p> <ul> <li>T - The type of the data, for example uint8_t </li> </ul>"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) (function)   (destructor) = default (virtual function)   data const (virtual function)   size const (virtual function)"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#public-functions_1","title":"Public Functions","text":""},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview","title":"function ArrayView","text":"<p>Defined in header <code>&lt;src/Utils/ArrayView.hpp&gt;</code></p> <pre><code>ArrayView(const T * src, size_t len);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview_1","title":"function ~ArrayView","text":"<p>Defined in header <code>&lt;src/Utils/ArrayView.hpp&gt;</code></p> <pre><code>virtual ~ArrayView() = default;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#function-data","title":"function data","text":"<p>Defined in header <code>&lt;src/Utils/ArrayView.hpp&gt;</code></p> <pre><code>virtual const T *\ndata() const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"classes/classEngine_1_1Utils_1_1ArrayView/#function-size","title":"function size","text":"<p>Defined in header <code>&lt;src/Utils/ArrayView.hpp&gt;</code></p> <pre><code>virtual size_t\nsize() const;\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/","title":"Engine::Assets::Asset::Event::Loaded","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>\nstruct Loaded;\n</code></pre>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     success <code>bool</code> (public variable)   usage <code>int</code> (public variable)"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes_1","title":"Public Attributes","text":""},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-success","title":"variable success","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>bool success;\n</code></pre>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-usage","title":"variable usage","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>int usage;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/","title":"Engine::Assets::Asset::Event::Unloaded","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>\nstruct Unloaded;\n</code></pre>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     success <code>bool</code> (public variable)"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes_1","title":"Public Attributes","text":""},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#variable-success","title":"variable success","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>bool success;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/","title":"Engine::Assets::Asset::Event::Waiting","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>\nstruct Waiting;\n</code></pre>"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     other The pointer to the other asset this asset is waiting for.  (public variable)"},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes_1","title":"Public Attributes","text":""},{"location":"classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#variable-other","title":"variable other","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>Asset * other;\n</code></pre> <p>The pointer to the other asset this asset is waiting for. </p> <p>Note: May be null </p>  <p>Updated on 2023-01-02</p>"},{"location":"classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/","title":"Engine::Audio::AudioBuffer::TypedAudioData","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>\nstruct TypedAudioData;\n</code></pre> <p>Use this to populate the buffer. </p>"},{"location":"classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     buffer AudioData8U (public variable)   type Type (public variable)"},{"location":"classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes_1","title":"Public Attributes","text":""},{"location":"classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-buffer","title":"variable buffer","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>AudioData8U buffer;\n</code></pre>"},{"location":"classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>Type type;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/","title":"Engine::Assets::Asset::Event","text":"<p>An example game engine / Generic assets / Event</p> <p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>\nunion Event;\n</code></pre>"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-classes","title":"Public Classes","text":"Name     struct Loaded   struct Unloaded   struct Waiting"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     loaded struct Engine::Assets::Asset::Event::Loaded (public variable)   unloaded struct Engine::Assets::Asset::Event::Unloaded (public variable)   waiting struct Engine::Assets::Asset::Event::Waiting (public variable)"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes_1","title":"Public Attributes","text":""},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-loaded","title":"variable loaded","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>struct Engine::Assets::Asset::Event::Loaded loaded;\n</code></pre>"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-unloaded","title":"variable unloaded","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>struct Engine::Assets::Asset::Event::Unloaded unloaded;\n</code></pre>"},{"location":"classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-waiting","title":"variable waiting","text":"<p>Defined in header <code>&lt;src/Assets/Asset.hpp&gt;</code></p> <pre><code>struct Engine::Assets::Asset::Event::Waiting waiting;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"examples/","title":"Examples","text":"Example      example-1.cpp This is an example. (example)     <p>Updated on 2023-01-02</p>"},{"location":"examples/example-1_8cpp-example/","title":"example-1.cpp","text":"<p>This is an example This is detailed docummentation ```cpp</p>"},{"location":"examples/example-1_8cpp-example/#include","title":"include","text":""},{"location":"examples/example-1_8cpp-example/#include_1","title":"include","text":""},{"location":"examples/example-1_8cpp-example/#include-enginehpp","title":"include \"Engine.hpp\" <p>// A dummy example  int main() {     // Create pixels buffer     const auto pixels = std::make_unique(new uint8_t[102410243]);     fillData(*pixels, \"path/to/texture.png\"); <pre><code>// Create a texture out of the pixels\nEngine::Graphics::Texture2D texture(1024, 1024, *data);\n\n// Done\nreturn 0;\n</code></pre> <p>} ```</p> <p>Filename: example-1.cpp</p>  <p>Updated on 2023-01-02</p>","text":""},{"location":"files/","title":"Files","text":"File      src (directory)   src/Engine.hpp (file)   src/Exception.hpp (file)   src/Assets (directory)   src/Assets/Asset.hpp (file)   src/Assets/Assets.hpp (file)   src/Audio (directory)   src/Audio/Audio.hpp (file)   src/Audio/AudioBuffer.hpp (file)   src/Audio/AudioManager.hpp (file)   src/Graphics (directory)   src/Graphics/Framebuffer.hpp (file)   src/Graphics/Graphics.hpp (file)   src/Graphics/Handle.hpp (file)   src/Graphics/Renderer.hpp (file)   src/Graphics/Texture.hpp (file)   src/Graphics/Texture2D.hpp (file)   src/Graphics/Texture3D.hpp (file)   src/Gui (directory)   src/Gui/Gui.hpp (file)   src/Gui/GuiWidget.hpp (file)   src/Utils (directory)   src/Utils/ArrayView.hpp (file)   src/Utils/Config.hpp (file)   src/Utils/Log.hpp (file)   src/Utils/Path.hpp (file)   src/Utils/Utils.hpp (file)     <p>Updated on 2023-01-02</p>"},{"location":"files/ArrayView_8hpp/","title":"src/Utils/ArrayView.hpp","text":"<pre><code>#include &lt;src/Utils/ArrayView.hpp&gt;\n</code></pre>"},{"location":"files/ArrayView_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Utils"},{"location":"files/ArrayView_8hpp/#classes","title":"Classes","text":"Classes Description     ArrayView Filesystem path utility functions.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Asset_8hpp/","title":"src/Assets/Asset.hpp","text":"<pre><code>#include &lt;src/Assets/Asset.hpp&gt;\n</code></pre>"},{"location":"files/Asset_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Assets"},{"location":"files/Asset_8hpp/#classes","title":"Classes","text":"Classes Description     Asset Engine::Assets::Asset (class)   Event Engine::Assets::Asset::Event (union)   Loaded Engine::Assets::Asset::Event::Loaded (struct)   Unloaded Engine::Assets::Asset::Event::Unloaded (struct)   Waiting Engine::Assets::Asset::Event::Waiting (struct)     <p>Updated on 2023-01-02</p>"},{"location":"files/Assets_8hpp/","title":"src/Assets/Assets.hpp","text":"<pre><code>#include &lt;src/Assets/Assets.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/AudioBuffer_8hpp/","title":"src/Audio/AudioBuffer.hpp","text":"<pre><code>#include &lt;src/Audio/AudioBuffer.hpp&gt;\n</code></pre>"},{"location":"files/AudioBuffer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Audio"},{"location":"files/AudioBuffer_8hpp/#classes","title":"Classes","text":"Classes Description     AudioBuffer A simple audio buffer to hold PCM samples (class)   TypedAudioData Use this to populate the buffer.  (struct)     <p>Updated on 2023-01-02</p>"},{"location":"files/AudioManager_8hpp/","title":"src/Audio/AudioManager.hpp","text":"<pre><code>#include &lt;src/Audio/AudioManager.hpp&gt;\n</code></pre>"},{"location":"files/AudioManager_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Audio"},{"location":"files/AudioManager_8hpp/#classes","title":"Classes","text":"Classes Description     AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Audio_8hpp/","title":"src/Audio/Audio.hpp","text":"<pre><code>#include &lt;src/Audio/Audio.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/Config_8hpp/","title":"src/Utils/Config.hpp","text":"<pre><code>#include &lt;src/Utils/Config.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/Engine_8hpp/","title":"src/Engine.hpp","text":"<pre><code>#include &lt;src/Engine.hpp&gt;\n</code></pre>"},{"location":"files/Engine_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components."},{"location":"files/Engine_8hpp/#functions","title":"Functions","text":"Member Functions Description     someGlobalFunc Some global extern function.  (function)"},{"location":"files/Engine_8hpp/#functions_1","title":"Functions","text":""},{"location":"files/Engine_8hpp/#function-someglobalfunc","title":"function someGlobalFunc","text":"<p>Defined in header <code>&lt;src/Engine.hpp&gt;</code></p> <pre><code>std::string\nsomeGlobalFunc();\n</code></pre> <p>Some global extern function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"files/Exception_8hpp/","title":"src/Exception.hpp","text":"<pre><code>#include &lt;src/Exception.hpp&gt;\n</code></pre>"},{"location":"files/Exception_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components."},{"location":"files/Exception_8hpp/#classes","title":"Classes","text":"Classes Description     Exception Engine::Exception (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Framebuffer_8hpp/","title":"src/Graphics/Framebuffer.hpp","text":"<pre><code>#include &lt;src/Graphics/Framebuffer.hpp&gt;\n</code></pre>"},{"location":"files/Framebuffer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Graphics"},{"location":"files/Framebuffer_8hpp/#classes","title":"Classes","text":"Classes Description     Framebuffer Engine::Graphics::Framebuffer (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Graphics_8hpp/","title":"src/Graphics/Graphics.hpp","text":"<pre><code>#include &lt;src/Graphics/Graphics.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/GuiWidget_8hpp/","title":"src/Gui/GuiWidget.hpp","text":"<pre><code>#include &lt;src/Gui/GuiWidget.hpp&gt;\n</code></pre>"},{"location":"files/GuiWidget_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Gui"},{"location":"files/GuiWidget_8hpp/#classes","title":"Classes","text":"Classes Description     GuiWidget Some generic gui widget class.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Gui_8hpp/","title":"src/Gui/Gui.hpp","text":"<pre><code>#include &lt;src/Gui/Gui.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/Handle_8hpp/","title":"src/Graphics/Handle.hpp","text":"<pre><code>#include &lt;src/Graphics/Handle.hpp&gt;\n</code></pre>"},{"location":"files/Handle_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Graphics"},{"location":"files/Handle_8hpp/#classes","title":"Classes","text":"Classes Description     Handle Engine::Graphics::Handle (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Log_8hpp/","title":"src/Utils/Log.hpp","text":"<pre><code>#include &lt;src/Utils/Log.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/Path_8hpp/","title":"src/Utils/Path.hpp","text":"<pre><code>#include &lt;src/Utils/Path.hpp&gt;\n</code></pre>"},{"location":"files/Path_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Utils    Engine::Utils::Path Filesystem path utility functions.     <p>Updated on 2023-01-02</p>"},{"location":"files/Renderer_8hpp/","title":"src/Graphics/Renderer.hpp","text":"<pre><code>#include &lt;src/Graphics/Renderer.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-02</p>"},{"location":"files/Texture2D_8hpp/","title":"src/Graphics/Texture2D.hpp","text":"<pre><code>#include &lt;src/Graphics/Texture2D.hpp&gt;\n</code></pre>"},{"location":"files/Texture2D_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Graphics"},{"location":"files/Texture2D_8hpp/#classes","title":"Classes","text":"Classes Description     Texture2D Engine::Graphics::Texture2D (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Texture3D_8hpp/","title":"src/Graphics/Texture3D.hpp","text":"<pre><code>#include &lt;src/Graphics/Texture3D.hpp&gt;\n</code></pre>"},{"location":"files/Texture3D_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Graphics"},{"location":"files/Texture3D_8hpp/#classes","title":"Classes","text":"Classes Description     Texture3D Some deprecated class.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"files/Texture_8hpp/","title":"src/Graphics/Texture.hpp","text":"<pre><code>#include &lt;src/Graphics/Texture.hpp&gt;\n</code></pre>"},{"location":"files/Texture_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Graphics"},{"location":"files/Texture_8hpp/#classes","title":"Classes","text":"Classes Description     Texture This is a base texture class that serves as a base class for other texture types.  (interface)     <p>Updated on 2023-01-02</p>"},{"location":"files/Utils_8hpp/","title":"src/Utils/Utils.hpp","text":"<pre><code>#include &lt;src/Utils/Utils.hpp&gt;\n</code></pre>"},{"location":"files/Utils_8hpp/#namespaces","title":"Namespaces","text":"Name Description     Engine This namespace contains all of the necessary engine components.   Engine::Utils      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_3419e189e460663ec2c964233bf8dcd6/","title":"src/Graphics","text":""},{"location":"files/dir_3419e189e460663ec2c964233bf8dcd6/#files","title":"Files","text":"Files Description     src/Graphics/Framebuffer.hpp    src/Graphics/Graphics.hpp    src/Graphics/Handle.hpp    src/Graphics/Renderer.hpp    src/Graphics/Texture.hpp    src/Graphics/Texture2D.hpp    src/Graphics/Texture3D.hpp      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"src","text":""},{"location":"files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","title":"Directories","text":"Directories Description     src/Assets    src/Audio    src/Graphics    src/Gui    src/Utils"},{"location":"files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Files Description     src/Engine.hpp    src/Exception.hpp      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_a7363e98f9e0bdd87618633653859815/","title":"src/Utils","text":""},{"location":"files/dir_a7363e98f9e0bdd87618633653859815/#files","title":"Files","text":"Files Description     src/Utils/ArrayView.hpp    src/Utils/Config.hpp    src/Utils/Log.hpp    src/Utils/Path.hpp    src/Utils/Utils.hpp      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/","title":"src/Gui","text":""},{"location":"files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/#files","title":"Files","text":"Files Description     src/Gui/Gui.hpp    src/Gui/GuiWidget.hpp      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_c64386e93f356b78d4612c7b7741707c/","title":"src/Audio","text":""},{"location":"files/dir_c64386e93f356b78d4612c7b7741707c/#files","title":"Files","text":"Files Description     src/Audio/Audio.hpp    src/Audio/AudioBuffer.hpp    src/Audio/AudioManager.hpp      <p>Updated on 2023-01-02</p>"},{"location":"files/dir_e0c1ede47f21c4a643a1257f949f98e0/","title":"src/Assets","text":""},{"location":"files/dir_e0c1ede47f21c4a643a1257f949f98e0/#files","title":"Files","text":"Files Description     src/Assets/Asset.hpp    src/Assets/Assets.hpp      <p>Updated on 2023-01-02</p>"},{"location":"libraries/","title":"Libraries","text":"Library      An example game engine This is a brief description to the engine group. (group)   Generic assets This is a brief description to the assets group. (group)   Audio buffers and devices This is a brief description to the audio group. (group)   Graphical related classes This is a brief description to the graphics group. (group)   Some gui related stuff and whatever This is a brief description to the gui group. (group)   Some useful utilities This is a brief description to the utils group. (group)     <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Assets/","title":"An example game engine Library: Generic assets","text":"<p>This is a brief description to the assets group. </p>  <p>Some detailed description here </p> <p>An example game engine / Generic assets</p>"},{"location":"libraries/group__Assets/#classes","title":"Classes","text":"Classes Description     Asset Engine::Assets::Asset (class)   Event Engine::Assets::Asset::Event (union)     <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Audio/","title":"An example game engine Library: Audio buffers and devices","text":"<p>This is a brief description to the audio group. </p>  <p>Some detailed description here </p> <p>An example game engine / Audio buffers and devices</p>"},{"location":"libraries/group__Audio/#classes","title":"Classes","text":"Classes Description     AudioBuffer A simple audio buffer to hold PCM samples (class)   AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Engine/","title":"An example game engine Library","text":"<p>This is a brief description to the engine group. </p>  <p>Some detailed description here </p>"},{"location":"libraries/group__Engine/#modules","title":"Modules","text":"Modules Description     Generic assets This is a brief description to the assets group.   Audio buffers and devices This is a brief description to the audio group.   Graphical related classes This is a brief description to the graphics group.   Some gui related stuff and whatever This is a brief description to the gui group.   Some useful utilities This is a brief description to the utils group."},{"location":"libraries/group__Engine/#classes","title":"Classes","text":"Classes Description     Exception Engine::Exception (class)"},{"location":"libraries/group__Engine/#functions","title":"Functions","text":"Member Functions Description     getVersion Returns the version string.  (function)"},{"location":"libraries/group__Engine/#functions_1","title":"Functions","text":""},{"location":"libraries/group__Engine/#function-getversion","title":"function getVersion","text":"<p>Defined in header <code>&lt;src/Engine.hpp&gt;</code></p> <pre><code>std::string\ngetVersion();\n</code></pre> <p>Returns the version string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Graphics/","title":"An example game engine Library: Graphical related classes","text":"<p>This is a brief description to the graphics group. </p>  <p>Some detailed description here </p> <p>An example game engine / Graphical related classes</p>"},{"location":"libraries/group__Graphics/#classes","title":"Classes","text":"Classes Description     Framebuffer Engine::Graphics::Framebuffer (class)   Handle Engine::Graphics::Handle (class)   Texture2D Engine::Graphics::Texture2D (class)   Texture3D Some deprecated class.  (class)   Texture This is a base texture class that serves as a base class for other texture types.  (interface)"},{"location":"libraries/group__Graphics/#functions","title":"Functions","text":"Member Functions Description     getHandle Some namespace inline function.  (function)"},{"location":"libraries/group__Graphics/#functions_1","title":"Functions","text":""},{"location":"libraries/group__Graphics/#function-gethandle","title":"function getHandle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>int\ngetHandle(Handle &amp; handle);\n</code></pre> <p>Some namespace inline function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Gui/","title":"An example game engine Library: Some gui related stuff and whatever","text":"<p>This is a brief description to the gui group. </p>  <p>Some detailed description here </p> <p>An example game engine / Some gui related stuff and whatever</p>"},{"location":"libraries/group__Gui/#classes","title":"Classes","text":"Classes Description     GuiWidget Some generic gui widget class.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"libraries/group__Utils/","title":"An example game engine Library: Some useful utilities","text":"<p>This is a brief description to the utils group. </p>  <p>Some detailed description here </p> <p>An example game engine / Some useful utilities</p>"},{"location":"libraries/group__Utils/#classes","title":"Classes","text":"Classes Description     ArrayView Filesystem path utility functions.  (class)"},{"location":"libraries/group__Utils/#functions","title":"Functions","text":"Member Functions Description     name_with_underscores (function)"},{"location":"libraries/group__Utils/#functions_1","title":"Functions","text":""},{"location":"libraries/group__Utils/#function-name_with_underscores","title":"function name_with_underscores","text":"<p>Defined in header <code>&lt;src/Utils/Utils.hpp&gt;</code></p> <pre><code>void\nname_with_underscores(const std::string &amp; arg);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/","title":"Namespaces","text":"Namespace      Engine This namespace contains all of the necessary engine components. (namespace)   Assets (namespace)   Audio (namespace)   Graphics (namespace)   Gui (namespace)   Utils (namespace)   Path Filesystem path utility functions. (namespace)   std (namespace)     <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine/","title":"Engine","text":"<p>This namespace contains all of the necessary engine components. </p>"},{"location":"namespaces/namespaceEngine/#namespaces","title":"Namespaces","text":"Name Description     Engine::Assets    Engine::Audio    Engine::Graphics    Engine::Gui    Engine::Utils"},{"location":"namespaces/namespaceEngine/#classes","title":"Classes","text":"Classes Description     Exception Engine::Exception (class)"},{"location":"namespaces/namespaceEngine/#functions","title":"Functions","text":"Member Functions Description     getVersion Returns the version string.  (function)"},{"location":"namespaces/namespaceEngine/#functions_1","title":"Functions","text":""},{"location":"namespaces/namespaceEngine/#function-getversion","title":"function getVersion","text":"<p>Defined in header <code>&lt;src/Engine.hpp&gt;</code></p> <pre><code>std::string\ngetVersion();\n</code></pre> <p>Returns the version string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Assets/","title":"Engine::Assets","text":""},{"location":"namespaces/namespaceEngine_1_1Assets/#classes","title":"Classes","text":"Classes Description     Asset Engine::Assets::Asset (class)     <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Audio/","title":"Engine::Audio","text":""},{"location":"namespaces/namespaceEngine_1_1Audio/#classes","title":"Classes","text":"Classes Description     AudioBuffer A simple audio buffer to hold PCM samples (class)   AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.  (class)"},{"location":"namespaces/namespaceEngine_1_1Audio/#types","title":"Types","text":"Member Types Definition     Callback Some callback function pointer type definition.  (typedef)   Callback2 Some callback function pointer type definition.  (using)"},{"location":"namespaces/namespaceEngine_1_1Audio/#functions","title":"Functions","text":"Member Functions Description     doSomething Do something with the buffer.  (function)"},{"location":"namespaces/namespaceEngine_1_1Audio/#types_1","title":"Types","text":""},{"location":"namespaces/namespaceEngine_1_1Audio/#typedef-callback","title":"typedef Callback","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>typedef int(* Engine::Audio::Callback) (AudioBuffer &amp;buffer, size_t offset);\n</code></pre> <p>Some callback function pointer type definition. </p> <p>Parameters: </p> <ul> <li>buffer The buffer this callback is called from </li> <li>offset The offset of the buffer currently playing </li> </ul> <p>Deprecated:</p> <p>Use the Audio::Callback2 instead </p>"},{"location":"namespaces/namespaceEngine_1_1Audio/#using-callback2","title":"using Callback2","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>using Callback2 = \n    int(*)(AudioBuffer &amp;buffer, size_t offset, void *user);\n</code></pre> <p>Some callback function pointer type definition. </p> <p>Parameters: </p> <ul> <li>buffer The buffer this callback is called from </li> <li>offset The offset of the buffer currently playing </li> <li>user User specific data </li> </ul>"},{"location":"namespaces/namespaceEngine_1_1Audio/#functions_1","title":"Functions","text":""},{"location":"namespaces/namespaceEngine_1_1Audio/#function-dosomething","title":"function doSomething","text":"<p>Defined in header <code>&lt;src/Audio/AudioBuffer.hpp&gt;</code></p> <pre><code>void\ndoSomething(AudioBuffer &amp; buffer);\n</code></pre> <p>Do something with the buffer. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Graphics/","title":"Engine::Graphics","text":""},{"location":"namespaces/namespaceEngine_1_1Graphics/#classes","title":"Classes","text":"Classes Description     Framebuffer Engine::Graphics::Framebuffer (class)   Handle Engine::Graphics::Handle (class)   Texture This is a base texture class that serves as a base class for other texture types.  (interface)   Texture2D Engine::Graphics::Texture2D (class)   Texture3D Some deprecated class.  (class)"},{"location":"namespaces/namespaceEngine_1_1Graphics/#functions","title":"Functions","text":"Member Functions Description     getHandle Some namespace inline function.  (function)"},{"location":"namespaces/namespaceEngine_1_1Graphics/#functions_1","title":"Functions","text":""},{"location":"namespaces/namespaceEngine_1_1Graphics/#function-gethandle","title":"function getHandle","text":"<p>Defined in header <code>&lt;src/Graphics/Handle.hpp&gt;</code></p> <pre><code>int\ngetHandle(Handle &amp; handle);\n</code></pre> <p>Some namespace inline function. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Gui/","title":"Engine::Gui","text":""},{"location":"namespaces/namespaceEngine_1_1Gui/#classes","title":"Classes","text":"Classes Description     GuiWidget Some generic gui widget class.  (class)     <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Utils/","title":"Engine::Utils","text":""},{"location":"namespaces/namespaceEngine_1_1Utils/#namespaces","title":"Namespaces","text":"Name Description     Engine::Utils::Path Filesystem path utility functions."},{"location":"namespaces/namespaceEngine_1_1Utils/#classes","title":"Classes","text":"Classes Description     ArrayView Filesystem path utility functions.  (class)"},{"location":"namespaces/namespaceEngine_1_1Utils/#functions","title":"Functions","text":"Member Functions Description     name_with_underscores (function)"},{"location":"namespaces/namespaceEngine_1_1Utils/#functions_1","title":"Functions","text":""},{"location":"namespaces/namespaceEngine_1_1Utils/#function-name_with_underscores","title":"function name_with_underscores","text":"<p>Defined in header <code>&lt;src/Utils/Utils.hpp&gt;</code></p> <pre><code>void\nname_with_underscores(const std::string &amp; arg);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespaceEngine_1_1Utils_1_1Path/","title":"Engine::Utils::Path","text":"<p>Filesystem path utility functions. </p>"},{"location":"namespaces/namespaceEngine_1_1Utils_1_1Path/#functions","title":"Functions","text":"Member Functions Description     getFilename (function)   getExtension (function)"},{"location":"namespaces/namespaceEngine_1_1Utils_1_1Path/#functions_1","title":"Functions","text":""},{"location":"namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getfilename","title":"function getFilename","text":"<p>Defined in header <code>&lt;src/Utils/Path.hpp&gt;</code></p> <pre><code>std::string\ngetFilename(const std::string &amp; path);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getextension","title":"function getExtension","text":"<p>Defined in header <code>&lt;src/Utils/Path.hpp&gt;</code></p> <pre><code>std::string\ngetExtension(const std::string &amp; path);\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-02</p>"},{"location":"namespaces/namespacestd/","title":"std","text":"<p>Updated on 2023-01-02</p>"},{"location":"pages/","title":"Pages","text":"Page      Advanced Usage (page)   Bug List (page)   Deprecated List (page)   Doxybook Example (page)   Introduction (page)   Test List (page)   Todo List (page)     <p>Updated on 2023-01-02</p>"},{"location":"pages/advanced/","title":"Advanced Usage","text":"<p>This page is for advanced users. Make sure you have first read the introduction. </p>  <p>Updated on 2023-01-02</p>"},{"location":"pages/bug/","title":"Bug List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random bug  Some other random bug  </li> </ul> <p>Class Engine::Graphics::Texture</p> <ul> <li>This has some weird bug too! </li> </ul>  <p>Updated on 2023-01-02</p>"},{"location":"pages/deprecated/","title":"Deprecated List","text":"<p>Member Engine::Audio::AudioBuffer::setCallback  (Callback callback)</p> <ul> <li>Use the AudioBuffer::setCallback2 instead  </li> </ul> <p>Member Engine::Audio::AudioBuffer::setData  (const TypedAudioData data[], size_t size)</p> <ul> <li>Use the AudioBuffer::setDataMultiple instead  </li> </ul> <p>Member Engine::Audio::Callback  )(AudioBuffer &amp;buffer, size_t offset)</p> <ul> <li>Use the Audio::Callback2 instead  </li> </ul> <p>Class Engine::Graphics::Texture3D</p> <ul> <li>Don't use this texture type </li> </ul>  <p>Updated on 2023-01-02</p>"},{"location":"pages/intro/","title":"Introduction","text":"<p>This page introduces the user to the topic. Now you can proceed to the advanced section. </p>  <p>Updated on 2023-01-02</p>"},{"location":"pages/test/","title":"Test List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random test description </li> </ul>  <p>Updated on 2023-01-02</p>"},{"location":"pages/todo/","title":"Todo List","text":"<p>Class Engine::Audio::AudioBuffer</p> <ul> <li>Some random todo </li> </ul>  <p>Updated on 2023-01-02</p>"}]}