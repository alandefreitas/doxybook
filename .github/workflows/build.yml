name: Build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - 'develop'
      - 'master'

# Cancel other runs in progress for the same branch
concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "MSVC 14.3 - C++20 (Release, Vcpkg)",     os: windows-2022, flags: '/O2', vcpkg: true,  artifact_name: "windows-win64",        cxxstd: 20, cmake_args: -G "Visual Studio 17 2022" -A x64, }
          - { name: "MSVC 14.3 - C++20 (Release, Win32)",     os: windows-2022, flags: '/O2',               artifact_name: "windows-win32",        cxxstd: 20, cmake_args: -G "Visual Studio 17 2022" -A Win32, }
          - { name: "MSVC 14.3 - C++17 (Release, Shared)",    os: windows-2022, shared: true, flags: '/O2', artifact_name: "windows-win64-shared", cxxstd: 17, cmake_args: -G "Visual Studio 17 2022" -A x64, }
          - { name: "MSVC 14.2 - C++17",                      os: windows-2019, flags: '/O2',               cxxstd: 17, cmake_args: -G "Visual Studio 16 2019" -A x64, }

          - { name: "GCC 12 - C++20 (Release)",               os: ubuntu-22.04, flags: '-O2',           artifact_name: "linux-amd64", cc: gcc-12, cxx: g++-12, cxxstd: 20, install: gcc-12 g++-12, }
          - { name: "GCC 12 - C++17 (ASan)",                  os: ubuntu-22.04, asan: true,             cc: gcc-12, cxx: g++-12, cxxstd: 17, install: gcc-12 g++-12, }
          - { name: "GCC 11 - C++20 (Coverage)",              os: ubuntu-22.04, coverage: true,         cc: gcc-11, cxx: g++-11, cxxstd: 20, }
          - { name: "GCC 10 - C++20 (Vcpkg)",                 os: ubuntu-22.04, vcpkg: true,            cc: gcc-10, cxx: g++-10, cxxstd: 20, }
          - { name: "GCC 9  - C++20",                         os: ubuntu-22.04,                         cc: gcc-9, cxx: g++-9, cxxstd: 20, }

          - { name: "Clang 14 - C++20",                       os: ubuntu-22.04,                         cc: clang-14, cxx: clang++-14, cxxstd: 20, }
          - { name: "Clang 13 - C++17",                       os: ubuntu-22.04,                         cc: clang-13, cxx: clang++-13, cxxstd: 17, }
          - { name: "Clang 12 - C++20",                       os: ubuntu-22.04,                         cc: clang-12, cxx: clang++-12, cxxstd: 20, }

          - { name: "AppleClang 13 (Release)",                os: macos-12,     flags: '-O2',           artifact_name: "osx-amd64", }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ contains( matrix.config.os, 'ubuntu') && (matrix.config.install || matrix.config.coverage) }}
        with:
          packages: ${{ (matrix.config.coverage && 'lcov') || '' }} ${{ matrix.config.install }}
          version: 1.0

      - name: Fetched Content
        if: ${{ !matrix.config.use_bundled }}
        id: cache-fetched-content
        uses: actions/cache@v3
        with:
          path: build/_deps
          key: ${{ matrix.config.os }}-fetched-content-${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}

      - name: Update Vcpkg
        if: ${{ matrix.config.vcpkg }}
        shell: bash
        run: |
          cd ${{ (contains( matrix.config.os, 'windows') && 'C:\vcpkg') || '/usr/local/share/vcpkg' }}
          git fetch origin
          git reset --hard origin/master
          if [ "${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}-${{ (contains( matrix.config.os, 'macos') && 'osx') || ((contains( matrix.config.os, 'windows') && 'windows') || 'linux') }}" == "x64-windows" ] || [ "${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}-${{ (contains( matrix.config.os, 'macos') && 'osx') || ((contains( matrix.config.os, 'windows') && 'windows') || 'linux') }}" == "x86-windows" ]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: Create Build Dir
        run: cmake -E make_directory build

      - name: Get CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Install doxygen
        continue-on-error: true
        run: ${{ (contains( matrix.config.os, 'macos') && 'brew install doxygen') || ((contains( matrix.config.os, 'windows') && 'choco install doxygen.install') || 'sudo apt install doxygen') }}

      - name: Configure
        working-directory: ./build
        run: |
          cmake .. ${{ matrix.config.cmake_args }} -D CMAKE_BUILD_TYPE=Release -D DOXYBOOK_BUILD_TESTS=ON -D DOXYBOOK_BUILD_EXAMPLES=OFF -D DOXYBOOK_BUILD_DOCS=OFF -D DOXYBOOK_DEVELOPER_MODE=ON -D DOXYBOOK_CATCH2_REPORTER=junit -D DOXYBOOK_BUILD_COVERAGE_REPORT=${{ (matrix.config.coverage && 'ON') || 'OFF' }} -D DOXYBOOK_SANITIZERS=${{ ((matrix.config.asan || matrix.config.tsan) && 'ON') || 'OFF' }} -D DOXYBOOK_USE_FIND_PACKAGE=${{ (matrix.config.use_bundled && 'OFF') || 'ON' }} -D DOXYBOOK_USE_FETCH_CONTENT=${{ (matrix.config.use_bundled && 'OFF') || 'ON' }} ${{ (matrix.config.cc && format('-D CMAKE_C_COMPILER=/usr/bin/{0}', matrix.config.cc)) || '' }} ${{ (matrix.config.cxx && format('-D CMAKE_CXX_COMPILER=/usr/bin/{0}', matrix.config.cxx)) || '' }} ${{ (matrix.config.flags && format('-D CMAKE_CXX_FLAGS="{0}"', matrix.config.flags)) || '' }} -D BUILD_SHARED_LIBS=${{ (matrix.config.shared && 'ON') || 'OFF' }} -D CMAKE_CXX_STANDARD=${{ matrix.config.cxxstd || '17' }} -D CMAKE_INSTALL_PREFIX=./install ${{ (matrix.config.vcpkg && '-D VCPKG_TARGET_TRIPLET=') || '' }}${{ (matrix.config.vcpkg && contains( matrix.config.cmake_args, 'Win32') && 'x86-') || (matrix.config.vcpkg && 'x64-') || '' }}${{ (matrix.config.vcpkg && contains( matrix.config.os, 'macos') && 'osx') || ((matrix.config.vcpkg && contains( matrix.config.os, 'windows') && 'windows') || (matrix.config.vcpkg && 'linux') || '') }} ${{ (matrix.config.vcpkg && contains( matrix.config.os, 'windows') && '-D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake') || (matrix.config.vcpkg && '-D CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake') || '' }}

      - name: Build
        working-directory: ./build
        run: cmake --build . --parallel ${{ steps.cpu-cores.outputs.count }} --config Release

      - name: Test
        working-directory: ./build
        run: ctest --parallel ${{ steps.cpu-cores.outputs.count }} -C Release --progress --output-on-failure

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          check_name: Test Report - ${{ matrix.config.name }}
          check_title_template: '{{TEST_NAME}}'
          report_paths: build/test/unit/reports/*.junit

      - name: Install
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cmake --install .

      - name: Package
        if: ${{ matrix.config.artifact_name }}
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cpack

      - name: Archive Packages
        if: ${{ matrix.config.artifact_name }}
        uses: actions/upload-artifact@v3
        with:
          name: Binary Packages ${{ matrix.config.artifact_name }}
          path: build/doxybook-?.?.?-*.*

      - name: Check conventional commit
        if: ${{ !contains( matrix.config.os, 'macos') && !contains(github.event.head_commit.message, '[FOLD]') }}
        uses: webiny/action-conventional-commits@v1.1.0

      - name: Codecov generate
        if: ${{ matrix.config.coverage }}
        run: cmake --build ./build --target coverage

      - name: Codecov upload
        if: ${{ matrix.config.coverage }}
        uses: codecov/codecov-action@v3

  pages:
    name: Pages
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Update Contributors
        if: startsWith(github.ref, 'refs/heads/master')
        uses: akhilmhdh/contributors-readme-action@v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          image_size: 100
          columns_per_row: 6
          readme_path: docs/acknowledgments.md
        continue-on-error: true

      - name: Dependencies
        shell: bash
        run: |
          sudo apt-get install zip unzip python3-setuptools -y
          mkdir -p ${{ github.workspace }}/public

      - name: Download Node
        uses: actions/setup-node@v3
        with:
          node-version: 8.x

      - name: Download Hugo
        shell: bash
        run: |
          mkdir hugo
          cd hugo
          wget https://github.com/gohugoio/hugo/releases/download/v0.105.0/hugo_extended_0.105.0_Linux-64bit.tar.gz
          tar xvf hugo_extended_0.105.0_Linux-64bit.tar.gz
          sudo mv ./hugo /usr/local/bin/hugo
          sudo chmod +x /usr/local/bin/hugo
          hugo version

      - name: Download MkDocs
        shell: bash
        run: |
          sudo python3 -m pip install mkdocs mkdocs-material mkdocs-bootswatch mkdocs-macros-plugin

      - name: Download GitBook CLI
        shell: bash
        run: |
          sudo npm install gitbook-cli -g

      - name: Install doxygen
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: doxygen
          version: 1.0

      - name: Install doxybook
        run: |
          cmake -E make_directory build
          cd build
          cmake .. -D CMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=x64-linux -D CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build . --config Release
          sudo cmake --install .

      - name: Build main docs
        run: |
          cd docs
          doxygen
          cd ..
          doxybook \
            --input ./docs/xml \
            --output ./docs/reference \
            --config ./docs/.doxybook/config.json
          mkdocs build
          cp -rv ./site/. ${{ github.workspace }}/public

      - name: Build Example Doxygen
        shell: bash
        run: |
          cd example
          doxygen

      - name: Build MkDocs - ReadTheDocs Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-readthedocs/docs \
            --config ./example/themes/mkdocs-readthedocs/.doxybook/config.json
          cd ./example/themes/mkdocs-readthedocs
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-readthedocs

      - name: Build MkDocs - Material Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-material/docs \
            --config ./example/themes/mkdocs-material/.doxybook/config.json
          cd ./example/themes/mkdocs-material
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-material

      - name: Build MkDocs - Bootswatch Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-bootswatch/docs \
            --config ./example/themes/mkdocs-bootswatch/.doxybook/config.json
          cd ./example/themes/mkdocs-bootswatch
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-bootswatch

      - name: Build Hugo - Learn Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/hugo-learn/content \
            --config ./example/themes/hugo-learn/.doxybook/config.json \
            --templates ./example/themes/hugo-learn/.doxybook/templates
          cd ./example/themes/hugo-learn
          hugo
          cp -rv ./public ${{ github.workspace }}/public/hugo-learn

      - name: Build Hugo - Book Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/hugo-book/content \
            --config ./example/themes/hugo-book/.doxybook/config.json \
            --templates ./example/themes/hugo-book/.doxybook/templates
          cd ./example/themes/hugo-book
          hugo
          cp -rv ./public ${{ github.workspace }}/public/hugo-book

      - name: Build GitBook - Default Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/gitbook \
            --config ./example/themes/gitbook/.doxybook/config.json \
            --summary-input ./example/themes/gitbook/SUMMARY.md.tmpl \
            --summary-output ./example/themes/gitbook/SUMMARY.md
          cd ./example/themes/gitbook
          gitbook build
          cp -rv ./_book ${{ github.workspace }}/public/gitbook

      - name: Build original
        shell: bash
        run: |
          pwd
          cp -rv ./example/html ${{ github.workspace }}/public/original
          stat ${{ github.workspace }}/public

      - name: Deploy
        if: startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/develop')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/public
          publish_branch: ${{ (startsWith(github.ref, 'refs/heads/master') && 'gh-pages') || 'gh-pages-develop' }}
