{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Doxygen XML to Markdown</p>    <p>Generate beautiful C++ documentation by converting Doxygen XML output into markdown pages via MkDocs, Hugo , VuePress, GitBook , Docsify, or your custom generator. Also comes with an optional templating mechanism and extensive configuration file.</p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":""},{"location":"acknowledgments/#contributors","title":"Contributors","text":"Alan De Freitas       Matus Novak       Bryce Adelstein Lelbach Aka Wash       Amir Masoud Abdol       Hongxu Xu       Leon Matthes        Michael Beckemeyer       Ren\u00e9       Evan Flynn       Szekely Gyorgy       Nicolas Jarnoux       Blue Santa        Tobias Erbsh\u00e4u\u00dfer       Alexander"},{"location":"config/","title":"Configuration Files","text":"<p>All of the GitBook, MkDocs, VuePress, Hugo, Docsify static site generators are slightly different. For example, GitBook resolves markdown links at compile time and they have to end with <code>.md</code>, however MkDocs requires the links to end with a forward slash <code>/</code>. Using the config you can override this behavior. Only the properties you specify in this JSON file will be overwritten in the application. The properties you do not specify in this config will use the default value instead.</p>"},{"location":"config/#generate-config-template","title":"Generate config template","text":"<p>You can create a config file by running:</p> <pre><code>doxybook --generate-config /some/path/to/config.json\n</code></pre> <p>This will generate config file with all available properties with their default values. Note that the folder in which you want the <code>config.json</code> to be generated must exist. If the file <code>config.json</code> already exists, it will be overwritten. You can remove any properties in the config json and leave only the ones you need to override. See the section \"Config values\" below to see the default values.</p>"},{"location":"config/#usage","title":"Usage","text":"<p>Properties not specified in this <code>config.json</code> file will be loaded with the default value. You can specify only properties you want to override. Empty config file is also valid. To use the config file when generating markdown files do the following:</p> <pre><code>doxybook --input ... --output ... --config /some/path/to/config.json\n</code></pre>"},{"location":"config/#examples","title":"Examples","text":"<p>Sample config files are provided in the examples folder for each generator and theme used. The config is stored in a <code>.doxybook</code> folder. This may not be directly visible by your OS. Show hidden folders to see it. The following config files are provided:</p> Hugo + Learn themeHugo + Book themeMkDocs + ReadTheDocs themeMkDocs + Material themeMkDocs + Bootswatch themeGitBook + default theme   <pre><code>{\n  \"baseUrl\": \"/doxybook/hugo-learn/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"linkLowercase\": true,\n  \"indexClassesName\": \"_index\",\n  \"indexFilesName\": \"_index\",\n  \"indexGroupsName\": \"_index\",\n  \"indexNamespacesName\": \"_index\",\n  \"indexRelatedPagesName\": \"_index\",\n  \"indexExamplesName\": \"_index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"_index\"\n}\n</code></pre>   <pre><code>{\n  \"baseUrl\": \"/doxybook/hugo-book/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"linkLowercase\": true,\n  \"indexClassesName\": \"_index\",\n  \"indexFilesName\": \"_index\",\n  \"indexGroupsName\": \"_index\",\n  \"indexNamespacesName\": \"_index\",\n  \"indexRelatedPagesName\": \"_index\",\n  \"indexExamplesName\": \"_index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"_index\"\n}\n</code></pre>   <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-readthedocs/\",\n  \"indexInFolders\": false,\n  \"linkSuffix\": \"/\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>   <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-material/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"indexClassesName\": \"index\",\n  \"indexFilesName\": \"index\",\n  \"indexGroupsName\": \"index\",\n  \"indexNamespacesName\": \"index\",\n  \"indexRelatedPagesName\": \"index\",\n  \"indexExamplesName\": \"index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>   <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-bootswatch/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"indexClassesName\": \"index\",\n  \"indexFilesName\": \"index\",\n  \"indexGroupsName\": \"index\",\n  \"indexNamespacesName\": \"index\",\n  \"indexRelatedPagesName\": \"index\",\n  \"indexExamplesName\": \"index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>   <pre><code>{\n  \"baseUrl\": \"/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \".md\",\n  \"linkLowercase\": false,\n  \"indexClassesName\": \"README\",\n  \"indexFilesName\": \"README\",\n  \"indexGroupsName\": \"README\",\n  \"indexNamespacesName\": \"README\",\n  \"indexRelatedPagesName\": \"README\",\n  \"indexExamplesName\": \"README\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"README\"\n}\n</code></pre>    <p>NOTE: The configuration json files for MkDocs have a base url_ set, for example <code>\"base_url\": \"/doxybook/mkdocs-bootswatch/\"</code>. This is needed for publishing documentation from this repository to gh-pages. If you want to run the MkDocs examples locally, make sure you change the base_url to <code>/</code> as <code>\"base_url\": \"/\"</code>! If you don't change that, you will get 404. Otherwise start a http server with a <code>/doxybook/mkdocs-bootswatch</code> prefix.</p>"},{"location":"config/#options","title":"Options","text":"<p>The following is a list of config properties, their default value, and description.</p>    JSON Key Default Value Description     <code>copy_images</code> <code>true</code> Automatically copy images added into doxygen documentation via <code>@image</code>. These images will be copied into folder defined by <code>images_folder</code>   <code>sort</code> <code>false</code> Sort everything alphabetically. If set to false, the order will stay the same as the order in the Doxygen XML files.   <code>images_folder</code> <code>\"images\"</code> Name of the folder where to copy images. This folder will be automatically created in the output path defined by <code>--output</code>. Leave this empty_ string if you want all of the images to be stored in the root directory (the output directory).   <code>link_lowercase</code> <code>false</code> Convert all markdown links (only links to other markdown files, the C++ related stuff) into lowercase format. Hugo need this to set to <code>true</code>.   <code>link_and_inline_code_as_html</code> <code>false</code> Output links as HTML  tags and inline code as <code> tags instead of Markdown. If your generated Markdown has links inside of inline code, set this to <code>true</code> to correctly render the links.   <code>index_in_folders</code> <code>false</code> Part of the generated markdown output are extra index_ files. These are more of a list of classes, namespaces, modules, etc. By default these are stored in the root directory (the output diectory). Set to true if you want them to be generated in their respective folders (i.e. class index_ in Classes folder, etc.)   <code>main_page_in_root</code> <code>false</code> If a mainpage is defined by Doxygen, then this file will be generated in <code>Pages/mainpage.md</code> path. If you want to make it into <code>index_.md</code> as the root of your website, then set this to true with <code>main_page_name</code> set to <code>\"index_\"</code>.   <code>main_page_name</code> <code>\"indexpage\"</code> If a mainpage is defined by Doxygen, then this file will be saved as <code>indexpage</code>.   <code>base_url</code> <code>\"\"</code> A prefix to put in front of all markdown links (only links to other markdown files). See <code>link_lowercase</code> and <code>link_suffix</code> as well. Note hat MkDocs and Hugo will need explicit base_url while GitBook uses no base url_. VuePress needs this set to <code>/</code>.   <code>link_suffix</code> <code>\".md\"</code> The suffix to put after all of the markdown links (only links to other markdown files). If using GitBook, leave this to <code>\".md\"</code>, but MkDocs and Hugo needs <code>\"/\"</code> instead.   <code>file_extension</code> <code>\"md\"</code> The file extension to use when generating markdown files.   <code>files_filter</code> <code>[]</code> This will filter which files are allowed to be in the output. For example, an array of <code>[\".hpp\", \".h\"]</code> will allow only the files that have file extensions <code>.hpp</code> or <code>.h</code>. When this is empty_ (by default) then all files are allowed in the output. This also affects <code>--json</code> type of output. This does not filter which classes/functions/etc should be extracted from the source files! (For that, use Doxygen's FILE_PATTERNS) This only affects listing of those files in the output!   <code>foldersToGenerate</code> <code>[\"modules\", \"classes\", \"files\", \"pages\", \"namespaces\", \"examples\"]</code> List of folders to create. You can use this to skip generation of some folders, for example you don't want <code>examples</code> then remove it from the array. Note, this does not change the name_ of the folders that will be generated, this only enables them. This is an enum and must be lower case. If you do not set this value in your JSON config file then all of the folders are created. An empty_ array will not generate anything at all.'   <code>replaceUnderscoresInAnchors</code> <code>true</code> Replace '_' with '-' in anchors.    <p>The following are a list of config properties that specify the names of the folders. Each folder holds specific group_ of C++ stuff. Note that the <code>Classes</code> folder also holds interfaces, structs, and unions.</p>    JSON Key Default Value     <code>folder_groups_name</code> <code>\"Modules\"</code>   <code>folder_classes_name</code> <code>\"Classes\"</code>   <code>folder_files_name</code> <code>\"Files\"</code>   <code>folder_related_pages_name</code> <code>\"Pages\"</code>   <code>folder_namespaces_name</code> <code>\"Namespaces\"</code>   <code>folder_examples_name</code> <code>\"Examples\"</code>    <p>The following is a list of config properties that specify the filenames of the indexes. For example, an index_/list of all classes will use <code>index_classes</code> filename followed by <code>file_extension</code> extension name_.</p>    JSON Key Default Value     <code>index_groups_name</code> <code>\"index_groups\"</code>   <code>index_classes_name</code> <code>\"index_classes\"</code>   <code>index_files_name</code> <code>\"index_files\"</code>   <code>index_related_pages_name</code> <code>\"index_pages\"</code>   <code>index_namespaces_name</code> <code>\"index_namespaces\"</code>   <code>index_examples_name</code> <code>\"index_examples\"</code>    <p>The following are config properties that specify what template to use for each specific C++ kind_. A kind_ is just a type of the C++ thing (class, namespace, etc.). This also includes properties for files, directories, pages, and modules ( alias groups). These templates can be overwritten via <code>--templates /path/to/templates-folder</code>.</p>    JSON Key Default Value     <code>template_kind_class</code> <code>\"kind_class\"</code>   <code>template_kind_struct</code> <code>\"kind_class\"</code>   <code>template_kind_union</code> <code>\"kind_class\"</code>   <code>template_kind_interface</code> <code>\"kind_class\"</code>   <code>template_kind_namespace</code> <code>\"kind_nonclass\"</code>   <code>template_kind_group</code> <code>\"kind_nonclass\"</code>   <code>template_kind_file</code> <code>\"kind_file\"</code>   <code>template_kind_dir</code> <code>\"kind_file\"</code>   <code>template_kind_page</code> <code>\"kind_page\"</code>   <code>template_kind_example</code> <code>\"kind_example\"</code>    <p>Same as above, but these are related to the index_/list files.</p>    JSON Key Default Value     <code>template_index_classes</code> <code>\"index_classes\"</code>   <code>template_index_namespaces</code> <code>\"index_namespaces\"</code>   <code>template_index_groups</code> <code>\"index_groups\"</code>   <code>template_index_files</code> <code>\"index_files\"</code>   <code>template_index_related_pages</code> <code>\"index_pages\"</code>   <code>template_index_examples</code> <code>\"index_examples\"</code>    <p>These properties define the title_ to use in the templates specified above.</p>    JSON Key Default Value     <code>index_classes_title</code> <code>\"Classes\"</code>   <code>index_namespaces_title</code> <code>\"Namespaces\"</code>   <code>index_groups_title</code> <code>\"Modules\"</code>   <code>index_files_title</code> <code>\"Files\"</code>   <code>index_related_pages_title</code> <code>\"Pages\"</code>   <code>index_examples_title</code> <code>\"Examples\"</code>    <p>These properties modify how Latex formulas should be generated.</p>    JSON Key Default Value Description     <code>formulaInlineStart</code> <code>\"\\\\(\"</code> The string to prepend the inline formula with in Markdown.   <code>formulaInlineEnd</code> <code>\"\\\\)\"</code> The string to append the inline formula with in Markdown.   <code>formulaBlockStart</code> <code>\"\\\\[\"</code> The string to prepend the block formula with in Markdown.   <code>formulaBlockEnd</code> <code>\"\\\\]\"</code> The string to append the block formula with in Markdown."},{"location":"config/#latex-formulas","title":"Latex formulas","text":"<p>Mkdocs can properly display these formulas for you. Read the mathjax documentation for mkdocs to understand how to enable it. An example of this has been provided in the <code>doxybook/examples/src/Engine.hpp</code> file at the bottom. It can be viewed online in the mkdocs-readthedocs demo (Section \"Inline formula\" and \"Block formula\").</p> <p>Double check you config for properties of <code>formulaInlineStart/End</code> and <code>formulaBlockStart/End</code>. You may need to modify them to match the Markdown formula render you are using.</p> <p>For example, the following comment block:</p> <pre><code>/**\n *  The distance between \\f$(x_1,y_1)\\f$ and \\f$(x_2,y_2)\\f$ is\n * \\f$\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\f$.\n */\n</code></pre> <p>Will be generated as the following Markdown:</p> <pre><code>The distance between \\((x_1,y_1)\\) and \\((x_2,y_2)\\) is\n\\(\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\).\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#guidelines","title":"Guidelines \ud83d\udcd0","text":"<ul> <li>Discussions: Discussions are concentrated on our   GitHub discussions page. Don't refrain from asking questions   and proposing ideas. If this library helps you create something interesting, please divulge it with the community.</li> <li>Sharing Ideas: If you are a programmer with good ideas,   please share these ideas with us.</li> <li>Academic collaboration is more than welcome. It'd be great to see this library help people write papers.</li> </ul>"},{"location":"contributing/#developer-mode","title":"Developer mode \ud83d\udc68\u200d\ud83d\udcbb","text":"<p>Build system targets that are only useful for developers of this project are hidden if the <code>DOXYBOOK_DEVELOPER_MODE</code> CMake option is disabled. Enabling this option makes tests and other developer targets and options available.</p> <p>Not enabling this option means that you are a consumer of this project, and thus you have no need for these targets and options.</p>"},{"location":"contributing/#cmake-developer-options","title":"CMake Developer Options","text":"<p>The following options are available only when building the library in developer mode:</p>    Option Description Default     <code>DOXYBOOK_DEVELOPER_MODE</code> Enable developer mode <code>OFF</code>   <code>BUILD_SHARED_LIBS</code> Build shared libs. <code>OFF</code>   <code>DOXYBOOK_BUILD_TESTS</code> Build tests <code>ON</code>   <code>DOXYBOOK_BUILD_SINGLE_TARGET_TESTS</code> Build tests <code>OFF</code>   <code>DOXYBOOK_BUILD_EXAMPLES</code> Build examples <code>ON</code>   <code>DOXYBOOK_BUILD_DOCS</code> Build documentation <code>ON</code>   <code>DOXYBOOK_BUILD_COVERAGE_REPORT</code> Enable coverage support <code>OFF</code>   <code>DOXYBOOK_BUILD_LINT</code> Enable linting <code>OFF</code>   <code>DOXYBOOK_PEDANTIC_WARNINGS</code> Use pedantic warnings. <code>ON</code>   <code>DOXYBOOK_WARNINGS_AS_ERRORS</code> Treat warnings as errors. <code>ON</code>   <code>DOXYBOOK_SANITIZERS</code> Build with sanitizers. <code>ON</code> if compiling in Debug mode   <code>DOXYBOOK_CATCH2_REPORTER</code> Reporter Catch2 should use when invoked from ctest. <code>console</code>   <code>DOXYBOOK_TIME_TRACE</code> Enable clang time-trace. <code>ON</code>   <code>DOXYBOOK_BUILD_WITH_UTF8</code> Accept utf-8 in MSVC by default. <code>ON</code>"},{"location":"contributing/#prs","title":"PRs \ud83d\udca1","text":"<p>Feel free to contribute new features to this library. For complex features and changes, consider getting feedback from the community first. Contributing to an existing code base with its conventions might seem obscure at first but please don't let that discourage you from sharing your ideas.</p> <p>There are many ways in which you can contribute to this library:</p> <ul> <li>Testing the library in new environments    see 1   , 2   , 3 </li> <li>Contributing with interesting examples see 1</li> <li>Finding problems in this documentation    see 1 </li> <li>Finding bugs in general    see 1   , 2   , 3   , 4 </li> <li>Whatever idea seems interesting to you</li> </ul>"},{"location":"contributing/#constructive-contributions","title":"Constructive contributions","text":"<p>The only thing we ask you is to make sure your contribution is not destructive. Some contributions in which we are not interested are:</p> <ul> <li>\"I don't like this optional feature, so I removed/deprecated it\"</li> <li>\"I removed this feature to support older versions of C++\" but have not provided an equivalent alternative</li> <li>\"I removed this feature, so I don't have to install/update ______\" but have not provided an equivalent alternative</li> <li>\"I'm creating this high-cost promise that we'll support __ forever\" but I'm not sticking around to keep that   promise</li> </ul> <p>In doubt, please open a discussion first</p>"},{"location":"library/","title":"Library","text":""},{"location":"library/#use-as-a-library","title":"Use as a library","text":"<p>You can use this tool as a C++ library. There is a pre-compiled binary executable, static library, and header files on GitHub release page. Simply link <code>libdoxybook.a</code> to your program and provide an include path to the <code>include</code> folder. You can also include the root <code>CMakeLists.txt</code> file in this repository and compile it yourself. You will also need to link <code>nlohmann/json</code>, <code>tinyxml2</code>, and <code>fmtlib/fmt</code>. The API documentation will be added in the future, but here is a simple example to get your started:</p> <pre><code>#include &lt;nlohmann/json.hpp&gt;\n#include &lt;doxybook/doxygen.hpp&gt;\n#include &lt;doxybook/exception.hpp&gt;\n#include &lt;doxybook/json_converter.hpp&gt;\n#include &lt;doxybook/text_markdown_printer.hpp&gt;\n#include &lt;doxybook/text_plain_printer.hpp&gt;\n\nint main() {\n    using namespace doxybook;\n\n    // Where the XML files are stored\n    std::string input_dir = \"..\";\n\n    // Config file, override any properties you want\n    config c;\n    c.copy_images = false;\n\n    // The class that will take care of parsing XML files\n    doxygen dx(c);\n\n    // There two are used to convert the XML text into markdown (or plain) text.\n    // For example: &lt;para&gt;&lt;strong&gt;Hello&lt;/strong&gt;&lt;/para&gt; is converted into **Hello**\n    text_plain_printer tp(c, dx);\n    text_markdown_printer mp(c, input_dir, dx);\n\n    // This is optional and can be used to convert the data in node\n    // into nlohmann/json\n    json_converter jc(c, dx, tp, mp);\n\n    // Load and parse the XML files, may take few seconds\n    dx.load(input_dir);\n    dx.finalize(tp, mp);\n\n    // Get the index, this holds hierarchical data.\n    // If a class belongs to a namespace, the index will hold the namespace object,\n    // but the namespace object will hold the class, not the index.\n    const node&amp; index = dx.get_index();\n\n    // Recursive find function via refid_. The refid_ is from the XML files.\n    const auto audioBuffer = index.find(\"class_engine_1_1_audio_1_1_audio_buffer\");\n    const auto audioBufferConstructor = index.find(\"classEngine_1_1Audio_1_1AudioBuffer_1ab3f8002fc80d9bff50cfb6095e10a721\");\n    audioBufferConstructor-&gt;get_name(); // Returns \"AudioBuffer\"\n\n    // Get detailed data of this specific class\n    // std::tuple&lt;node::data, node::children_data&gt;\n    auto [data, childrenDataMap] = audioBuffer-&gt;load_data(c, tp, mp, dx.get_cache());\n\n    // The \"data\" is type of node::data which contains\n    // detailed data for this specific class.\n    // The \"childrenDataMap\" is the same thing, but stored as an unordered map\n    // where a key is a pointer to the child (the class' function for example) data.\n    auto constructorData&amp; = childrenDataMap.at(audioBufferConstructor);\n\n    // ...\n}\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#integration","title":"Integration \ud83d\udcbb","text":"PackagesFrom source   <p>Get the binary packages from the release section.</p> <p>Put the binary file (<code>doxybook</code> or <code>doxybook.exe</code>) somewhere in your system and add it to the  OS <code>PATH</code> environment variable.</p>  <p>Hint</p> <p>If you need a more recent version of <code>doxybook</code>, you can download the binary packages from the CI artifacts or build the library from the source files.</p>    <p>We do not provide binary packages for all platforms. In that case, you can build the package from  source. Any dependencies unavailable will be downloaded during configuration. You can also use a CMake package manager toolchain, such as vcpkg, to download these dependencies. </p> Windows + MSVCUbuntu + GCCMac Os + Clang   <p>Build:            </p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"/O2\"\ncmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>cpack build\n</code></pre>  <p>Packaging Debug and Release</p> <p>Use these instructions to setup CPack to bundle multiple build directories and construct a package that contains multiple configurations of the same project.</p>    <p>Build:</p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"-O2\"\nsudo cmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>sudo cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>sudo cpack build\n</code></pre>   <p>Build:</p> <pre><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=\"-O2\"\ncmake --build build --config Release\n</code></pre> <p>Install:</p> <pre><code>cmake --install build\n</code></pre> <p>Create packages:</p> <pre><code>cpack build\n</code></pre>        Extra CMake Options <p>These are the options available when building the project with CMake:</p>    Option Description Default     <code>DOXYBOOK_BUILD_INSTALLER</code> Build installer target <code>ON</code> if running CMake from the root directory   <code>DOXYBOOK_BUILD_PACKAGE</code> Build package <code>ON</code> if running CMake from the root directory   <code>DOXYBOOK_USE_FIND_PACKAGE</code> Do not use find_package to find dependencies <code>ON</code> if not crosscompiling   <code>DOXYBOOK_USE_FETCH_CONTENT</code> Do not use FetchContent to fetch dependencies <code>ON</code> if not crosscompiling"},{"location":"quickstart/#hello-world","title":"Hello World \ud83d\udc4b","text":"<p>You only need Doxygen, <code>doxybook</code> from this repository, and some markdown static site generator.</p> <ol> <li>Document your code so that Doxygen can pick it up.</li> <li>Make sure your <code>Doxyfile</code> contains <code>GENERATE_XML = YES</code> and <code>XML_OUTPUT = xml</code>. A sample <code>Doxyfile</code> is provided in    the <code>example/Doxyfile</code> folder in this repository.</li> <li>Run doxygen simply by calling <code>doxygen</code> in terminal in the same directory as your <code>Doxyfile</code>.</li> <li>Run doxybook as the following:</li> </ol> <pre><code>doxybook --input path/to/doxygen/xml --output path/to/destination\n</code></pre>"},{"location":"quickstart/#examples","title":"Examples \ud83d\uddbc","text":"Hugo (Book)MkDocs (ReadTheDocs)MkDocs (Material)MkDocs (Bootswatch)VuePressGitBookDocsifyHugo (Learn)Original Doxygen    <ul> <li>Hugo</li> <li>Book theme</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/doxybook/hugo-book/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"linkLowercase\": true,\n  \"indexClassesName\": \"_index\",\n  \"indexFilesName\": \"_index\",\n  \"indexGroupsName\": \"_index\",\n  \"indexNamespacesName\": \"_index\",\n  \"indexRelatedPagesName\": \"_index\",\n  \"indexExamplesName\": \"_index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"_index\"\n}\n</code></pre>    <ul> <li>MkDocs</li> <li>ReadTheDocs theme</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-readthedocs/\",\n  \"indexInFolders\": false,\n  \"linkSuffix\": \"/\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>    <ul> <li>MkDocs </li> <li>Material theme</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-material/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"indexClassesName\": \"index\",\n  \"indexFilesName\": \"index\",\n  \"indexGroupsName\": \"index\",\n  \"indexNamespacesName\": \"index\",\n  \"indexRelatedPagesName\": \"index\",\n  \"indexExamplesName\": \"index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>    <ul> <li>MkDocs</li> <li>Bootswatch theme</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/doxybook/mkdocs-bootswatch/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"indexClassesName\": \"index\",\n  \"indexFilesName\": \"index\",\n  \"indexGroupsName\": \"index\",\n  \"indexNamespacesName\": \"index\",\n  \"indexRelatedPagesName\": \"index\",\n  \"indexExamplesName\": \"index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"index\"\n}\n</code></pre>    <ul> <li>VuePress</li> </ul>    <ul> <li>GitBook</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \".md\",\n  \"linkLowercase\": false,\n  \"indexClassesName\": \"README\",\n  \"indexFilesName\": \"README\",\n  \"indexGroupsName\": \"README\",\n  \"indexNamespacesName\": \"README\",\n  \"indexRelatedPagesName\": \"README\",\n  \"indexExamplesName\": \"README\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"README\"\n}\n</code></pre>    <ul> <li>Docsify</li> </ul>   <ul> <li>Hugo</li> <li>Book theme</li> <li>Link</li> </ul> <p>Config:</p> <pre><code>{\n  \"baseUrl\": \"/doxybook/hugo-learn/\",\n  \"indexInFolders\": true,\n  \"linkSuffix\": \"/\",\n  \"linkLowercase\": true,\n  \"indexClassesName\": \"_index\",\n  \"indexFilesName\": \"_index\",\n  \"indexGroupsName\": \"_index\",\n  \"indexNamespacesName\": \"_index\",\n  \"indexRelatedPagesName\": \"_index\",\n  \"indexExamplesName\": \"_index\",\n  \"mainPageInRoot\": true,\n  \"mainPageName\": \"_index\"\n}\n</code></pre>   <ul> <li>Link</li> </ul>"},{"location":"quickstart/#requirements","title":"Requirements \u2699","text":"<ul> <li>Requirements: C++17</li> <li>Tested compilers: MSVC 14.2, 14.3; GCC 9, 10, 11, 12; Clang 12, 13, 14; AppleClang: 13</li> <li>Tested standards: C++20; C++17</li> </ul>"},{"location":"quickstart/#acknowledgments","title":"Acknowledgments","text":"<p>This project is a fork of https://github.com/matusnovak/doxybook2-bsl-license.</p> <p>We deeply appreciate all the contributions of Matus Novak.</p>"},{"location":"references/","title":"References","text":""},{"location":"templates/","title":"Templates","text":"<p>This doxybook utility uses templates very similar to Jinja on Python. The template engine used is inja for C++. There are already predefined templates stored inside of the doxybook executable file. If you do not specify an explicit template folder via <code>--templates</code> the default templates will be used.</p>"},{"location":"templates/#generate-default-templates","title":"Generate default templates","text":"<p>You can dump the default templates into a specific folder by calling doxybook as:</p> <pre><code>doxybook --generate-templates /path/to/folder\n</code></pre> <p>Note that the folder must exist. If there are any existing files that use the same name_, they will be overwritten.</p>"},{"location":"templates/#using-templates","title":"Using templates","text":"<p>To use the templates, simply create a folder, put some templates in there ending with <code>.tmpl</code> file extension and they will be automatically loaded as:</p> <pre><code>doxybook --input ... --output ... --templates /path/to/folder\n</code></pre> <p>Just as the config, if the folder does not contain a specific template, the default one will be used. For example, Hugo (Book theme) needs an extra <code>type: docs</code> in the header of the markdown. The folder <code>example/hugo-book/.doxybook/templates</code> contains a single template template file named <code>meta.tmpl</code>. This template is used by <code>header</code> template which is then further used by the <code>kind_class</code>, <code>kind_namespace</code>, and so on. There are no other template files in that example directory, therefore the default ones will be used.</p> <p>To use custom templates, simply add them to to the directory specified by the <code>--templates &lt;dir&gt;</code>.</p> <p>The following are core templates that are needed to generate the output. All of these templates are defined by the configuration file (see section \"Config values\" above). For example, the config key <code>template_kind_group</code> is by default <code>kind_nonclass</code>, therefore the render engine expects <code>kind_nonclass.tmpl</code> in your templates folder (if exists).</p> <ul> <li>template_index_examples</li> <li>template_index_files</li> <li>template_index_groups</li> <li>template_index_namespaces</li> <li>template_index_related_pages</li> <li>template_kind_class</li> <li>template_kind_example</li> <li>template_kind_file</li> <li>template_kind_group</li> <li>template_kind_dir</li> <li>template_kind_namespace</li> <li>template_kind_page</li> <li>template_kind_union</li> <li>template_kind_interface</li> <li>template_kind_struct</li> </ul> <p>The following are template names used by the core templates above. These templates are simply dependencies of the templates above. They are being included by <code>{% include \"meta\" %}</code> or by <code>{{ render(member_details, child) }}</code> inside of the templates above.</p> <ul> <li>meta</li> <li>header</li> <li>footer</li> <li>index_</li> <li>breadcrumbs</li> <li>member_details</li> <li>mode_details</li> <li>class_members_tables</li> <li>class_members_inherited_tables</li> <li>class_members_details</li> </ul>"},{"location":"templates/#custom-templates-detailed-example","title":"Custom templates detailed example","text":"<p>First, generate the default templates (this simply copies them from the executable file to the destination directory) by running <code>doxybook --generate-templates &lt;dir&gt;</code>. Let's say you want to override the fooder with some custom markdown. Find the <code>footer.tmpl</code> file and change the contents with whatever you want. You can delete the rest of the templates that you have not modified. Now run the executable with the <code>--templates &lt;dir&gt;</code> option. This will use your custom <code>footer.tmpl</code>.</p> <p>When the doxybook runs, the list of templates that are loaded is printed to the terminal right at the beginning. For example, if the template is loaded from your folder, it will print <code>Parsing template: 'footer' from file: '/path/to/templates/footer.tmpl</code>. If the template is loaded from the executable file itself (the default templates), it will print the following: <code>Parsing template: 'footer' from default</code> instead.</p> <p>Now, let's say that you want to change how enums are printed (the enum table that has Enumerator, Value, and Description columns). This is located in the <code>member_details</code> template. This template is used as <code>{{ render(\"member_details\", child) }}</code> inside of <code>class_members_details</code> and <code>nonclass_members_details</code> templates. So you only need to run <code>doxybook --generate-templates &lt;dir&gt;</code> and only keep <code>member_details.tmpl</code> and change it however you want.</p> <p>Why <code>render</code> instead of <code>include</code>? The <code>include</code> is a keyword from the inja template engine to insert the child template file. All of the variables that are accessible in the parent_ template are also accessible in the child template being included. Think of it as copy pasting the contents of the child template and putting them into the parent_ template. The render method has a different context (global data). This means that you can pass in subset of the data accessible in the parent_ template. In this case, the <code>class_members_details</code> has a JSON data that also has an array <code>publicTypes</code> (if the class/struct has any public types). By default the <code>class_members_details</code> has something like this:</p> <pre><code>{% for child in publicTypes %}\n{{ render(\"member_details\", child) }}\n{% endfor %}\n</code></pre> <p>That will simply loop over the public types and renders the child by passing the array element of <code>publicTypes</code> to the render function. The render function will render the template which global context (all of the accessible data) is going to be the <code>child</code> object.</p> <p>To see what does the JSON (the global data/context in the template) looks like, simply add <code>--debug-templates</code> to the command line. This will generate <code>*.md.json</code> files. Imagine that this JSON is passed into <code>render(..., json)</code> when generating, for example, <code>group__audio.md</code> (or any other markdown file except the GitBook summary file).</p>"},{"location":"templates/#changes-to-templates-since-110","title":"Changes to templates since 1.1.0","text":"<p>To include your own custom template, that does not override the default template, use <code>{% include \"filename.tmpl\" %}</code> or <code>{{ render(\"filename.tmpl\", data) }}</code> to do so. You need to specify the file extension <code>.tmpl</code>. Your custom templates must end with <code>.tmpl</code> file extension.</p> <p>Including or rendering templates by their name_ with no extension is only possible for the core templates specified in the config (the properties with name_ that starts with <code>template...</code>). This is not recommended but possible.</p>"},{"location":"templates/#debugging-templates","title":"Debugging templates","text":"<p>You can add <code>--debug-templates</code> into the command line (with no arguments) and a JSON file will be created alongside each of the markdown file. For example, if a markdown file <code>group___engine.md</code> will be created, the JSON will be created as <code>group___engine.md.json</code>.</p> <p>Why is this useful and why JSON? The JSON is the container between C++ data and the inja template engine. So inside the template you may find something as this: <code>{% for param in params %}...{% endfor %}</code>. This <code>params</code> variable is extracted from the JSON. This is also the exact same JSON generated in the JSON-only output. The JSON is simply put into the render function of the inja template engine.</p>"},{"location":"usage/","title":"Basic Usage","text":"<p>This is a command line tool that converts Doxygen generated XML files into markdown files (or JSON). You can then use the generated Markdown files to create beautiful C++ documentation using:</p> <ul> <li>MkDocs,</li> <li>GitBook,</li> <li>VuePress,</li> <li>Hugo,</li> <li>Docsify,</li> <li>or any other static site generator that supports markdown.</li> </ul> <p>This project is not limited to only the static site generators listed here, you can use any other one. The config file will help you to accomplish that by specifying the behavior or file names, relative links, other requirements of the static site generator.</p> <p>If you don't prefer the Markdown output generated by this tool, you can always make your own templates and supply them into this tool via the command line. If you don't want to bother with the templates, you can simply generate JSON only output, which contains partial Markdown for some things such as brief and detailed description, and use your own tool to create the documentation you want.</p>"},{"location":"usage/#command-line-arguments","title":"Command line arguments","text":"Option Short Description     <code>--help</code> <code>-h</code> Shows this help message.   <code>--version</code> <code>-v</code> Shows the version.   <code>--quiet</code> <code>-q</code> Run in quiet mode, no stdout, display onlyerrors and warnings to stderr.   <code>--input</code> <code>-i</code> Path to the generated Doxygen XML folder.Must contain index.xml!   <code>--output</code> <code>-o</code> Path to the target folder where to generatemarkdown files.   <code>--json</code> <code>-j</code> Generate JSON only, no markdown, into theoutput path. This will also generate index.json.   <code>--config</code> <code>-c</code> Optional path to a config json file.   <code>--config-data</code>  Optional json data to override config.   <code>--templates</code> <code>-t</code> Optional path to a folder with templates.   <code>--generate-config</code>  Generate config file given a path to thedestination json file   <code>--generate-templates</code>  Generate template files given a path to atarget folder.   <code>--debug-templates</code> <code>-d</code> Debug templates. This will create JSON foreach generated template.   <code>--summary-input</code>  Path to the summary input file. This filemust contain \"{{doxygen}}\" string.   <code>--summary-output</code>  Where to generate summary file. This filewill be created. Not a directory!   <code>--example</code>  doxybook --generate-configdoxybook -i ./doxygen/xml -o"},{"location":"usage/#overriding-options","title":"Overriding options","text":"<p>Note, <code>--config-data</code> can be used on top of <code>--config</code> to overwrite config properties:</p>  WindowsLinux   <p>Example on Windows terminal (double <code>\"\"</code> escapes the double quote):</p> <pre><code>doxybook ... --config-data \"{\"\"link_suffix\"\": \"\"\"\"}\"\n</code></pre>   <pre><code>doxybook ... --config-data '{\"link_suffix\": \"\"}'\n</code></pre>      <p>GitBook specific usage</p> <p>GitBook requires that your <code>SUMMARY.md</code> file contains all of the other markdown files. If the markdown file is not listed in here, it will not be generated into a HTML file. Therefore, using <code>--summary-input</code> and <code>--summary-output</code> you can generate a <code>SUMMARY.md</code> file. This works by creating a \"template\", let's call it <code>SUMMARY.md.tmpl</code>. This template file will not get modified by doxybook. You will need to put in any links you see fit (external links? other markdown files?), and then you will need to add <code>{{ doxygen }}</code> (including the double curly backets) somewhere in this template summary. Note that the indentation of <code>{{ doxygen }}</code> matters and will affect the output! Example:</p> <pre><code># Doxybook Example\n\n* [Introduction](README.md)\n  {{ doxygen }}\n* [GitHub](https://github.com/matusnovak/doxybook)\n</code></pre> <p>And when running:</p> <pre><code>doxybook \\\n    --input path/to/input/xml \\\n    --output path/to/output/reference \\\n    --config path/to/config.json \\\n    --summary-input path/to/SUMMARY.md.tmpl \\\n    --summary-output path/to/SUMMARY.md\n</code></pre> <p>The <code>path/to/SUMMARY.md</code> will be generated and <code>{{ doxygen }}</code> will be overwritten with a nested list. It will look like this:</p> <pre><code># Doxybook Example\n\n* [Introduction](README.md)\n  * [Classes](Classes/README.md)\n    * [Engine::Exception](Classes/class_engine_1_1_exception.md)\n    * [Engine::Assets::Asset](Classes/class_engine_1_1_assets_1_1_asset.md)\n    [...]\n  * [Namespaces](Namespaces/README.md)\n    * [Engine](Namespaces/namespace_engine.md)\n    [...]\n* [GitHub](https://github.com/matusnovak/doxybook)\n</code></pre> <p>There is a sample config and summary template file located in the <code>example/gitbook</code> folder in this repository.</p>"},{"location":"usage/#generating-json-only","title":"Generating JSON only","text":"<p>You can generate JSON only files (no Markdown) by adding <code>--json</code> to the command line (with no value). Such as the following:</p> <pre><code>doxybook --input path/to/input/xml --output path/to/output/reference --json\n</code></pre>"},{"location":"reference/classes/","title":"Classes","text":"Class      doxybook (namespace)   config Configuration for the doxygen and generator classes. (struct)   default_template Describe the default template for a page. (struct)   doxygen All the nodes representing the content of doxygen xml files. (class)   exception Doxybook exceptions. (class)   generator A class that stores a doxygen object and generates the markdown documentation. (class)   summary_section A section we should generate. (struct)   json_converter Convert elements to json so they can be rendered with inja. (class)   node A doxygen node. (class)   class_reference A reference to a class. (struct)   data The data in a doxygen node. (struct)   param A parameter. (struct)   parameter_list_item An item in a list of parameters. (struct)   source_location Source code location. (struct)   path (namespace)   renderer Render inja templates with the specified configuration. (class)   text_markdown_printer Print xml nodes as markdown. (class)   list_data (struct)   print_data (struct)   text_plain_printer Print elements as plain text. (class)   text_printer An abstract text printer. (class)   utils (namespace)   xml Represents and wraps an xml node. (class)   element The data of an element nodes. (class)   node An xml node. (class)   xml_text_parser Parser for a doxygen xml file as an xml document. (class)   node A parsed xml node. (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/","title":"doxybook::doxygen","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>class doxygen;\n</code></pre> <p>All the nodes representing the content of doxygen xml files. </p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) = default Destructor.  (virtual function)   load Load an xml directory generated with doxygen.  (function)   finalize Finalize by printing the index with the printers.  (function)   get_index const Get root node representing the index.  (function)   find const Find a node with the given ID.  (function)   find_if const Find a node with the given condition.  (function)   get_cache const Get cache of nodes.  (function)"},{"location":"reference/classes/classdoxybook_1_1doxygen/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-doxygen","title":"function doxygen","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>explicit doxygen(config const &amp; c);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-doxygen_1","title":"function ~doxygen","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>virtual ~doxygen() = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-load","title":"function load","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>void\nload(std::string const &amp; input_dir);\n</code></pre> <p>Load an xml directory generated with doxygen. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-finalize","title":"function finalize","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>void\nfinalize(\n    text_printer const &amp; plain_printer, \n    text_printer const &amp; markdown_printer);\n</code></pre> <p>Finalize by printing the index with the printers. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-get_index","title":"function get_index","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>node const  &amp;\nget_index() const;\n</code></pre> <p>Get root node representing the index. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-find","title":"function find","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>std::shared_ptr&lt; node &gt;\nfind(std::string const &amp; refid) const;\n</code></pre> <p>Find a node with the given ID. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-find_if","title":"function find_if","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>std::shared_ptr&lt; node &gt;\nfind_if(std::function&lt; bool(node const &amp;)&gt; f) const;\n</code></pre> <p>Find a node with the given condition. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-get_cache","title":"function get_cache","text":"<p>Defined in header <code>&lt;doxybook/doxygen.hpp&gt;</code></p> <pre><code>node_cache_map const  &amp;\nget_cache() const;\n</code></pre> <p>Get cache of nodes. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1exception/","title":"doxybook::exception","text":"<p>Defined in header <code>&lt;doxybook/exception.hpp&gt;</code></p> <pre><code>class exception;\n</code></pre> <p>Doxybook exceptions. </p> <p>Description</p> <p>This is a very basic class used to represent doxybook exceptions </p> <p>Inherits from <code>std::exception</code></p>"},{"location":"reference/classes/classdoxybook_1_1exception/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   what const override The error message.  (function)"},{"location":"reference/classes/classdoxybook_1_1exception/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1exception/#function-exception","title":"function exception","text":"<p>Defined in header <code>&lt;doxybook/exception.hpp&gt;</code></p> (1)<pre><code>exception() = default;\n</code></pre> (2)<pre><code>explicit exception(std::string msg);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1exception/#function-what","title":"function what","text":"<p>Defined in header <code>&lt;doxybook/exception.hpp&gt;</code></p> <pre><code>char const  *\nwhat() const override;\n</code></pre> <p>The error message. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1generator/","title":"doxybook::generator","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>class generator;\n</code></pre> <p>A class that stores a doxygen object and generates the markdown documentation. </p> <p>Description</p> <p>This is main class in this whole library. The cli executable basically controls this generator. </p>"},{"location":"reference/classes/classdoxybook_1_1generator/#public-classes","title":"Public Classes","text":"Name     struct summary_section A section we should generate."},{"location":"reference/classes/classdoxybook_1_1generator/#public-types","title":"Public Types","text":"Member Types Definition     filter_set A set of kinds we should use in an operation.  (using)"},{"location":"reference/classes/classdoxybook_1_1generator/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   print Generate the documentation for the specified doxygen kinds.  (function)   json Generate json for the specified doxygen kinds.  (function)   manifest Generate a manifest file.  (function)   print_index Generate the indexes for the specified doxygen kinds.  (function)   summary Generate the summary for the specified doxygen sections.  (function)"},{"location":"reference/classes/classdoxybook_1_1generator/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/classdoxybook_1_1generator/#using-filter_set","title":"using filter_set","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code> <pre><code>using filter_set = std::unordered_set&lt; kind &gt;;\n</code></pre></p> <p>A set of kinds we should use in an operation. </p>"},{"location":"reference/classes/classdoxybook_1_1generator/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1generator/#function-generator","title":"function generator","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>explicit generator(\n    config const &amp; config, \n    doxygen const &amp; doxygen, \n    json_converter const &amp; json_converter, \n    std::optional&lt; std::string &gt; const &amp; templates_path);\n</code></pre> <p>Constructor. </p> <p>Parameters</p> <ul> <li>config - Configuration options </li> <li>doxygen - Doxygen files </li> <li>json_converter - Converter from json to markdown </li> <li>templates_path - An optional path with templates </li> </ul> <p>Description</p> <p>The constructor requires the configuration and doxygen object which should be previously constructed.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1generator/#function-print","title":"function print","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>void\nprint(filter_set const &amp; filter, filter_set const &amp; skip);\n</code></pre> <p>Generate the documentation for the specified doxygen kinds. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1generator/#function-json","title":"function json","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>void\njson(filter_set const &amp; filter, filter_set const &amp; skip);\n</code></pre> <p>Generate json for the specified doxygen kinds. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1generator/#function-manifest","title":"function manifest","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>void\nmanifest();\n</code></pre> <p>Generate a manifest file. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1generator/#function-print_index","title":"function print_index","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>void\nprint_index(\n    folder_category type, \n    filter_set const &amp; filter, \n    filter_set const &amp; skip);\n</code></pre> <p>Generate the indexes for the specified doxygen kinds. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1generator/#function-summary","title":"function summary","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>void\nsummary(\n    std::string const &amp; input_file, \n    std::string const &amp; output_file, \n    std::vector&lt; summary_section &gt; const &amp; sections);\n</code></pre> <p>Generate the summary for the specified doxygen sections. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1json__converter/","title":"doxybook::json_converter","text":"<p>Defined in header <code>&lt;doxybook/json_converter.hpp&gt;</code></p> <pre><code>class json_converter;\n</code></pre> <p>Convert elements to json so they can be rendered with inja. </p>"},{"location":"reference/classes/classdoxybook_1_1json__converter/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   convert const Convert a vector of strings to a json array.  (function)   get_as_json const Convert a doxygen node to json.  (function)"},{"location":"reference/classes/classdoxybook_1_1json__converter/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-json_converter","title":"function json_converter","text":"<p>Defined in header <code>&lt;doxybook/json_converter.hpp&gt;</code></p> <pre><code>explicit json_converter(\n    config const &amp; config, \n    doxygen const &amp; doxygen, \n    text_printer const &amp; plainPrinter, \n    text_printer const &amp; markdownPrinter);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-convert","title":"function convert","text":"<p>Defined in header <code>&lt;doxybook/json_converter.hpp&gt;</code></p> (1)<pre><code>nlohmann::json\nconvert(std::vector&lt; std::string &gt; const &amp; vec) const;\n</code></pre> (2)<pre><code>nlohmann::json\nconvert(node::class_reference const &amp; class_) const;\n</code></pre> (3)<pre><code>nlohmann::json\nconvert(std::vector&lt; node::class_reference &gt; const &amp; classes) const;\n</code></pre> (4)<pre><code>nlohmann::json\nconvert(node::source_location const &amp; location) const;\n</code></pre> (5)<pre><code>nlohmann::json\nconvert(node::param const &amp; param) const;\n</code></pre> (6)<pre><code>nlohmann::json\nconvert(node::parameter_list_item const &amp; item) const;\n</code></pre> (7)<pre><code>nlohmann::json\nconvert(std::vector&lt; node::parameter_list_item &gt; const &amp; item) const;\n</code></pre> (8)<pre><code>nlohmann::json\nconvert(node const &amp; node) const;\n</code></pre> (9)<pre><code>nlohmann::json\nconvert(node const &amp; node, node::data const &amp; data) const;\n</code></pre> <ol> <li>Convert a vector of strings to a json array. </li> <li>Convert a class_reference to json. </li> <li>Convert a vector of class references to json. </li> <li>Convert a source location to json. </li> <li>Convert a doxygen param to json. </li> <li>Convert a parameter list item to json. </li> <li>Convert a parameter list to json. </li> <li>Convert a doxygen node to json. </li> <li>Convert a doxygen node data to json. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-get_as_json","title":"function get_as_json","text":"<p>Defined in header <code>&lt;doxybook/json_converter.hpp&gt;</code></p> <pre><code>nlohmann::json\nget_as_json(node const &amp; node) const;\n</code></pre> <p>Convert a doxygen node to json. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1node/","title":"doxybook::node","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>class node;\n</code></pre> <p>A doxygen node. </p>"},{"location":"reference/classes/classdoxybook_1_1node/#public-classes","title":"Public Classes","text":"Name     struct class_reference A reference to a class.   struct data The data in a doxygen node.   struct param A parameter.   struct parameter_list_item An item in a list of parameters.   struct source_location Source code location."},{"location":"reference/classes/classdoxybook_1_1node/#public-types","title":"Public Types","text":"Member Types Definition     load_data_result The result of loading the node internal data.  (using)"},{"location":"reference/classes/classdoxybook_1_1node/#public-functions","title":"Public Functions","text":"Member Functions Description     parse Parse root xml objects (classes, structs, etc)  (function)   (constructor) Constructor.  (function)   (destructor) Destructor.  (function)   find const Find a node by refid.  (function)   find_child const Find an immediate child node.  (function)   is_structured const Check if node represents a structured type.  (function)   is_language const Check if node represents a language feature.  (function)   is_file_or_dir const Check if node represents a file or directory.  (function)   get_kind const Return the kind of node.  (function)   get_language const Return the node language.  (function)   get_type const Return the node type.  (function)   get_refid const Return the node refid.  (function)   get_qualified_name const Return the qualified name.  (function)   get_name const Return the node name.  (function)   get_parent const Return the node parent.  (function)   get_group const Return the node group.  (function)   is_empty const Check if the node is empty.  (function)   get_children const Return all child nodes.  (function)   get_xml_path const Return the node xml_path.  (function)   get_brief const Return the node brief.  (function)   get_summary const Return the node summary.  (function)   get_title const Return the node title.  (function)   get_visibility const Return the node visibility.  (function)   get_virtual const Return the node virtual category.  (function)   get_base_classes const Return the node base classes.  (function)   get_derived_classes const Return the node derived classes.  (function)   get_url const Return the node url.  (function)   get_anchor const Return the node anchor.  (function)   get_section const Return the node section.  (function)   finalize Print the node contents to text and markdown.  (function)   load_data const Load the node data and its child nodes.  (function)"},{"location":"reference/classes/classdoxybook_1_1node/#friends","title":"Friends","text":"Friends Description     doxygen Constructor. (public friend class)"},{"location":"reference/classes/classdoxybook_1_1node/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/classdoxybook_1_1node/#using-load_data_result","title":"using load_data_result","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>using load_data_result = \n    std::tuple&lt; data, std::unordered_map&lt; std::string, data &gt; &gt;;\n</code></pre></p> <p>The result of loading the node internal data. </p>"},{"location":"reference/classes/classdoxybook_1_1node/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1node/#function-parse","title":"function parse","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> (1)<pre><code>static std::shared_ptr&lt; node &gt;\nparse(\n    node_cache_map &amp; cache, \n    std::string const &amp; input_dir, \n    std::string const &amp; refid, \n    bool is_group_or_file, \n    bool const allow_undocumented_macros);\n</code></pre> (2)<pre><code>static std::shared_ptr&lt; node &gt;\nparse(\n    node_cache_map &amp; cache, \n    std::string const &amp; input_dir, \n    std::shared_ptr&lt; node &gt; const &amp; ptr, \n    bool is_group_or_file, \n    bool const allow_undocumented_macros);\n</code></pre> (3)<pre><code>static std::shared_ptr&lt; node &gt;\nparse(xml::element &amp; member_def, std::string const &amp; ref_id);\n</code></pre> <ol> <li>Parse root xml objects (classes, structs, etc) </li> <li>Parse objects under the specified node. </li> <li>Parse member xml objects (functions, enums, etc) </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-node","title":"function node","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>explicit node(std::string const &amp; refid);\n</code></pre> <p>Constructor. </p> <p>Parameters</p> <ul> <li>refid - Node id </li> </ul> <p>Description</p> <p>The constructor will only store the refid and an empty temporary node.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-node_1","title":"function ~node","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>~node();\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-find","title":"function find","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::shared_ptr&lt; node &gt;\nfind(std::string const &amp; refid) const;\n</code></pre> <p>Find a node by refid. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-find_child","title":"function find_child","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::shared_ptr&lt; node &gt;\nfind_child(std::string const &amp; refid) const;\n</code></pre> <p>Find an immediate child node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_structured","title":"function is_structured","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>bool\nis_structured() const;\n</code></pre> <p>Check if node represents a structured type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_language","title":"function is_language","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>bool\nis_language() const;\n</code></pre> <p>Check if node represents a language feature. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_file_or_dir","title":"function is_file_or_dir","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>bool\nis_file_or_dir() const;\n</code></pre> <p>Check if node represents a file or directory. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_kind","title":"function get_kind","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>kind\nget_kind() const;\n</code></pre> <p>Return the kind of node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_language","title":"function get_language","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string\nget_language() const;\n</code></pre> <p>Return the node language. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_type","title":"function get_type","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>type\nget_type() const;\n</code></pre> <p>Return the node type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_refid","title":"function get_refid","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_refid() const;\n</code></pre> <p>Return the node refid. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_qualified_name","title":"function get_qualified_name","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_qualified_name() const;\n</code></pre> <p>Return the qualified name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_name","title":"function get_name","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_name() const;\n</code></pre> <p>Return the node name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_parent","title":"function get_parent","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>node const  *\nget_parent() const;\n</code></pre> <p>Return the node parent. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_group","title":"function get_group","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>node const  *\nget_group() const;\n</code></pre> <p>Return the node group. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_empty","title":"function is_empty","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>bool\nis_empty() const;\n</code></pre> <p>Check if the node is empty. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_children","title":"function get_children","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::list&lt; std::shared_ptr&lt; node &gt; &gt; const  &amp;\nget_children() const;\n</code></pre> <p>Return all child nodes. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_xml_path","title":"function get_xml_path","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_xml_path() const;\n</code></pre> <p>Return the node xml_path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_brief","title":"function get_brief","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_brief() const;\n</code></pre> <p>Return the node brief. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_summary","title":"function get_summary","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_summary() const;\n</code></pre> <p>Return the node summary. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_title","title":"function get_title","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_title() const;\n</code></pre> <p>Return the node title. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_visibility","title":"function get_visibility","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>visibility\nget_visibility() const;\n</code></pre> <p>Return the node visibility. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_virtual","title":"function get_virtual","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>virtual_category\nget_virtual() const;\n</code></pre> <p>Return the node virtual category. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_base_classes","title":"function get_base_classes","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::vector&lt; class_reference &gt; const  &amp;\nget_base_classes() const;\n</code></pre> <p>Return the node base classes. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_derived_classes","title":"function get_derived_classes","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::vector&lt; class_reference &gt; const  &amp;\nget_derived_classes() const;\n</code></pre> <p>Return the node derived classes. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_url","title":"function get_url","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_url() const;\n</code></pre> <p>Return the node url. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_anchor","title":"function get_anchor","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_anchor() const;\n</code></pre> <p>Return the node anchor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_section","title":"function get_section","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_section() const;\n</code></pre> <p>Return the node section. </p> <p>Description</p> <p>This is useful for class member functions that need to go into sections </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-finalize","title":"function finalize","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>void\nfinalize(\n    config const &amp; config, \n    text_printer const &amp; plain_printer, \n    text_printer const &amp; markdown_printer, \n    node_cache_map const &amp; cache);\n</code></pre> <p>Print the node contents to text and markdown. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#function-load_data","title":"function load_data","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>load_data_result\nload_data(\n    config const &amp; config, \n    text_printer const &amp; plain_printer, \n    text_printer const &amp; markdown_printer, \n    node_cache_map const &amp; cache) const;\n</code></pre> <p>Load the node data and its child nodes. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1node/#friends_1","title":"Friends","text":""},{"location":"reference/classes/classdoxybook_1_1node/#friend-doxygen","title":"friend doxygen","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>friend\nclass doxygen(doxygen);\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1renderer/","title":"doxybook::renderer","text":"<p>Defined in header <code>&lt;doxybook/renderer.hpp&gt;</code></p> <pre><code>class renderer;\n</code></pre> <p>Render inja templates with the specified configuration. </p>"},{"location":"reference/classes/classdoxybook_1_1renderer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) (function)   render const Destructor.  (function)"},{"location":"reference/classes/classdoxybook_1_1renderer/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1renderer/#function-renderer","title":"function renderer","text":"<p>Defined in header <code>&lt;doxybook/renderer.hpp&gt;</code></p> <pre><code>explicit renderer(\n    config const &amp; config, \n    doxygen const &amp; doxygen, \n    json_converter const &amp; json_converter, \n    std::optional&lt; std::string &gt; const &amp; templates_path =std::nullopt);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1renderer/#function-renderer_1","title":"function ~renderer","text":"<p>Defined in header <code>&lt;doxybook/renderer.hpp&gt;</code></p> <pre><code>~renderer();\n</code></pre> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1renderer/#function-render","title":"function render","text":"<p>Defined in header <code>&lt;doxybook/renderer.hpp&gt;</code></p> (1)<pre><code>void\nrender(\n    std::string const &amp; name, \n    std::string const &amp; path, \n    nlohmann::json const &amp; data) const;\n</code></pre> (2)<pre><code>std::string\nrender(std::string const &amp; name, nlohmann::json const &amp; data) const;\n</code></pre> <ol> <li>Destructor. </li> <li>Render template. </li> </ol> <p>Parameters</p> <ul> <li>data - data as json </li> <li>name - template name </li> </ul> <p>Return value</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/","title":"doxybook::text_markdown_printer","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code></p> <pre><code>class text_markdown_printer;\n</code></pre> <p>Print xml nodes as markdown. </p> <p>Inherits from text_printer</p>"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   print const override Print an xml node.  (virtual function)"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     config_ config const  &amp; (protected variable)   doxygen_ doxygen const  &amp; (protected variable)"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from doxybook::text_printer)</p>    Member Functions Description     text_printer Constructor.  (function)   ~text_printer = default Destructor.  (virtual function)"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#function-text_markdown_printer","title":"function text_markdown_printer","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code></p> <pre><code>explicit text_markdown_printer(\n    config const &amp; config, \n    std::string input_dir, \n    doxygen const &amp; doxygen);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#function-print","title":"function print","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code></p> <pre><code>virtual std::string\nprint(\n    xml_text_parser::node const &amp; node, \n    std::string const &amp; language) const override;\n</code></pre> <p>Print an xml node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#variable-config_","title":"variable config_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>config const  &amp; config_;\n</code></pre></p>"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#variable-doxygen_","title":"variable doxygen_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>doxygen const  &amp; doxygen_;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/","title":"doxybook::text_plain_printer","text":"<p>Defined in header <code>&lt;doxybook/text_plain_printer.hpp&gt;</code></p> <pre><code>class text_plain_printer;\n</code></pre> <p>Print elements as plain text. </p> <p>Inherits from text_printer</p>"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   print const override Print an element as plain text.  (virtual function)"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     config_ config const  &amp; (protected variable)   doxygen_ doxygen const  &amp; (protected variable)"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions(inherited from doxybook::text_printer)</p>    Member Functions Description     text_printer Constructor.  (function)   ~text_printer = default Destructor.  (virtual function)"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#function-text_plain_printer","title":"function text_plain_printer","text":"<p>Defined in header <code>&lt;doxybook/text_plain_printer.hpp&gt;</code></p> <pre><code>explicit text_plain_printer(config const &amp; config, doxygen const &amp; doxygen);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#function-print","title":"function print","text":"<p>Defined in header <code>&lt;doxybook/text_plain_printer.hpp&gt;</code></p> <pre><code>virtual std::string\nprint(\n    xml_text_parser::node const &amp; node, \n    std::string const &amp; language) const override;\n</code></pre> <p>Print an element as plain text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#variable-config_","title":"variable config_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>config const  &amp; config_;\n</code></pre></p>"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#variable-doxygen_","title":"variable doxygen_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>doxygen const  &amp; doxygen_;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/","title":"doxybook::text_printer","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code></p> <pre><code>class text_printer;\n</code></pre> <p>An abstract text printer. </p> <p>Inherited by: <code>text_printer</code> is a base class for text_markdown_printer and text_plain_printer</p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) = default Destructor.  (virtual function)   print const = 0 Convert an element to text.  (virtual function)"},{"location":"reference/classes/classdoxybook_1_1text__printer/#protected-attributes","title":"Protected Attributes","text":"Member Protected Attributes Description     config_ config const  &amp; (protected variable)   doxygen_ doxygen const  &amp; (protected variable)"},{"location":"reference/classes/classdoxybook_1_1text__printer/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-text_printer","title":"function text_printer","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code></p> <pre><code>explicit text_printer(config const &amp; config, doxygen const &amp; doxygen);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-text_printer_1","title":"function ~text_printer","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code></p> <pre><code>virtual ~text_printer() = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-print","title":"function print","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code></p> <pre><code>virtual std::string\nprint(\n    xml_text_parser::node const &amp; node, \n    std::string const &amp; language =\"cpp\") const = 0;\n</code></pre> <p>Convert an element to text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/#protected-attributes_1","title":"Protected Attributes","text":""},{"location":"reference/classes/classdoxybook_1_1text__printer/#variable-config_","title":"variable config_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>config const  &amp; config_;\n</code></pre></p>"},{"location":"reference/classes/classdoxybook_1_1text__printer/#variable-doxygen_","title":"variable doxygen_","text":"<p>Defined in header <code>&lt;doxybook/text_printer.hpp&gt;</code> <pre><code>doxygen const  &amp; doxygen_;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1xml/","title":"doxybook::xml","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>class xml;\n</code></pre> <p>Represents and wraps an xml node. </p>"},{"location":"reference/classes/classdoxybook_1_1xml/#public-classes","title":"Public Classes","text":"Name     class element The data of an element nodes.   class node An xml node."},{"location":"reference/classes/classdoxybook_1_1xml/#public-types","title":"Public Types","text":"Member Types Definition     element_callback <code>std::function&lt; void([element](/doxybook/reference/classes/classdoxybook_1_1xml_1_1element/) &amp;)&gt;</code> (using)"},{"location":"reference/classes/classdoxybook_1_1xml/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) Destructor.  (function)   first_child_element const Get first child element with the specified name.  (function)   get_path const Get document path.  (function)"},{"location":"reference/classes/classdoxybook_1_1xml/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/classdoxybook_1_1xml/#using-element_callback","title":"using element_callback","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code> <pre><code>using element_callback = std::function&lt; void(element &amp;)&gt;;\n</code></pre></p>"},{"location":"reference/classes/classdoxybook_1_1xml/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1xml/#function-xml","title":"function xml","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>explicit xml(std::string const &amp; path);\n</code></pre> <p>Constructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml/#function-xml_1","title":"function ~xml","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>~xml();\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml/#function-first_child_element","title":"function first_child_element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>element\nfirst_child_element(std::string const &amp; name) const;\n</code></pre> <p>Get first child element with the specified name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml/#function-get_path","title":"function get_path","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>std::string const  &amp;\nget_path() const;\n</code></pre> <p>Get document path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/","title":"doxybook::xml::element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>class element;\n</code></pre> <p>The data of an element nodes. </p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) = default Destructor.  (function)   all_child_elements const Execute callback for all child element with a given name.  (function)   as_node const Get as generic node.  (function)   next_sibling_element const Get next sibling element.  (function)   next_sibling const Get next sibling node.  (function)   first_child const Get first child node.  (function)   first_child_element const Get first child element node.  (function)   get_line const Get line number in xml file.  (function)   get_document const Get reference to document.  (function)   get_attr const Get node attribute.  (function)   get_name const Get node name.  (function)   has_text const Check if node has text.  (function)   get_text const Get node text.  (function)   operator bool const Check if element is valid.  (function)"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-element","title":"function element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> (1)<pre><code>element() = default;\n</code></pre> (2)<pre><code>explicit element(tinyxml2::XMLElement * ptr);\n</code></pre> <ol> <li>Constructor. </li> <li>Constructor from tinyxml element node. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-element_1","title":"function ~element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>~element() = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-all_child_elements","title":"function all_child_elements","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>void\nall_child_elements(\n    std::string const &amp; name, \n    element_callback const &amp; callback) const;\n</code></pre> <p>Execute callback for all child element with a given name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-as_node","title":"function as_node","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>node\nas_node() const;\n</code></pre> <p>Get as generic node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-next_sibling_element","title":"function next_sibling_element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> (1)<pre><code>element\nnext_sibling_element() const;\n</code></pre> (2)<pre><code>element\nnext_sibling_element(std::string const &amp; name) const;\n</code></pre> <ol> <li>Get next sibling element. </li> <li>Get next sibling element with the specified name. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-next_sibling","title":"function next_sibling","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>node\nnext_sibling() const;\n</code></pre> <p>Get next sibling node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-first_child","title":"function first_child","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>node\nfirst_child() const;\n</code></pre> <p>Get first child node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-first_child_element","title":"function first_child_element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> (1)<pre><code>element\nfirst_child_element() const;\n</code></pre> (2)<pre><code>element\nfirst_child_element(std::string const &amp; name) const;\n</code></pre> <ol> <li>Get first child element node. </li> <li>Get first child element with the specified name. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_line","title":"function get_line","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>int\nget_line() const;\n</code></pre> <p>Get line number in xml file. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_document","title":"function get_document","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>xml const  &amp;\nget_document() const;\n</code></pre> <p>Get reference to document. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_attr","title":"function get_attr","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> (1)<pre><code>std::string\nget_attr(std::string const &amp; name) const;\n</code></pre> (2)<pre><code>std::string\nget_attr(\n    std::string const &amp; name, \n    std::string const &amp; default_value) const;\n</code></pre> <ol> <li>Get node attribute. </li> <li>Get node attribute or default value. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_name","title":"function get_name","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>std::string\nget_name() const;\n</code></pre> <p>Get node name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-has_text","title":"function has_text","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>bool\nhas_text() const;\n</code></pre> <p>Check if node has text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_text","title":"function get_text","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>std::string\nget_text() const;\n</code></pre> <p>Get node text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-operator-bool","title":"function operator bool","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>operator bool() const;\n</code></pre> <p>Check if element is valid. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/","title":"doxybook::xml::node","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>class node;\n</code></pre> <p>An xml node. </p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#public-functions","title":"Public Functions","text":"Member Functions Description     (constructor) Constructor.  (function)   (destructor) = default Destructor.  (function)   next_sibling const Get next node.  (function)   first_child const Get first child node.  (function)   has_text const Check if node has text.  (function)   get_text const Get node text.  (function)   is_element const Check if this is an element node.  (function)   as_element const Get node as an element.  (function)   operator bool const Check if node is valid.  (function)"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-node","title":"function node","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> (1)<pre><code>node() = default;\n</code></pre> (2)<pre><code>explicit node(tinyxml2::XMLNode * ptr);\n</code></pre> <ol> <li>Constructor. </li> <li>Construct from a tinyxml node. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-node_1","title":"function ~node","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>~node() = default;\n</code></pre> <p>Destructor. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-next_sibling","title":"function next_sibling","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>node\nnext_sibling() const;\n</code></pre> <p>Get next node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-first_child","title":"function first_child","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>node\nfirst_child() const;\n</code></pre> <p>Get first child node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-has_text","title":"function has_text","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>bool\nhas_text() const;\n</code></pre> <p>Check if node has text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-get_text","title":"function get_text","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>std::string\nget_text() const;\n</code></pre> <p>Get node text. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-is_element","title":"function is_element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>bool\nis_element() const;\n</code></pre> <p>Check if this is an element node. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-as_element","title":"function as_element","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>element\nas_element() const;\n</code></pre> <p>Get node as an element. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-operator-bool","title":"function operator bool","text":"<p>Defined in header <code>&lt;doxybook/xml.hpp&gt;</code></p> <pre><code>operator bool() const;\n</code></pre> <p>Check if node is valid. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/","title":"doxybook::xml_text_parser","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code></p> <pre><code>class xml_text_parser;\n</code></pre> <p>Parser for a doxygen xml file as an xml document. </p>"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-classes","title":"Public Classes","text":"Name     struct node A parsed xml node."},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-types","title":"Public Types","text":"Member Types Definition     children_type <code>std::vector&lt; std::unique_ptr&lt; tag &gt; &gt;</code> (using)"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-functions","title":"Public Functions","text":"Member Functions Description     parse_paras Parse elements.  (function)   parse_para Parse element.  (function)   str_to_type Convert string to node type.  (function)"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#using-children_type","title":"using children_type","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>using children_type = std::vector&lt; std::unique_ptr&lt; tag &gt; &gt;;\n</code></pre></p>"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-functions_1","title":"Public Functions","text":""},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-parse_paras","title":"function parse_paras","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code></p> <pre><code>static node\nparse_paras(xml::element const &amp; element);\n</code></pre> <p>Parse elements. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-parse_para","title":"function parse_para","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code></p> <pre><code>static node\nparse_para(xml::element const &amp; element);\n</code></pre> <p>Parse element. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-str_to_type","title":"function str_to_type","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code></p> <pre><code>static enum node::type\nstr_to_type(std::string const &amp; str);\n</code></pre> <p>Convert string to node type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1config/","title":"doxybook::config","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code></p> <pre><code>struct config;\n</code></pre> <p>Configuration for the doxygen and generator classes. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     output_dir Where to store the output files?  (public variable)   debug_template_json Generate extra JSON for each rendered template.  (public variable)   use_folders Put all files into categorized folders.  (public variable)   undocumented_macros Whether we should allow undocumented macros.  (public variable)   index_in_folders Put index files into the respective subdirectories.  (public variable)   main_page_in_root Main page should be located in the root directory.  (public variable)   main_page_name Name of the mainpage / indexpage.  (public variable)   base_url The base URL to prepend all links with.  (public variable)   file_extension The extension for markdown files.  (public variable)   link_suffix The suffix to end links with.  (public variable)   replaceUnderscoresInAnchors Replace underscores with hyphens in anchors.  (public variable)   sort Sort symbols alphabetically.  (public variable)   copy_images Copy images from the Doxygen xml dir.  (public variable)   images_folder Where to copy images.  (public variable)   link_lowercase Convert all refids and folder names to lowercase.  (public variable)   link_and_inline_code_as_html Output links/code as /<code> tags instead of Markdown.  (public variable)   folder_groups_name The modules folder name.  (public variable)   folder_classes_name The classes folder name.  (public variable)   folder_files_name The files folder name.  (public variable)   folder_related_pages_name The pages folder name.  (public variable)   folder_namespaces_name The namespaces folder name.  (public variable)   folder_examples_name The examples folder name.  (public variable)   index_groups_name The groups index file name.  (public variable)   index_classes_name The classes index file name.  (public variable)   index_files_name The files index file name.  (public variable)   index_related_pages_name The relatedPages index file name.  (public variable)   index_namespaces_name The namespaces index file name.  (public variable)   index_examples_name The examples index file name.  (public variable)   template_kind_class The template file we should use for classes.  (public variable)   template_kind_struct The template file we should use for structs.  (public variable)   template_kind_union The template file we should use for unions.  (public variable)   template_kind_interface The template file we should use for interfaces.  (public variable)   template_kind_java_enum The template file we should use for java enums.  (public variable)   template_kind_namespace The template file we should use for namespaces.  (public variable)   template_kind_group The template file we should use for groups.  (public variable)   template_kind_file The template file we should use for files.  (public variable)   template_kind_dir The template file we should use for dirs.  (public variable)   template_kind_page The template file we should use for pages.  (public variable)   template_kind_example The template file we should use for examples.  (public variable)   template_index_classes The template file we should we for the class index.  (public variable)   template_index_namespaces The template file we should we for the namespace index.  (public variable)   template_index_groups The template file we should we for the group index.  (public variable)   template_index_files The template file we should we for the file index.  (public variable)   template_index_related_pages The template file we should we for the related page index.  (public variable)   template_index_examples The template file we should we for the example index.  (public variable)   index_classes_title The title for classes in index pages.  (public variable)   index_namespaces_title The title for namespaces in index pages.  (public variable)   index_groups_title The title for groups in index pages.  (public variable)   index_files_title The title for files in index pages.  (public variable)   index_related_pages_title The title for relatedPages in index pages.  (public variable)   index_examples_title The title for examples in index pages.  (public variable)   files_filter The source files allowed in the output?  (public variable)   folders_to_generate Folders we should generate.  (public variable)   formulaInlineStart Token for latex formulas inline start.  (public variable)   formulaInlineEnd Token for latex formulas inline end.  (public variable)   formulaBlockStart Token for latex formulas block start.  (public variable)   formulaBlockEnd Token for latex formulas block end.  (public variable)"},{"location":"reference/classes/structdoxybook_1_1config/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1config/#variable-output_dir","title":"variable output_dir","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string output_dir;\n</code></pre></p> <p>Where to store the output files? </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-debug_template_json","title":"variable debug_template_json","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool debug_template_json { false };\n</code></pre></p> <p>Generate extra JSON for each rendered template. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-use_folders","title":"variable use_folders","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool use_folders { true };\n</code></pre></p> <p>Put all files into categorized folders. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-undocumented_macros","title":"variable undocumented_macros","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool undocumented_macros { false };\n</code></pre></p> <p>Whether we should allow undocumented macros. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_in_folders","title":"variable index_in_folders","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool index_in_folders { false };\n</code></pre></p> <p>Put index files into the respective subdirectories. </p> <p>Description</p> <p>(Hugo/Learn) needs that </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-main_page_in_root","title":"variable main_page_in_root","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool main_page_in_root { false };\n</code></pre></p> <p>Main page should be located in the root directory. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-main_page_name","title":"variable main_page_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string main_page_name { \"indexpage\" };\n</code></pre></p> <p>Name of the mainpage / indexpage. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-base_url","title":"variable base_url","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string base_url { \"\" };\n</code></pre></p> <p>The base URL to prepend all links with. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-file_extension","title":"variable file_extension","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string file_extension { \"md\" };\n</code></pre></p> <p>The extension for markdown files. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_suffix","title":"variable link_suffix","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string link_suffix { \".md\" };\n</code></pre></p> <p>The suffix to end links with. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-replaceunderscoresinanchors","title":"variable replaceUnderscoresInAnchors","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool replaceUnderscoresInAnchors { true };\n</code></pre></p> <p>Replace underscores with hyphens in anchors. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-sort","title":"variable sort","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool sort { false };\n</code></pre></p> <p>Sort symbols alphabetically. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-copy_images","title":"variable copy_images","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool copy_images { true };\n</code></pre></p> <p>Copy images from the Doxygen xml dir. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-images_folder","title":"variable images_folder","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string images_folder { \"images\" };\n</code></pre></p> <p>Where to copy images. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_lowercase","title":"variable link_lowercase","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool link_lowercase { false };\n</code></pre></p> <p>Convert all refids and folder names to lowercase. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_and_inline_code_as_html","title":"variable link_and_inline_code_as_html","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>bool link_and_inline_code_as_html { false };\n</code></pre></p> <p>Output links/code as /<code> tags instead of Markdown."},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_groups_name","title":"variable folder_groups_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_groups_name { \"libraries\" };\n</code></pre></p> <p>The modules folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_classes_name","title":"variable folder_classes_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_classes_name { \"classes\" };\n</code></pre></p> <p>The classes folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_files_name","title":"variable folder_files_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_files_name { \"files\" };\n</code></pre></p> <p>The files folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_related_pages_name","title":"variable folder_related_pages_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_related_pages_name { \"pages\" };\n</code></pre></p> <p>The pages folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_namespaces_name","title":"variable folder_namespaces_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_namespaces_name { \"namespaces\" };\n</code></pre></p> <p>The namespaces folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_examples_name","title":"variable folder_examples_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string folder_examples_name { \"examples\" };\n</code></pre></p> <p>The examples folder name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_groups_name","title":"variable index_groups_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_groups_name { \"index_groups\" };\n</code></pre></p> <p>The groups index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_classes_name","title":"variable index_classes_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_classes_name { \"index_classes\" };\n</code></pre></p> <p>The classes index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_files_name","title":"variable index_files_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_files_name { \"index_files\" };\n</code></pre></p> <p>The files index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_related_pages_name","title":"variable index_related_pages_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_related_pages_name { \"index_pages\" };\n</code></pre></p> <p>The relatedPages index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_namespaces_name","title":"variable index_namespaces_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_namespaces_name { \"index_namespaces\" };\n</code></pre></p> <p>The namespaces index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_examples_name","title":"variable index_examples_name","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_examples_name { \"index_examples\" };\n</code></pre></p> <p>The examples index file name. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_class","title":"variable template_kind_class","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_class { \"kind_class\" };\n</code></pre></p> <p>The template file we should use for classes. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_struct","title":"variable template_kind_struct","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_struct { \"kind_class\" };\n</code></pre></p> <p>The template file we should use for structs. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_union","title":"variable template_kind_union","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_union { \"kind_class\" };\n</code></pre></p> <p>The template file we should use for unions. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_interface","title":"variable template_kind_interface","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_interface { \"kind_class\" };\n</code></pre></p> <p>The template file we should use for interfaces. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_java_enum","title":"variable template_kind_java_enum","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_java_enum { \"kind_class\" };\n</code></pre></p> <p>The template file we should use for java enums. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_namespace","title":"variable template_kind_namespace","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_namespace { \"kind_nonclass\" };\n</code></pre></p> <p>The template file we should use for namespaces. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_group","title":"variable template_kind_group","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_group { \"kind_nonclass\" };\n</code></pre></p> <p>The template file we should use for groups. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_file","title":"variable template_kind_file","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_file { \"kind_file\" };\n</code></pre></p> <p>The template file we should use for files. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_dir","title":"variable template_kind_dir","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_dir { \"kind_file\" };\n</code></pre></p> <p>The template file we should use for dirs. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_page","title":"variable template_kind_page","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_page { \"kind_page\" };\n</code></pre></p> <p>The template file we should use for pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_example","title":"variable template_kind_example","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_kind_example { \"kind_page\" };\n</code></pre></p> <p>The template file we should use for examples. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_classes","title":"variable template_index_classes","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_classes { \"index_classes\" };\n</code></pre></p> <p>The template file we should we for the class index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_namespaces","title":"variable template_index_namespaces","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_namespaces { \"index_namespaces\" };\n</code></pre></p> <p>The template file we should we for the namespace index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_groups","title":"variable template_index_groups","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_groups { \"index_groups\" };\n</code></pre></p> <p>The template file we should we for the group index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_files","title":"variable template_index_files","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_files { \"index_files\" };\n</code></pre></p> <p>The template file we should we for the file index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_related_pages","title":"variable template_index_related_pages","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_related_pages { \"index_pages\" };\n</code></pre></p> <p>The template file we should we for the related page index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_examples","title":"variable template_index_examples","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string template_index_examples { \"index_examples\" };\n</code></pre></p> <p>The template file we should we for the example index. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_classes_title","title":"variable index_classes_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_classes_title { \"Classes\" };\n</code></pre></p> <p>The title for classes in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_namespaces_title","title":"variable index_namespaces_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_namespaces_title { \"Namespaces\" };\n</code></pre></p> <p>The title for namespaces in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_groups_title","title":"variable index_groups_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_groups_title { \"Libraries\" };\n</code></pre></p> <p>The title for groups in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_files_title","title":"variable index_files_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_files_title { \"Files\" };\n</code></pre></p> <p>The title for files in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_related_pages_title","title":"variable index_related_pages_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_related_pages_title { \"Pages\" };\n</code></pre></p> <p>The title for relatedPages in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_examples_title","title":"variable index_examples_title","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string index_examples_title { \"Examples\" };\n</code></pre></p> <p>The title for examples in index pages. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-files_filter","title":"variable files_filter","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; files_filter {};\n</code></pre></p> <p>The source files allowed in the output? </p> <p>Description</p> <p>An empty list means all files are allowed </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folders_to_generate","title":"variable folders_to_generate","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::vector&lt; folder_category &gt; folders_to_generate {\n            folder_category::MODULES,    folder_category::CLASSES,\n            folder_category::FILES,      folder_category::PAGES,\n            folder_category::NAMESPACES, folder_category::EXAMPLES,\n        };\n</code></pre></p> <p>Folders we should generate. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulainlinestart","title":"variable formulaInlineStart","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string formulaInlineStart { \"\\\\(\" };\n</code></pre></p> <p>Token for latex formulas inline start. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulainlineend","title":"variable formulaInlineEnd","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string formulaInlineEnd { \"\\\\)\" };\n</code></pre></p> <p>Token for latex formulas inline end. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulablockstart","title":"variable formulaBlockStart","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string formulaBlockStart { \"\\\\[\" };\n</code></pre></p> <p>Token for latex formulas block start. </p>"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulablockend","title":"variable formulaBlockEnd","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code> <pre><code>std::string formulaBlockEnd { \"\\\\]\" };\n</code></pre></p> <p>Token for latex formulas block end. </p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1default__template/","title":"doxybook::default_template","text":"<p>Defined in header <code>&lt;doxybook/default_templates.hpp&gt;</code></p> <pre><code>struct default_template;\n</code></pre> <p>Describe the default template for a page. </p>"},{"location":"reference/classes/structdoxybook_1_1default__template/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     src The template source.  (public variable)   dependencies Files on which the template depends.  (public variable)"},{"location":"reference/classes/structdoxybook_1_1default__template/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1default__template/#variable-src","title":"variable src","text":"<p>Defined in header <code>&lt;doxybook/default_templates.hpp&gt;</code> <pre><code>std::string src;\n</code></pre></p> <p>The template source. </p>"},{"location":"reference/classes/structdoxybook_1_1default__template/#variable-dependencies","title":"variable dependencies","text":"<p>Defined in header <code>&lt;doxybook/default_templates.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; dependencies;\n</code></pre></p> <p>Files on which the template depends. </p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/","title":"doxybook::generator::summary_section","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code></p> <pre><code>struct summary_section;\n</code></pre> <p>A section we should generate. </p>"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     type The type of the section.  (public variable)   filter The kinds we should use.  (public variable)   skip The kinds we should skip.  (public variable)"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code> <pre><code>folder_category type;\n</code></pre></p> <p>The type of the section. </p>"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-filter","title":"variable filter","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code> <pre><code>filter_set filter;\n</code></pre></p> <p>The kinds we should use. </p>"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-skip","title":"variable skip","text":"<p>Defined in header <code>&lt;doxybook/generator.hpp&gt;</code> <pre><code>filter_set skip;\n</code></pre></p> <p>The kinds we should skip. </p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/","title":"doxybook::node::class_reference","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>struct class_reference;\n</code></pre> <p>A reference to a class. </p> <p>Description</p> <p>These are usually used to represent base and derived classes </p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     name <code>std::string</code> (public variable)   refid <code>std::string</code> (public variable)   prot visibility (public variable)   virt virtual_category (public variable)   ptr node const  * (public variable)"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-name","title":"variable name","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string name;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-refid","title":"variable refid","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string refid;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-prot","title":"variable prot","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>visibility prot;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-virt","title":"variable virt","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>virtual_category virt;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-ptr","title":"variable ptr","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>node const  * ptr { nullptr };\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/","title":"doxybook::node::data","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>struct data;\n</code></pre> <p>The data in a doxygen node. </p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     base_classes std::vector&lt; class_reference &gt; (public variable)   definition <code>std::string</code> (public variable)   args_string <code>std::string</code> (public variable)   initializer <code>std::string</code> (public variable)   requiresclause <code>std::string</code> (public variable)   derived_classes std::vector&lt; class_reference &gt; (public variable)   is_abstract <code>bool</code> (public variable)   is_static <code>bool</code> (public variable)   is_const <code>bool</code> (public variable)   is_explicit <code>bool</code> (public variable)   is_strong <code>bool</code> (public variable)   is_inline <code>bool</code> (public variable)   is_default <code>bool</code> (public variable)   is_deleted <code>bool</code> (public variable)   is_override <code>bool</code> (public variable)   location source_location (public variable)   details <code>std::string</code> (public variable)   in_body <code>std::string</code> (public variable)   includes <code>std::string</code> (public variable)   type <code>std::string</code> (public variable)   type_plain <code>std::string</code> (public variable)   deprecated <code>std::string</code> (public variable)   params std::vector&lt; param &gt; (public variable)   template_params_string <code>std::string</code> (public variable)   template_params std::vector&lt; param &gt; (public variable)   see <code>std::vector&lt; std::string &gt;</code> (public variable)   returns <code>std::vector&lt; std::string &gt;</code> (public variable)   authors <code>std::vector&lt; std::string &gt;</code> (public variable)   version <code>std::vector&lt; std::string &gt;</code> (public variable)   since <code>std::vector&lt; std::string &gt;</code> (public variable)   date <code>std::vector&lt; std::string &gt;</code> (public variable)   note <code>std::vector&lt; std::string &gt;</code> (public variable)   warning <code>std::vector&lt; std::string &gt;</code> (public variable)   pre <code>std::vector&lt; std::string &gt;</code> (public variable)   post <code>std::vector&lt; std::string &gt;</code> (public variable)   copyright <code>std::vector&lt; std::string &gt;</code> (public variable)   invariant <code>std::vector&lt; std::string &gt;</code> (public variable)   remark <code>std::vector&lt; std::string &gt;</code> (public variable)   attention <code>std::vector&lt; std::string &gt;</code> (public variable)   par <code>std::vector&lt; std::string &gt;</code> (public variable)   rcs <code>std::vector&lt; std::string &gt;</code> (public variable)   bugs <code>std::vector&lt; std::string &gt;</code> (public variable)   tests <code>std::vector&lt; std::string &gt;</code> (public variable)   todos <code>std::vector&lt; std::string &gt;</code> (public variable)   param_list std::vector&lt; node::parameter_list_item &gt; (public variable)   returns_list std::vector&lt; node::parameter_list_item &gt; (public variable)   template_params_list std::vector&lt; node::parameter_list_item &gt; (public variable)   exceptions_list std::vector&lt; node::parameter_list_item &gt; (public variable)   reimplements node const  * (public variable)   reimplemented_by std::vector&lt; node const  * &gt; (public variable)   program_listing <code>std::string</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-base_classes","title":"variable base_classes","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; class_reference &gt; base_classes;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-definition","title":"variable definition","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string definition;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-args_string","title":"variable args_string","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string args_string;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-initializer","title":"variable initializer","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string initializer;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-requiresclause","title":"variable requiresclause","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string requiresclause;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-derived_classes","title":"variable derived_classes","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; class_reference &gt; derived_classes;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_abstract","title":"variable is_abstract","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_abstract { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_static","title":"variable is_static","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_static { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_const","title":"variable is_const","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_const { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_explicit","title":"variable is_explicit","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_explicit { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_strong","title":"variable is_strong","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_strong { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_inline","title":"variable is_inline","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_inline { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_default","title":"variable is_default","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_default { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_deleted","title":"variable is_deleted","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_deleted { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_override","title":"variable is_override","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>bool is_override { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-location","title":"variable location","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>source_location location;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-details","title":"variable details","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string details;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-in_body","title":"variable in_body","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string in_body;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-includes","title":"variable includes","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string includes;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string type;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-type_plain","title":"variable type_plain","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string type_plain;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-deprecated","title":"variable deprecated","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string deprecated;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-params","title":"variable params","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; param &gt; params;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-template_params_string","title":"variable template_params_string","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string template_params_string;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-template_params","title":"variable template_params","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; param &gt; template_params;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-see","title":"variable see","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; see;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-returns","title":"variable returns","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; returns;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-authors","title":"variable authors","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; authors;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-version","title":"variable version","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; version;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-since","title":"variable since","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; since;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-date","title":"variable date","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; date;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-note","title":"variable note","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; note;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-warning","title":"variable warning","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; warning;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-pre","title":"variable pre","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; pre;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-post","title":"variable post","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; post;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-copyright","title":"variable copyright","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; copyright;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-invariant","title":"variable invariant","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; invariant;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-remark","title":"variable remark","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; remark;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-attention","title":"variable attention","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; attention;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-par","title":"variable par","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; par;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-rcs","title":"variable rcs","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; rcs;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-bugs","title":"variable bugs","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; bugs;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-tests","title":"variable tests","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; tests;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-todos","title":"variable todos","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; std::string &gt; todos;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-param_list","title":"variable param_list","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; node::parameter_list_item &gt; param_list;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-returns_list","title":"variable returns_list","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; node::parameter_list_item &gt; returns_list;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-template_params_list","title":"variable template_params_list","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; node::parameter_list_item &gt; template_params_list;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-exceptions_list","title":"variable exceptions_list","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; node::parameter_list_item &gt; exceptions_list;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-reimplements","title":"variable reimplements","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>node const  * reimplements { nullptr };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-reimplemented_by","title":"variable reimplemented_by","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::vector&lt; node const  * &gt; reimplemented_by;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-program_listing","title":"variable program_listing","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string program_listing;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/","title":"doxybook::node::param","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>struct param;\n</code></pre> <p>A parameter. </p> <p>Description</p> <p>This is used for parameters and template parameters. </p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     type <code>std::string</code> (public variable)   type_plain <code>std::string</code> (public variable)   name <code>std::string</code> (public variable)   def_val <code>std::string</code> (public variable)   def_val_plain <code>std::string</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string type;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-type_plain","title":"variable type_plain","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string type_plain;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-name","title":"variable name","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string name;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-def_val","title":"variable def_val","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string def_val;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-def_val_plain","title":"variable def_val_plain","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string def_val_plain;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/","title":"doxybook::node::parameter_list_item","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>struct parameter_list_item;\n</code></pre> <p>An item in a list of parameters. </p> <p>Description</p> <p>These could be used for parameters, return values, template parameters, and exceptions. </p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     name <code>std::string</code> (public variable)   text <code>std::string</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#variable-name","title":"variable name","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string name;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#variable-text","title":"variable text","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string text;\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/","title":"doxybook::node::source_location","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code></p> <pre><code>struct source_location;\n</code></pre> <p>Source code location. </p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     file <code>std::string</code> (public variable)   line <code>int</code> (public variable)   column <code>int</code> (public variable)   body_file <code>std::string</code> (public variable)   body_start <code>int</code> (public variable)   body_end <code>int</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-file","title":"variable file","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string file;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-line","title":"variable line","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>int line { 0 };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-column","title":"variable column","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>int column { 0 };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_file","title":"variable body_file","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>std::string body_file;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_start","title":"variable body_start","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>int body_start { 0 };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_end","title":"variable body_end","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>int body_end { 0 };\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/","title":"doxybook::text_markdown_printer::list_data","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code></p> <pre><code>struct list_data;\n</code></pre>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     counter <code>int</code> (public variable)   ordered <code>bool</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#variable-counter","title":"variable counter","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>int counter { 0 };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#variable-ordered","title":"variable ordered","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool ordered { false };\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/","title":"doxybook::text_markdown_printer::print_data","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code></p> <pre><code>struct print_data;\n</code></pre>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     ss <code>std::stringstream</code> (public variable)   indent <code>int</code> (public variable)   lists <code>std::list&lt; list_data &gt;</code> (public variable)   quote <code>bool</code> (public variable)   eol <code>bool</code> (public variable)   table_header <code>bool</code> (public variable)   in_computer_output <code>bool</code> (public variable)   valid_link <code>bool</code> (public variable)"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-ss","title":"variable ss","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>std::stringstream ss;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-indent","title":"variable indent","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>int indent { 0 };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-lists","title":"variable lists","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>std::list&lt; list_data &gt; lists;\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-quote","title":"variable quote","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool quote { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-eol","title":"variable eol","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool eol { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-table_header","title":"variable table_header","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool table_header { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-in_computer_output","title":"variable in_computer_output","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool in_computer_output { false };\n</code></pre></p>"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-valid_link","title":"variable valid_link","text":"<p>Defined in header <code>&lt;doxybook/text_markdown_printer.hpp&gt;</code> <pre><code>bool valid_link { false };\n</code></pre></p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/","title":"doxybook::xml_text_parser::node","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code></p> <pre><code>struct node;\n</code></pre> <p>A parsed xml node. </p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-types","title":"Public Types","text":"Member Types Definition     type The node type.  (enum)"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-attributes","title":"Public Attributes","text":"Member Public Attributes Description     type The node type.  (public variable)   children The child nodes.  (public variable)   data The node data as a string.  (public variable)   extra Extra data.  (public variable)"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-types_1","title":"Public Types","text":""},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#enum-type","title":"enum type","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>enum class type;\n</code></pre></p>    Enumerator Value Description     UNKNOWN -1    TEXT 0    PARA     PARAS     BOLD     EMPHASIS     STRIKE     HRULER     IMAGE     ULINK     REF     COMPUTEROUTPUT     LISTITEM     SIMPLESEC     ITEMIZEDLIST     VARIABLELIST     ORDEREDLIST     PARAMETERLIST     PARAMETERNAME     PARAMETERITEM     PARAMETERDESCRIPTION     PARAMETERNAMELIST     XREFSECT     XREFTITLE     XREFDESCRIPTION     PROGRAMLISTING     CODELINE     TERM     VARLISTENTRY     ANCHOR     SP     HIGHTLIGHT     SECT1     SECT2     SECT3     SECT4     SECT5     SECT6     TITLE     SUPERSCRIPT     NONBREAKSPACE     TABLE     TABLE_ROW     TABLE_CELL     VERBATIM     SQUO     NDASH     MDASH     LINEBREAK     ONLYFOR     FORMULA     BLOCKQUOTE      <p>The node type. </p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-attributes_1","title":"Public Attributes","text":""},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-type","title":"variable type","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>type type { type::UNKNOWN };\n</code></pre></p> <p>The node type. </p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-children","title":"variable children","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>std::vector&lt; node &gt; children;\n</code></pre></p> <p>The child nodes. </p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-data","title":"variable data","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>std::string data;\n</code></pre></p> <p>The node data as a string. </p>"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-extra","title":"variable extra","text":"<p>Defined in header <code>&lt;doxybook/xml_text_parser.hpp&gt;</code> <pre><code>std::string extra;\n</code></pre></p> <p>Extra data. </p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/examples/","title":"Examples","text":"Example            <p>Updated on 2023-01-04</p>"},{"location":"reference/files/","title":"Files","text":"File      doxybook (directory)   doxybook/config.hpp (file)   doxybook/default_templates.hpp (file)   doxybook/doxygen.hpp (file)   doxybook/enums.hpp (file)   doxybook/exception.hpp (file)   doxybook/exception_utils.hpp (file)   doxybook/generator.hpp (file)   doxybook/json_converter.hpp (file)   doxybook/node.hpp (file)   doxybook/path.hpp (file)   doxybook/renderer.hpp (file)   doxybook/text_markdown_printer.hpp (file)   doxybook/text_plain_printer.hpp (file)   doxybook/text_printer.hpp (file)   doxybook/utils.hpp (file)   doxybook/xml.hpp (file)   doxybook/xml_text_parser.hpp (file)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/config_8hpp/","title":"doxybook/config.hpp","text":"<pre><code>#include &lt;doxybook/config.hpp&gt;\n</code></pre>"},{"location":"reference/files/config_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/config_8hpp/#classes","title":"Classes","text":"Classes Description     config Configuration for the doxygen and generator classes.  (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/default__templates_8hpp/","title":"doxybook/default_templates.hpp","text":"<pre><code>#include &lt;doxybook/default_templates.hpp&gt;\n</code></pre>"},{"location":"reference/files/default__templates_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/default__templates_8hpp/#classes","title":"Classes","text":"Classes Description     default_template Describe the default template for a page.  (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/dir_be054a2fbefc2d6b92396c28cd6dc939/","title":"doxybook","text":""},{"location":"reference/files/dir_be054a2fbefc2d6b92396c28cd6dc939/#files","title":"Files","text":"Files Description     doxybook/config.hpp    doxybook/default_templates.hpp    doxybook/doxygen.hpp    doxybook/enums.hpp    doxybook/exception.hpp    doxybook/exception_utils.hpp    doxybook/generator.hpp    doxybook/json_converter.hpp    doxybook/node.hpp    doxybook/path.hpp    doxybook/renderer.hpp    doxybook/text_markdown_printer.hpp    doxybook/text_plain_printer.hpp    doxybook/text_printer.hpp    doxybook/utils.hpp    doxybook/xml.hpp    doxybook/xml_text_parser.hpp      <p>Updated on 2023-01-04</p>"},{"location":"reference/files/doxygen_8hpp/","title":"doxybook/doxygen.hpp","text":"<pre><code>#include &lt;doxybook/doxygen.hpp&gt;\n</code></pre>"},{"location":"reference/files/doxygen_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/doxygen_8hpp/#classes","title":"Classes","text":"Classes Description     doxygen All the nodes representing the content of doxygen xml files.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/enums_8hpp/","title":"doxybook/enums.hpp","text":"<pre><code>#include &lt;doxybook/enums.hpp&gt;\n</code></pre>"},{"location":"reference/files/enums_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook      <p>Updated on 2023-01-04</p>"},{"location":"reference/files/exception_8hpp/","title":"doxybook/exception.hpp","text":"<pre><code>#include &lt;doxybook/exception.hpp&gt;\n</code></pre>"},{"location":"reference/files/exception_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/exception_8hpp/#classes","title":"Classes","text":"Classes Description     exception Doxybook exceptions.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/exception__utils_8hpp/","title":"doxybook/exception_utils.hpp","text":"<pre><code>#include &lt;doxybook/exception_utils.hpp&gt;\n</code></pre>  <p>Updated on 2023-01-04</p>"},{"location":"reference/files/generator_8hpp/","title":"doxybook/generator.hpp","text":"<pre><code>#include &lt;doxybook/generator.hpp&gt;\n</code></pre>"},{"location":"reference/files/generator_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/generator_8hpp/#classes","title":"Classes","text":"Classes Description     generator A class that stores a doxygen object and generates the markdown documentation.  (class)   summary_section A section we should generate.  (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/json__converter_8hpp/","title":"doxybook/json_converter.hpp","text":"<pre><code>#include &lt;doxybook/json_converter.hpp&gt;\n</code></pre>"},{"location":"reference/files/json__converter_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/json__converter_8hpp/#classes","title":"Classes","text":"Classes Description     json_converter Convert elements to json so they can be rendered with inja.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/node_8hpp/","title":"doxybook/node.hpp","text":"<pre><code>#include &lt;doxybook/node.hpp&gt;\n</code></pre>"},{"location":"reference/files/node_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/node_8hpp/#classes","title":"Classes","text":"Classes Description     node A doxygen node.  (class)   class_reference A reference to a class.  (struct)   source_location Source code location.  (struct)   param A parameter.  (struct)   parameter_list_item An item in a list of parameters.  (struct)   data The data in a doxygen node.  (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/path_8hpp/","title":"doxybook/path.hpp","text":"<pre><code>#include &lt;doxybook/path.hpp&gt;\n</code></pre>"},{"location":"reference/files/path_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook    doxybook::path      <p>Updated on 2023-01-04</p>"},{"location":"reference/files/renderer_8hpp/","title":"doxybook/renderer.hpp","text":"<pre><code>#include &lt;doxybook/renderer.hpp&gt;\n</code></pre>"},{"location":"reference/files/renderer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/renderer_8hpp/#classes","title":"Classes","text":"Classes Description     renderer Render inja templates with the specified configuration.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/text__markdown__printer_8hpp/","title":"doxybook/text_markdown_printer.hpp","text":"<pre><code>#include &lt;doxybook/text_markdown_printer.hpp&gt;\n</code></pre>"},{"location":"reference/files/text__markdown__printer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/text__markdown__printer_8hpp/#classes","title":"Classes","text":"Classes Description     text_markdown_printer Print xml nodes as markdown.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/text__plain__printer_8hpp/","title":"doxybook/text_plain_printer.hpp","text":"<pre><code>#include &lt;doxybook/text_plain_printer.hpp&gt;\n</code></pre>"},{"location":"reference/files/text__plain__printer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/text__plain__printer_8hpp/#classes","title":"Classes","text":"Classes Description     text_plain_printer Print elements as plain text.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/text__printer_8hpp/","title":"doxybook/text_printer.hpp","text":"<pre><code>#include &lt;doxybook/text_printer.hpp&gt;\n</code></pre>"},{"location":"reference/files/text__printer_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/text__printer_8hpp/#classes","title":"Classes","text":"Classes Description     text_printer An abstract text printer.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/utils_8hpp/","title":"doxybook/utils.hpp","text":"<pre><code>#include &lt;doxybook/utils.hpp&gt;\n</code></pre>"},{"location":"reference/files/utils_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook    doxybook::utils      <p>Updated on 2023-01-04</p>"},{"location":"reference/files/xml_8hpp/","title":"doxybook/xml.hpp","text":"<pre><code>#include &lt;doxybook/xml.hpp&gt;\n</code></pre>"},{"location":"reference/files/xml_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/xml_8hpp/#classes","title":"Classes","text":"Classes Description     xml Represents and wraps an xml node.  (class)   node An xml node.  (class)   element The data of an element nodes.  (class)     <p>Updated on 2023-01-04</p>"},{"location":"reference/files/xml__text__parser_8hpp/","title":"doxybook/xml_text_parser.hpp","text":"<pre><code>#include &lt;doxybook/xml_text_parser.hpp&gt;\n</code></pre>"},{"location":"reference/files/xml__text__parser_8hpp/#namespaces","title":"Namespaces","text":"Name Description     doxybook"},{"location":"reference/files/xml__text__parser_8hpp/#classes","title":"Classes","text":"Classes Description     xml_text_parser Parser for a doxygen xml file as an xml document.  (class)   node A parsed xml node.  (struct)     <p>Updated on 2023-01-04</p>"},{"location":"reference/libraries/","title":"Libraries","text":"Library            <p>Updated on 2023-01-04</p>"},{"location":"reference/namespaces/","title":"Namespaces","text":"Namespace      doxybook (namespace)   path (namespace)   utils (namespace)     <p>Updated on 2023-01-04</p>"},{"location":"reference/namespaces/namespacedoxybook/","title":"doxybook","text":""},{"location":"reference/namespaces/namespacedoxybook/#namespaces","title":"Namespaces","text":"Name Description     doxybook::path    doxybook::utils"},{"location":"reference/namespaces/namespacedoxybook/#classes","title":"Classes","text":"Classes Description     config Configuration for the doxygen and generator classes.  (struct)   default_template Describe the default template for a page.  (struct)   doxygen All the nodes representing the content of doxygen xml files.  (class)   exception Doxybook exceptions.  (class)   generator A class that stores a doxygen object and generates the markdown documentation.  (class)   json_converter Convert elements to json so they can be rendered with inja.  (class)   node A doxygen node.  (class)   renderer Render inja templates with the specified configuration.  (class)   text_markdown_printer Print xml nodes as markdown.  (class)   text_plain_printer Print elements as plain text.  (class)   text_printer An abstract text printer.  (class)   xml Represents and wraps an xml node.  (class)   xml_text_parser Parser for a doxygen xml file as an xml document.  (class)"},{"location":"reference/namespaces/namespacedoxybook/#types","title":"Types","text":"Member Types Definition     kind The kind of a symbol in a doxygen xml file.  (enum)   visibility Types of symbol visibility.  (enum)   virtual_category Types of virtual functions.  (enum)   type Doxygen types.  (enum)   folder_category Types of folder category.  (enum)   node_cache_map A map of nodes associated to a string.  (using)"},{"location":"reference/namespaces/namespacedoxybook/#functions","title":"Functions","text":"Member Functions Description     load_config Load configuration from a path.  (function)   load_config_data Load configuration from a json string.  (function)   save_config Save configuration to a path.  (function)   save_default_templates Save default templates.  (function)   to_enum_kind Convert a string to a doxygen kind.  (function)   to_enum_type Convert a string to a doxygen type.  (function)   to_enum_visibility Convert a string to a doxygen visibility type.  (function)   to_enum_virtual Convert a string to a doxygen virtual category.  (function)   to_enum_folder_category Convert a string to a doxygen folder category.  (function)   to_str Convert a kind to a string.  (function)   kind_to_type Convert a kind to a type.  (function)   is_kind_language Determine if kind is a language feature.  (function)   is_kind_structured Determine if kind is a structured type.  (function)   is_kind_file Determine if kind is a file or directory.  (function)   type_folder_category_to_folder_name Determine the appropriate folder name for a folder category.  (function)   type_to_folder_name Determine the appropriate folder name for a type.  (function)   type_to_index_name Determine the appropriate index file name for a folder category.  (function)   type_to_index_template Determine the appropriate index template file name for a folder category.  (function)   type_to_index_title Determine the appropriate index title name for a folder category.  (function)   to_json Convert a visibility type to a json string.  (function)   from_json Convert a json string to a visibility type.  (function)"},{"location":"reference/namespaces/namespacedoxybook/#attributes","title":"Attributes","text":"Member Attributes Description     default_templates A map with all the default templates.  (public variable)"},{"location":"reference/namespaces/namespacedoxybook/#types_1","title":"Types","text":""},{"location":"reference/namespaces/namespacedoxybook/#enum-kind","title":"enum kind","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code> <pre><code>enum class kind;\n</code></pre></p>    Enumerator Value Description     INDEX     DEFINE     CLASS     NAMESPACE     STRUCT     INTERFACE     FUNCTION     VARIABLE     CONCEPT     TYPEDEF     USING     FRIEND     ENUM     ENUMVALUE     UNION     DIR     FILE     MODULE     PAGE     EXAMPLE     SIGNAL     SLOT     PROPERTY     EVENT     JAVAENUM     JAVAENUMCONSTANT      <p>The kind of a symbol in a doxygen xml file. </p>"},{"location":"reference/namespaces/namespacedoxybook/#enum-visibility","title":"enum visibility","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code> <pre><code>enum class visibility;\n</code></pre></p>    Enumerator Value Description     PUBLIC     PROTECTED     PRIVATE     PACKAGE      <p>Types of symbol visibility. </p>"},{"location":"reference/namespaces/namespacedoxybook/#enum-virtual_category","title":"enum virtual_category","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code> <pre><code>enum class virtual_category;\n</code></pre></p>    Enumerator Value Description     NON_VIRTUAL     VIRTUAL     PURE_VIRTUAL      <p>Types of virtual functions. </p>"},{"location":"reference/namespaces/namespacedoxybook/#enum-type","title":"enum type","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code> <pre><code>enum class type;\n</code></pre></p>    Enumerator Value Description     NONE     DEFINES     FUNCTIONS     NAMESPACES     CLASSES     ATTRIBUTES     TYPES     DIRS     FILES     MODULES     FRIENDS     PAGES     EXAMPLES     SIGNALS     SLOTS     EVENTS     PROPERTIES     JAVAENUMCONSTANTS      <p>Doxygen types. </p>"},{"location":"reference/namespaces/namespacedoxybook/#enum-folder_category","title":"enum folder_category","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code> <pre><code>enum class folder_category;\n</code></pre></p>    Enumerator Value Description     CLASSES     NAMESPACES     MODULES     PAGES     FILES     EXAMPLES      <p>Types of folder category. </p>"},{"location":"reference/namespaces/namespacedoxybook/#using-node_cache_map","title":"using node_cache_map","text":"<p>Defined in header <code>&lt;doxybook/node.hpp&gt;</code> <pre><code>using node_cache_map = \n    std::unordered_map&lt; std::string, std::shared_ptr&lt; node &gt; &gt;;\n</code></pre></p> <p>A map of nodes associated to a string. </p>"},{"location":"reference/namespaces/namespacedoxybook/#functions_1","title":"Functions","text":""},{"location":"reference/namespaces/namespacedoxybook/#function-load_config","title":"function load_config","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code></p> <pre><code>void\nload_config(config &amp; config, std::string const &amp; path);\n</code></pre> <p>Load configuration from a path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-load_config_data","title":"function load_config_data","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code></p> <pre><code>void\nload_config_data(config &amp; config, std::string_view src);\n</code></pre> <p>Load configuration from a json string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-save_config","title":"function save_config","text":"<p>Defined in header <code>&lt;doxybook/config.hpp&gt;</code></p> <pre><code>void\nsave_config(config &amp; config, std::string const &amp; path);\n</code></pre> <p>Save configuration to a path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-save_default_templates","title":"function save_default_templates","text":"<p>Defined in header <code>&lt;doxybook/default_templates.hpp&gt;</code></p> <pre><code>void\nsave_default_templates(std::string const &amp; path);\n</code></pre> <p>Save default templates. </p> <p>Description</p> <p>This function stores all the default templates to files. The user can edit these templates to come up with new templates. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_kind","title":"function to_enum_kind","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>kind\nto_enum_kind(std::string const &amp; str);\n</code></pre> <p>Convert a string to a doxygen kind. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_type","title":"function to_enum_type","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>type\nto_enum_type(std::string const &amp; str);\n</code></pre> <p>Convert a string to a doxygen type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_visibility","title":"function to_enum_visibility","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>visibility\nto_enum_visibility(std::string const &amp; str);\n</code></pre> <p>Convert a string to a doxygen visibility type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_virtual","title":"function to_enum_virtual","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>virtual_category\nto_enum_virtual(std::string const &amp; str);\n</code></pre> <p>Convert a string to a doxygen virtual category. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_folder_category","title":"function to_enum_folder_category","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>folder_category\nto_enum_folder_category(std::string const &amp; str);\n</code></pre> <p>Convert a string to a doxygen folder category. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_str","title":"function to_str","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> (1)<pre><code>std::string\nto_str(kind value);\n</code></pre> (2)<pre><code>std::string\nto_str(type value);\n</code></pre> (3)<pre><code>std::string\nto_str(visibility value);\n</code></pre> (4)<pre><code>std::string\nto_str(virtual_category value);\n</code></pre> (5)<pre><code>std::string\nto_str(folder_category value);\n</code></pre> <ol> <li>Convert a kind to a string. </li> <li>Convert a type to a string. </li> <li>Convert a visibility to a string. </li> <li>Convert a virtual_category to a string. </li> <li>Convert a folder_category to a string. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-kind_to_type","title":"function kind_to_type","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>type\nkind_to_type(kind kind);\n</code></pre> <p>Convert a kind to a type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_language","title":"function is_kind_language","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>bool\nis_kind_language(kind kind);\n</code></pre> <p>Determine if kind is a language feature. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_structured","title":"function is_kind_structured","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>bool\nis_kind_structured(kind kind);\n</code></pre> <p>Determine if kind is a structured type. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_file","title":"function is_kind_file","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>bool\nis_kind_file(kind kind);\n</code></pre> <p>Determine if kind is a file or directory. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-type_folder_category_to_folder_name","title":"function type_folder_category_to_folder_name","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>std::string\ntype_folder_category_to_folder_name(config const &amp; config, folder_category type);\n</code></pre> <p>Determine the appropriate folder name for a folder category. </p> <p>Return value</p> <p>The folder name </p> <p>Description</p> <p>Get the appropriate folder name in the configuration file for the specified folder category.</p> <p>Not all types have corresponding folder categories.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_folder_name","title":"function type_to_folder_name","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>std::string\ntype_to_folder_name(config const &amp; config, type type);\n</code></pre> <p>Determine the appropriate folder name for a type. </p> <p>Return value</p> <p>The folder name </p> <p>Description</p> <p>Get the appropriate folder name in the configuration file for the specified type.</p> <p>Not all types have corresponding folder categories.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_name","title":"function type_to_index_name","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>std::string\ntype_to_index_name(config const &amp; config, folder_category type);\n</code></pre> <p>Determine the appropriate index file name for a folder category. </p> <p>Return value</p> <p>The folder name </p> <p>Description</p> <p>Get the appropriate index file name in the configuration file for the specified folder category.</p> <p>Not all types have corresponding folder categories.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_template","title":"function type_to_index_template","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>std::string\ntype_to_index_template(config const &amp; config, folder_category type);\n</code></pre> <p>Determine the appropriate index template file name for a folder category. </p> <p>Return value</p> <p>The folder name </p> <p>Description</p> <p>Get the appropriate template file name in the configuration file for the specified folder category.</p> <p>Not all types have corresponding folder categories.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_title","title":"function type_to_index_title","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> <pre><code>std::string\ntype_to_index_title(config const &amp; config, folder_category type);\n</code></pre> <p>Determine the appropriate index title name for a folder category. </p> <p>Return value</p> <p>The folder name </p> <p>Description</p> <p>Get the appropriate index title name in the configuration file for the specified folder category.</p> <p>Not all types have corresponding folder categories.</p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-to_json","title":"function to_json","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> (1)<pre><code>void\nto_json(nlohmann::json &amp; j, visibility const &amp; p);\n</code></pre> (2)<pre><code>void\nto_json(nlohmann::json &amp; j, folder_category const &amp; p);\n</code></pre> <ol> <li>Convert a visibility type to a json string. </li> <li>Convert a folder category to a json string. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#function-from_json","title":"function from_json","text":"<p>Defined in header <code>&lt;doxybook/enums.hpp&gt;</code></p> (1)<pre><code>void\nfrom_json(nlohmann::json const &amp; j, visibility &amp; p);\n</code></pre> (2)<pre><code>void\nfrom_json(nlohmann::json const &amp; j, folder_category &amp; p);\n</code></pre> <ol> <li>Convert a json string to a visibility type. </li> <li>Convert a json string to a folder category. </li> </ol> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook/#attributes_1","title":"Attributes","text":""},{"location":"reference/namespaces/namespacedoxybook/#variable-default_templates","title":"variable default_templates","text":"<p>Defined in header <code>&lt;doxybook/default_templates.hpp&gt;</code> <pre><code>std::unordered_map&lt; std::string, default_template &gt; default_templates;\n</code></pre></p> <p>A map with all the default templates. </p> <p>Description</p> <p>Unless template files are provided, these templates are used. </p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1path/","title":"doxybook::path","text":""},{"location":"reference/namespaces/namespacedoxybook_1_1path/#functions","title":"Functions","text":"Member Functions Description     join Join string arguments as a path.  (function template)   filename Get the filename from a path string.  (function)"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#functions_1","title":"Functions","text":""},{"location":"reference/namespaces/namespacedoxybook_1_1path/#function-join","title":"function join","text":"<p>Defined in header <code>&lt;doxybook/path.hpp&gt;</code></p> <pre><code>template &lt;typename... Args&gt;\nstd::string\njoin(Args const &amp;... args);\n</code></pre> <p>Join string arguments as a path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#function-filename","title":"function filename","text":"<p>Defined in header <code>&lt;doxybook/path.hpp&gt;</code></p> <pre><code>std::string\nfilename(std::string const &amp; path);\n</code></pre> <p>Get the filename from a path string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/","title":"doxybook::utils","text":""},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#functions","title":"Functions","text":"Member Functions Description     join Join string arguments as a path.  (function template)   filename Get the filename from a path string.  (function)   escape Escape a string.  (function)   title Capitalize string.  (function)   to_lower Convert string to lowercase.  (function)   safe_anchor_id Create a safe anchor for a string.  (function)   namespace_to_package Convert a namespace string to a package string.  (function)   date Get current date as a string.  (function)   strip_namespace Strip namespace from symbol.  (function)   strip_anchor Strip anchors from a string.  (function)   split Split string with the specified delimiter.  (function)   create_directory Create a directory.  (function)   normalize_language Normalize the language name.  (function)   replace_newline Replace newlines with whitespaces.  (function)"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#functions_1","title":"Functions","text":""},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-join","title":"function join","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>template &lt;typename... Args&gt;\nstd::string\njoin(Args const &amp;... args);\n</code></pre> <p>Join string arguments as a path. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-filename","title":"function filename","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nfilename(std::string const &amp; path);\n</code></pre> <p>Get the filename from a path string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-escape","title":"function escape","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nescape(std::string str);\n</code></pre> <p>Escape a string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-title","title":"function title","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\ntitle(std::string str);\n</code></pre> <p>Capitalize string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-to_lower","title":"function to_lower","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nto_lower(std::string str);\n</code></pre> <p>Convert string to lowercase. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-safe_anchor_id","title":"function safe_anchor_id","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nsafe_anchor_id(std::string str, bool replace_underscores);\n</code></pre> <p>Create a safe anchor for a string. </p> <p>Parameters</p> <ul> <li>replace_underscores - replaces underscores with hyphens </li> <li>str - string to convert </li> </ul> <p>Return value</p> <p>converted string </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-namespace_to_package","title":"function namespace_to_package","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nnamespace_to_package(std::string str);\n</code></pre> <p>Convert a namespace string to a package string. </p> <p>Description</p> <p>This replaces all occurences of \"::\" with \".\" </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-date","title":"function date","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\ndate(std::string const &amp; format);\n</code></pre> <p>Get current date as a string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-strip_namespace","title":"function strip_namespace","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nstrip_namespace(std::string const &amp; format);\n</code></pre> <p>Strip namespace from symbol. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-strip_anchor","title":"function strip_anchor","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nstrip_anchor(std::string const &amp; str);\n</code></pre> <p>Strip anchors from a string. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-split","title":"function split","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::vector&lt; std::string &gt;\nsplit(std::string const &amp; str, std::string const &amp; delim);\n</code></pre> <p>Split string with the specified delimiter. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-create_directory","title":"function create_directory","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>void\ncreate_directory(std::string const &amp; path);\n</code></pre> <p>Create a directory. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-normalize_language","title":"function normalize_language","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nnormalize_language(std::string const &amp; language);\n</code></pre> <p>Normalize the language name. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-replace_newline","title":"function replace_newline","text":"<p>Defined in header <code>&lt;doxybook/utils.hpp&gt;</code></p> <pre><code>std::string\nreplace_newline(std::string str);\n</code></pre> <p>Replace newlines with whitespaces. </p> <p>Exception Safety</p> <p>Basic exception guarantee.</p>  <p>Updated on 2023-01-04</p>"},{"location":"reference/pages/","title":"Pages","text":"Page            <p>Updated on 2023-01-04</p>"}]}