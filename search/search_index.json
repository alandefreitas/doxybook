{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doxygen XML to Markdown Generate beautiful C++ documentation by converting Doxygen XML output into markdown pages via MkDocs , Hugo , VuePress , GitBook , Docsify , or your custom generator. Also comes with an optional templating mechanism and extensive configuration file.","title":"Home"},{"location":"acknowledgments/","text":"Acknowledgments Contributors Alan De Freitas Matus Novak Bryce Adelstein Lelbach Aka Wash Amir Masoud Abdol Hongxu Xu Leon Matthes Michael Beckemeyer Ren\u00e9 Evan Flynn Szekely Gyorgy Nicolas Jarnoux Blue Santa Tobias Erbsh\u00e4u\u00dfer Alexander","title":"Acknowledgments"},{"location":"acknowledgments/#acknowledgments","text":"","title":"Acknowledgments"},{"location":"acknowledgments/#contributors","text":"Alan De Freitas Matus Novak Bryce Adelstein Lelbach Aka Wash Amir Masoud Abdol Hongxu Xu Leon Matthes Michael Beckemeyer Ren\u00e9 Evan Flynn Szekely Gyorgy Nicolas Jarnoux Blue Santa Tobias Erbsh\u00e4u\u00dfer Alexander","title":"Contributors"},{"location":"config/","text":"Configuration Files All of the GitBook, MkDocs, VuePress, Hugo, Docsify static site generators are slightly different. For example, GitBook resolves markdown links at compile time and they have to end with .md , however MkDocs requires the links to end with a forward slash / . Using the config you can override this behavior. Only the properties you specify in this JSON file will be overwritten in the application. The properties you do not specify in this config will use the default value instead. Generate config template You can create a config file by running: doxybook --generate-config /some/path/to/config.json This will generate config file with all available properties with their default values. Note that the folder in which you want the config.json to be generated must exist. If the file config.json already exists, it will be overwritten. You can remove any properties in the config json and leave only the ones you need to override. See the section \"Config values\" below to see the default values. Usage Properties not specified in this config.json file will be loaded with the default value. You can specify only properties you want to override. Empty config file is also valid. To use the config file when generating markdown files do the following: doxybook --input ... --output ... --config /some/path/to/config.json Examples Sample config files are provided in the examples folder for each generator and theme used. The config is stored in a .doxybook folder. This may not be directly visible by your OS. Show hidden folders to see it. The following config files are provided: Hugo + Learn theme Hugo + Book theme MkDocs + ReadTheDocs theme MkDocs + Material theme MkDocs + Bootswatch theme GitBook + default theme { \"baseUrl\" : \"/doxybook/hugo-learn/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } { \"baseUrl\" : \"/doxybook/hugo-book/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } { \"baseUrl\" : \"/doxybook/mkdocs-readthedocs/\" , \"indexInFolders\" : false , \"linkSuffix\" : \"/\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/doxybook/mkdocs-material/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/doxybook/mkdocs-bootswatch/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/\" , \"indexInFolders\" : true , \"linkSuffix\" : \".md\" , \"linkLowercase\" : false , \"indexClassesName\" : \"README\" , \"indexFilesName\" : \"README\" , \"indexGroupsName\" : \"README\" , \"indexNamespacesName\" : \"README\" , \"indexRelatedPagesName\" : \"README\" , \"indexExamplesName\" : \"README\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"README\" } NOTE: The configuration json files for MkDocs have a base url_ set, for example \"base_url\": \"/doxybook/mkdocs-bootswatch/\" . This is needed for publishing documentation from this repository to gh-pages. If you want to run the MkDocs examples locally, make sure you change the base_url to / as \"base_url\": \"/\" ! If you don't change that, you will get 404. Otherwise start a http server with a /doxybook/mkdocs-bootswatch prefix. Options The following is a list of config properties, their default value, and description. JSON Key Default Value Description copy_images true Automatically copy images added into doxygen documentation via @image . These images will be copied into folder defined by images_folder sort false Sort everything alphabetically. If set to false, the order will stay the same as the order in the Doxygen XML files. images_folder \"images\" Name of the folder where to copy images. This folder will be automatically created in the output path defined by --output . Leave this empty_ string if you want all of the images to be stored in the root directory (the output directory). link_lowercase false Convert all markdown links (only links to other markdown files, the C++ related stuff) into lowercase format. Hugo need this to set to true . link_and_inline_code_as_html false Output links as HTML tags and inline code as tags instead of Markdown. If your generated Markdown has links inside of inline code, set this to true to correctly render the links. index_in_folders false Part of the generated markdown output are extra index_ files. These are more of a list of classes, namespaces, modules, etc. By default these are stored in the root directory (the output diectory). Set to true if you want them to be generated in their respective folders (i.e. class index_ in Classes folder, etc.) main_page_in_root false If a mainpage is defined by Doxygen, then this file will be generated in Pages/mainpage.md path. If you want to make it into index_.md as the root of your website, then set this to true with main_page_name set to \"index_\" . main_page_name \"indexpage\" If a mainpage is defined by Doxygen, then this file will be saved as indexpage . base_url \"\" A prefix to put in front of all markdown links (only links to other markdown files). See link_lowercase and link_suffix as well. Note hat MkDocs and Hugo will need explicit base_url while GitBook uses no base url_. VuePress needs this set to / . link_suffix \".md\" The suffix to put after all of the markdown links (only links to other markdown files). If using GitBook, leave this to \".md\" , but MkDocs and Hugo needs \"/\" instead. file_extension \"md\" The file extension to use when generating markdown files. files_filter [] This will filter which files are allowed to be in the output. For example, an array of [\".hpp\", \".h\"] will allow only the files that have file extensions .hpp or .h . When this is empty_ (by default) then all files are allowed in the output. This also affects --json type of output. This does not filter which classes/functions/etc should be extracted from the source files! (For that, use Doxygen's FILE_PATTERNS ) This only affects listing of those files in the output! foldersToGenerate [\"modules\", \"classes\", \"files\", \"pages\", \"namespaces\", \"examples\"] List of folders to create. You can use this to skip generation of some folders, for example you don't want examples then remove it from the array. Note, this does not change the name_ of the folders that will be generated, this only enables them. This is an enum and must be lower case. If you do not set this value in your JSON config file then all of the folders are created. An empty_ array will not generate anything at all.' replaceUnderscoresInAnchors true Replace '_' with '-' in anchors. The following are a list of config properties that specify the names of the folders. Each folder holds specific group_ of C++ stuff. Note that the Classes folder also holds interfaces, structs, and unions. JSON Key Default Value folder_groups_name \"Modules\" folder_classes_name \"Classes\" folder_files_name \"Files\" folder_related_pages_name \"Pages\" folder_namespaces_name \"Namespaces\" folder_examples_name \"Examples\" The following is a list of config properties that specify the filenames of the indexes. For example, an index_/list of all classes will use index_classes filename followed by file_extension extension name_. JSON Key Default Value index_groups_name \"index_groups\" index_classes_name \"index_classes\" index_files_name \"index_files\" index_related_pages_name \"index_pages\" index_namespaces_name \"index_namespaces\" index_examples_name \"index_examples\" The following are config properties that specify what template to use for each specific C++ kind_. A kind_ is just a type of the C++ thing (class, namespace, etc.). This also includes properties for files, directories, pages, and modules ( alias groups). These templates can be overwritten via --templates /path/to/templates-folder . JSON Key Default Value template_kind_class \"kind_class\" template_kind_struct \"kind_class\" template_kind_union \"kind_class\" template_kind_interface \"kind_class\" template_kind_namespace \"kind_nonclass\" template_kind_group \"kind_nonclass\" template_kind_file \"kind_file\" template_kind_dir \"kind_file\" template_kind_page \"kind_page\" template_kind_example \"kind_example\" Same as above, but these are related to the index_/list files. JSON Key Default Value template_index_classes \"index_classes\" template_index_namespaces \"index_namespaces\" template_index_groups \"index_groups\" template_index_files \"index_files\" template_index_related_pages \"index_pages\" template_index_examples \"index_examples\" These properties define the title_ to use in the templates specified above. JSON Key Default Value index_classes_title \"Classes\" index_namespaces_title \"Namespaces\" index_groups_title \"Modules\" index_files_title \"Files\" index_related_pages_title \"Pages\" index_examples_title \"Examples\" These properties modify how Latex formulas should be generated. JSON Key Default Value Description formulaInlineStart \"\\\\(\" The string to prepend the inline formula with in Markdown. formulaInlineEnd \"\\\\)\" The string to append the inline formula with in Markdown. formulaBlockStart \"\\\\[\" The string to prepend the block formula with in Markdown. formulaBlockEnd \"\\\\]\" The string to append the block formula with in Markdown. Latex formulas Mkdocs can properly display these formulas for you. Read the mathjax documentation for mkdocs to understand how to enable it. An example of this has been provided in the doxybook/examples/src/Engine.hpp file at the bottom. It can be viewed online in the mkdocs-readthedocs demo (Section \"Inline formula\" and \"Block formula\"). Double check you config for properties of formulaInlineStart/End and formulaBlockStart/End . You may need to modify them to match the Markdown formula render you are using. For example, the following comment block: /** * The distance between \\f$(x_1,y_1)\\f$ and \\f$(x_2,y_2)\\f$ is * \\f$\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\f$. */ Will be generated as the following Markdown: The distance between \\((x_1,y_1)\\) and \\((x_2,y_2)\\) is \\(\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\).","title":"Configuration Files"},{"location":"config/#configuration-files","text":"All of the GitBook, MkDocs, VuePress, Hugo, Docsify static site generators are slightly different. For example, GitBook resolves markdown links at compile time and they have to end with .md , however MkDocs requires the links to end with a forward slash / . Using the config you can override this behavior. Only the properties you specify in this JSON file will be overwritten in the application. The properties you do not specify in this config will use the default value instead.","title":"Configuration Files"},{"location":"config/#generate-config-template","text":"You can create a config file by running: doxybook --generate-config /some/path/to/config.json This will generate config file with all available properties with their default values. Note that the folder in which you want the config.json to be generated must exist. If the file config.json already exists, it will be overwritten. You can remove any properties in the config json and leave only the ones you need to override. See the section \"Config values\" below to see the default values.","title":"Generate config template"},{"location":"config/#usage","text":"Properties not specified in this config.json file will be loaded with the default value. You can specify only properties you want to override. Empty config file is also valid. To use the config file when generating markdown files do the following: doxybook --input ... --output ... --config /some/path/to/config.json","title":"Usage"},{"location":"config/#examples","text":"Sample config files are provided in the examples folder for each generator and theme used. The config is stored in a .doxybook folder. This may not be directly visible by your OS. Show hidden folders to see it. The following config files are provided: Hugo + Learn theme Hugo + Book theme MkDocs + ReadTheDocs theme MkDocs + Material theme MkDocs + Bootswatch theme GitBook + default theme { \"baseUrl\" : \"/doxybook/hugo-learn/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } { \"baseUrl\" : \"/doxybook/hugo-book/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } { \"baseUrl\" : \"/doxybook/mkdocs-readthedocs/\" , \"indexInFolders\" : false , \"linkSuffix\" : \"/\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/doxybook/mkdocs-material/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/doxybook/mkdocs-bootswatch/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } { \"baseUrl\" : \"/\" , \"indexInFolders\" : true , \"linkSuffix\" : \".md\" , \"linkLowercase\" : false , \"indexClassesName\" : \"README\" , \"indexFilesName\" : \"README\" , \"indexGroupsName\" : \"README\" , \"indexNamespacesName\" : \"README\" , \"indexRelatedPagesName\" : \"README\" , \"indexExamplesName\" : \"README\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"README\" } NOTE: The configuration json files for MkDocs have a base url_ set, for example \"base_url\": \"/doxybook/mkdocs-bootswatch/\" . This is needed for publishing documentation from this repository to gh-pages. If you want to run the MkDocs examples locally, make sure you change the base_url to / as \"base_url\": \"/\" ! If you don't change that, you will get 404. Otherwise start a http server with a /doxybook/mkdocs-bootswatch prefix.","title":"Examples"},{"location":"config/#options","text":"The following is a list of config properties, their default value, and description. JSON Key Default Value Description copy_images true Automatically copy images added into doxygen documentation via @image . These images will be copied into folder defined by images_folder sort false Sort everything alphabetically. If set to false, the order will stay the same as the order in the Doxygen XML files. images_folder \"images\" Name of the folder where to copy images. This folder will be automatically created in the output path defined by --output . Leave this empty_ string if you want all of the images to be stored in the root directory (the output directory). link_lowercase false Convert all markdown links (only links to other markdown files, the C++ related stuff) into lowercase format. Hugo need this to set to true . link_and_inline_code_as_html false Output links as HTML tags and inline code as tags instead of Markdown. If your generated Markdown has links inside of inline code, set this to true to correctly render the links. index_in_folders false Part of the generated markdown output are extra index_ files. These are more of a list of classes, namespaces, modules, etc. By default these are stored in the root directory (the output diectory). Set to true if you want them to be generated in their respective folders (i.e. class index_ in Classes folder, etc.) main_page_in_root false If a mainpage is defined by Doxygen, then this file will be generated in Pages/mainpage.md path. If you want to make it into index_.md as the root of your website, then set this to true with main_page_name set to \"index_\" . main_page_name \"indexpage\" If a mainpage is defined by Doxygen, then this file will be saved as indexpage . base_url \"\" A prefix to put in front of all markdown links (only links to other markdown files). See link_lowercase and link_suffix as well. Note hat MkDocs and Hugo will need explicit base_url while GitBook uses no base url_. VuePress needs this set to / . link_suffix \".md\" The suffix to put after all of the markdown links (only links to other markdown files). If using GitBook, leave this to \".md\" , but MkDocs and Hugo needs \"/\" instead. file_extension \"md\" The file extension to use when generating markdown files. files_filter [] This will filter which files are allowed to be in the output. For example, an array of [\".hpp\", \".h\"] will allow only the files that have file extensions .hpp or .h . When this is empty_ (by default) then all files are allowed in the output. This also affects --json type of output. This does not filter which classes/functions/etc should be extracted from the source files! (For that, use Doxygen's FILE_PATTERNS ) This only affects listing of those files in the output! foldersToGenerate [\"modules\", \"classes\", \"files\", \"pages\", \"namespaces\", \"examples\"] List of folders to create. You can use this to skip generation of some folders, for example you don't want examples then remove it from the array. Note, this does not change the name_ of the folders that will be generated, this only enables them. This is an enum and must be lower case. If you do not set this value in your JSON config file then all of the folders are created. An empty_ array will not generate anything at all.' replaceUnderscoresInAnchors true Replace '_' with '-' in anchors. The following are a list of config properties that specify the names of the folders. Each folder holds specific group_ of C++ stuff. Note that the Classes folder also holds interfaces, structs, and unions. JSON Key Default Value folder_groups_name \"Modules\" folder_classes_name \"Classes\" folder_files_name \"Files\" folder_related_pages_name \"Pages\" folder_namespaces_name \"Namespaces\" folder_examples_name \"Examples\" The following is a list of config properties that specify the filenames of the indexes. For example, an index_/list of all classes will use index_classes filename followed by file_extension extension name_. JSON Key Default Value index_groups_name \"index_groups\" index_classes_name \"index_classes\" index_files_name \"index_files\" index_related_pages_name \"index_pages\" index_namespaces_name \"index_namespaces\" index_examples_name \"index_examples\" The following are config properties that specify what template to use for each specific C++ kind_. A kind_ is just a type of the C++ thing (class, namespace, etc.). This also includes properties for files, directories, pages, and modules ( alias groups). These templates can be overwritten via --templates /path/to/templates-folder . JSON Key Default Value template_kind_class \"kind_class\" template_kind_struct \"kind_class\" template_kind_union \"kind_class\" template_kind_interface \"kind_class\" template_kind_namespace \"kind_nonclass\" template_kind_group \"kind_nonclass\" template_kind_file \"kind_file\" template_kind_dir \"kind_file\" template_kind_page \"kind_page\" template_kind_example \"kind_example\" Same as above, but these are related to the index_/list files. JSON Key Default Value template_index_classes \"index_classes\" template_index_namespaces \"index_namespaces\" template_index_groups \"index_groups\" template_index_files \"index_files\" template_index_related_pages \"index_pages\" template_index_examples \"index_examples\" These properties define the title_ to use in the templates specified above. JSON Key Default Value index_classes_title \"Classes\" index_namespaces_title \"Namespaces\" index_groups_title \"Modules\" index_files_title \"Files\" index_related_pages_title \"Pages\" index_examples_title \"Examples\" These properties modify how Latex formulas should be generated. JSON Key Default Value Description formulaInlineStart \"\\\\(\" The string to prepend the inline formula with in Markdown. formulaInlineEnd \"\\\\)\" The string to append the inline formula with in Markdown. formulaBlockStart \"\\\\[\" The string to prepend the block formula with in Markdown. formulaBlockEnd \"\\\\]\" The string to append the block formula with in Markdown.","title":"Options"},{"location":"config/#latex-formulas","text":"Mkdocs can properly display these formulas for you. Read the mathjax documentation for mkdocs to understand how to enable it. An example of this has been provided in the doxybook/examples/src/Engine.hpp file at the bottom. It can be viewed online in the mkdocs-readthedocs demo (Section \"Inline formula\" and \"Block formula\"). Double check you config for properties of formulaInlineStart/End and formulaBlockStart/End . You may need to modify them to match the Markdown formula render you are using. For example, the following comment block: /** * The distance between \\f$(x_1,y_1)\\f$ and \\f$(x_2,y_2)\\f$ is * \\f$\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\f$. */ Will be generated as the following Markdown: The distance between \\((x_1,y_1)\\) and \\((x_2,y_2)\\) is \\(\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}\\).","title":"Latex formulas"},{"location":"contributing/","text":"Contributing Guidelines \ud83d\udcd0 Discussions : Discussions are concentrated on our GitHub discussions page. Don't refrain from asking questions and proposing ideas. If this library helps you create something interesting, please divulge it with the community. Sharing Ideas : If you are a programmer with good ideas, please share these ideas with us. Academic collaboration is more than welcome. It'd be great to see this library help people write papers. Developer mode \ud83d\udc68\u200d\ud83d\udcbb Build system targets that are only useful for developers of this project are hidden if the DOXYBOOK_DEVELOPER_MODE CMake option is disabled. Enabling this option makes tests and other developer targets and options available. Not enabling this option means that you are a consumer of this project, and thus you have no need for these targets and options. CMake Developer Options The following options are available only when building the library in developer mode: Option Description Default DOXYBOOK_DEVELOPER_MODE Enable developer mode OFF BUILD_SHARED_LIBS Build shared libs. OFF DOXYBOOK_BUILD_TESTS Build tests ON DOXYBOOK_BUILD_SINGLE_TARGET_TESTS Build tests OFF DOXYBOOK_BUILD_EXAMPLES Build examples ON DOXYBOOK_BUILD_DOCS Build documentation ON DOXYBOOK_BUILD_COVERAGE_REPORT Enable coverage support OFF DOXYBOOK_BUILD_LINT Enable linting OFF DOXYBOOK_PEDANTIC_WARNINGS Use pedantic warnings. ON DOXYBOOK_WARNINGS_AS_ERRORS Treat warnings as errors. ON DOXYBOOK_SANITIZERS Build with sanitizers. ON if compiling in Debug mode DOXYBOOK_CATCH2_REPORTER Reporter Catch2 should use when invoked from ctest. console DOXYBOOK_TIME_TRACE Enable clang time-trace. ON DOXYBOOK_BUILD_WITH_UTF8 Accept utf-8 in MSVC by default. ON PRs \ud83d\udca1 Feel free to contribute new features to this library. For complex features and changes, consider getting feedback from the community first. Contributing to an existing code base with its conventions might seem obscure at first but please don't let that discourage you from sharing your ideas. There are many ways in which you can contribute to this library: Testing the library in new environments see 1 , 2 , 3 Contributing with interesting examples see 1 Finding problems in this documentation see 1 Finding bugs in general see 1 , 2 , 3 , 4 Whatever idea seems interesting to you Constructive contributions The only thing we ask you is to make sure your contribution is not destructive. Some contributions in which we are not interested are: \"I don't like this optional feature, so I removed/deprecated it\" \"I removed this feature to support older versions of C++\" but have not provided an equivalent alternative \"I removed this feature, so I don't have to install/update ______\" but have not provided an equivalent alternative \"I'm creating this high-cost promise that we'll support _ _ forever\" but I'm not sticking around to keep that promise In doubt, please open a discussion first","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#guidelines","text":"Discussions : Discussions are concentrated on our GitHub discussions page. Don't refrain from asking questions and proposing ideas. If this library helps you create something interesting, please divulge it with the community. Sharing Ideas : If you are a programmer with good ideas, please share these ideas with us. Academic collaboration is more than welcome. It'd be great to see this library help people write papers.","title":"Guidelines \ud83d\udcd0"},{"location":"contributing/#developer-mode","text":"Build system targets that are only useful for developers of this project are hidden if the DOXYBOOK_DEVELOPER_MODE CMake option is disabled. Enabling this option makes tests and other developer targets and options available. Not enabling this option means that you are a consumer of this project, and thus you have no need for these targets and options.","title":"Developer mode \ud83d\udc68\u200d\ud83d\udcbb"},{"location":"contributing/#cmake-developer-options","text":"The following options are available only when building the library in developer mode: Option Description Default DOXYBOOK_DEVELOPER_MODE Enable developer mode OFF BUILD_SHARED_LIBS Build shared libs. OFF DOXYBOOK_BUILD_TESTS Build tests ON DOXYBOOK_BUILD_SINGLE_TARGET_TESTS Build tests OFF DOXYBOOK_BUILD_EXAMPLES Build examples ON DOXYBOOK_BUILD_DOCS Build documentation ON DOXYBOOK_BUILD_COVERAGE_REPORT Enable coverage support OFF DOXYBOOK_BUILD_LINT Enable linting OFF DOXYBOOK_PEDANTIC_WARNINGS Use pedantic warnings. ON DOXYBOOK_WARNINGS_AS_ERRORS Treat warnings as errors. ON DOXYBOOK_SANITIZERS Build with sanitizers. ON if compiling in Debug mode DOXYBOOK_CATCH2_REPORTER Reporter Catch2 should use when invoked from ctest. console DOXYBOOK_TIME_TRACE Enable clang time-trace. ON DOXYBOOK_BUILD_WITH_UTF8 Accept utf-8 in MSVC by default. ON","title":"CMake Developer Options"},{"location":"contributing/#prs","text":"Feel free to contribute new features to this library. For complex features and changes, consider getting feedback from the community first. Contributing to an existing code base with its conventions might seem obscure at first but please don't let that discourage you from sharing your ideas. There are many ways in which you can contribute to this library: Testing the library in new environments see 1 , 2 , 3 Contributing with interesting examples see 1 Finding problems in this documentation see 1 Finding bugs in general see 1 , 2 , 3 , 4 Whatever idea seems interesting to you","title":"PRs \ud83d\udca1"},{"location":"contributing/#constructive-contributions","text":"The only thing we ask you is to make sure your contribution is not destructive. Some contributions in which we are not interested are: \"I don't like this optional feature, so I removed/deprecated it\" \"I removed this feature to support older versions of C++\" but have not provided an equivalent alternative \"I removed this feature, so I don't have to install/update ______\" but have not provided an equivalent alternative \"I'm creating this high-cost promise that we'll support _ _ forever\" but I'm not sticking around to keep that promise In doubt, please open a discussion first","title":"Constructive contributions"},{"location":"library/","text":"Use as a library You can use this tool as a C++ library. There is a pre-compiled binary executable, static library, and header files on GitHub release page. Simply link libdoxybook.a to your program and provide an include path to the include folder. You can also include the root CMakeLists.txt file in this repository and compile it yourself. You will also need to link nlohmann/json , tinyxml2 , and fmtlib/fmt . The API documentation will be added in the future, but here is a simple example to get your started: #include <nlohmann/json.hpp> #include <doxybook/doxygen.hpp> #include <doxybook/exception.hpp> #include <doxybook/json_converter.hpp> #include <doxybook/text_markdown_printer.hpp> #include <doxybook/text_plain_printer.hpp> int main () { using namespace doxybook ; // Where the XML files are stored std :: string input_dir = \"..\" ; // Config file, override any properties you want config c ; c . copy_images = false ; // The class that will take care of parsing XML files doxygen dx ( c ); // There two are used to convert the XML text into markdown (or plain) text. // For example: <para><strong>Hello</strong></para> is converted into **Hello** text_plain_printer tp ( c , dx ); text_markdown_printer mp ( c , input_dir , dx ); // This is optional and can be used to convert the data in node // into nlohmann/json json_converter jc ( c , dx , tp , mp ); // Load and parse the XML files, may take few seconds dx . load ( input_dir ); dx . finalize ( tp , mp ); // Get the index, this holds hierarchical data. // If a class belongs to a namespace, the index will hold the namespace object, // but the namespace object will hold the class, not the index. const node & index = dx . get_index (); // Recursive find function via refid_. The refid_ is from the XML files. const auto audioBuffer = index . find ( \"class_engine_1_1_audio_1_1_audio_buffer\" ); const auto audioBufferConstructor = index . find ( \"classEngine_1_1Audio_1_1AudioBuffer_1ab3f8002fc80d9bff50cfb6095e10a721\" ); audioBufferConstructor -> get_name (); // Returns \"AudioBuffer\" // Get detailed data of this specific class // std::tuple<node::data, node::children_data> auto [ data , childrenDataMap ] = audioBuffer -> load_data ( c , tp , mp , dx . get_cache ()); // The \"data\" is type of node::data which contains // detailed data for this specific class. // The \"childrenDataMap\" is the same thing, but stored as an unordered map // where a key is a pointer to the child (the class' function for example) data. auto constructorData & = childrenDataMap . at ( audioBufferConstructor ); // ... }","title":"Library"},{"location":"library/#use-as-a-library","text":"You can use this tool as a C++ library. There is a pre-compiled binary executable, static library, and header files on GitHub release page. Simply link libdoxybook.a to your program and provide an include path to the include folder. You can also include the root CMakeLists.txt file in this repository and compile it yourself. You will also need to link nlohmann/json , tinyxml2 , and fmtlib/fmt . The API documentation will be added in the future, but here is a simple example to get your started: #include <nlohmann/json.hpp> #include <doxybook/doxygen.hpp> #include <doxybook/exception.hpp> #include <doxybook/json_converter.hpp> #include <doxybook/text_markdown_printer.hpp> #include <doxybook/text_plain_printer.hpp> int main () { using namespace doxybook ; // Where the XML files are stored std :: string input_dir = \"..\" ; // Config file, override any properties you want config c ; c . copy_images = false ; // The class that will take care of parsing XML files doxygen dx ( c ); // There two are used to convert the XML text into markdown (or plain) text. // For example: <para><strong>Hello</strong></para> is converted into **Hello** text_plain_printer tp ( c , dx ); text_markdown_printer mp ( c , input_dir , dx ); // This is optional and can be used to convert the data in node // into nlohmann/json json_converter jc ( c , dx , tp , mp ); // Load and parse the XML files, may take few seconds dx . load ( input_dir ); dx . finalize ( tp , mp ); // Get the index, this holds hierarchical data. // If a class belongs to a namespace, the index will hold the namespace object, // but the namespace object will hold the class, not the index. const node & index = dx . get_index (); // Recursive find function via refid_. The refid_ is from the XML files. const auto audioBuffer = index . find ( \"class_engine_1_1_audio_1_1_audio_buffer\" ); const auto audioBufferConstructor = index . find ( \"classEngine_1_1Audio_1_1AudioBuffer_1ab3f8002fc80d9bff50cfb6095e10a721\" ); audioBufferConstructor -> get_name (); // Returns \"AudioBuffer\" // Get detailed data of this specific class // std::tuple<node::data, node::children_data> auto [ data , childrenDataMap ] = audioBuffer -> load_data ( c , tp , mp , dx . get_cache ()); // The \"data\" is type of node::data which contains // detailed data for this specific class. // The \"childrenDataMap\" is the same thing, but stored as an unordered map // where a key is a pointer to the child (the class' function for example) data. auto constructorData & = childrenDataMap . at ( audioBufferConstructor ); // ... }","title":"Use as a library"},{"location":"quickstart/","text":"Quickstart Integration \ud83d\udcbb Packages From source Get the binary packages from the release section . Put the binary file ( doxybook or doxybook.exe ) somewhere in your system and add it to the OS PATH environment variable. Hint If you need a more recent version of doxybook , you can download the binary packages from the CI artifacts or build the library from the source files. We do not provide binary packages for all platforms. In that case, you can build the package from source. Any dependencies unavailable will be downloaded during configuration. You can also use a CMake package manager toolchain, such as vcpkg, to download these dependencies. Windows + MSVC Ubuntu + GCC Mac Os + Clang Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"/O2\" cmake --build build --config Release Install: cmake --install build Create packages: cpack build Packaging Debug and Release Use these instructions to setup CPack to bundle multiple build directories and construct a package that contains multiple configurations of the same project. Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"-O2\" sudo cmake --build build --config Release Install: sudo cmake --install build Create packages: sudo cpack build Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"-O2\" cmake --build build --config Release Install: cmake --install build Create packages: cpack build Extra CMake Options These are the options available when building the project with CMake: Option Description Default DOXYBOOK_BUILD_INSTALLER Build installer target ON if running CMake from the root directory DOXYBOOK_BUILD_PACKAGE Build package ON if running CMake from the root directory DOXYBOOK_USE_FIND_PACKAGE Do not use find_package to find dependencies ON if not crosscompiling DOXYBOOK_USE_FETCH_CONTENT Do not use FetchContent to fetch dependencies ON if not crosscompiling Hello World \ud83d\udc4b You only need Doxygen, doxybook from this repository, and some markdown static site generator. Document your code so that Doxygen can pick it up. Make sure your Doxyfile contains GENERATE_XML = YES and XML_OUTPUT = xml . A sample Doxyfile is provided in the example/Doxyfile folder in this repository. Run doxygen simply by calling doxygen in terminal in the same directory as your Doxyfile . Run doxybook as the following: doxybook --input path/to/doxygen/xml --output path/to/destination Examples \ud83d\uddbc Hugo (Book) MkDocs (ReadTheDocs) MkDocs (Material) MkDocs (Bootswatch) VuePress GitBook Docsify Hugo (Learn) Original Doxygen Hugo Book theme Link Config: { \"baseUrl\" : \"/doxybook/hugo-book/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } MkDocs ReadTheDocs theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-readthedocs/\" , \"indexInFolders\" : false , \"linkSuffix\" : \"/\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } MkDocs Material theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-material/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } MkDocs Bootswatch theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-bootswatch/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } VuePress GitBook Link Config: { \"baseUrl\" : \"/\" , \"indexInFolders\" : true , \"linkSuffix\" : \".md\" , \"linkLowercase\" : false , \"indexClassesName\" : \"README\" , \"indexFilesName\" : \"README\" , \"indexGroupsName\" : \"README\" , \"indexNamespacesName\" : \"README\" , \"indexRelatedPagesName\" : \"README\" , \"indexExamplesName\" : \"README\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"README\" } Docsify Hugo Book theme Link Config: { \"baseUrl\" : \"/doxybook/hugo-learn/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } Link Requirements \u2699 Requirements: C++17 Tested compilers: MSVC 14.2, 14.3; GCC 9, 10, 11, 12; Clang 12, 13, 14; AppleClang: 13 Tested standards: C++20; C++17 Acknowledgments This project is a fork of https://github.com/matusnovak/doxybook2-bsl-license . We deeply appreciate all the contributions of Matus Novak .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#integration","text":"Packages From source Get the binary packages from the release section . Put the binary file ( doxybook or doxybook.exe ) somewhere in your system and add it to the OS PATH environment variable. Hint If you need a more recent version of doxybook , you can download the binary packages from the CI artifacts or build the library from the source files. We do not provide binary packages for all platforms. In that case, you can build the package from source. Any dependencies unavailable will be downloaded during configuration. You can also use a CMake package manager toolchain, such as vcpkg, to download these dependencies. Windows + MSVC Ubuntu + GCC Mac Os + Clang Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"/O2\" cmake --build build --config Release Install: cmake --install build Create packages: cpack build Packaging Debug and Release Use these instructions to setup CPack to bundle multiple build directories and construct a package that contains multiple configurations of the same project. Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"-O2\" sudo cmake --build build --config Release Install: sudo cmake --install build Create packages: sudo cpack build Build: cmake -S . -B build -D CMAKE_BUILD_TYPE = Release -D CMAKE_CXX_FLAGS = \"-O2\" cmake --build build --config Release Install: cmake --install build Create packages: cpack build Extra CMake Options These are the options available when building the project with CMake: Option Description Default DOXYBOOK_BUILD_INSTALLER Build installer target ON if running CMake from the root directory DOXYBOOK_BUILD_PACKAGE Build package ON if running CMake from the root directory DOXYBOOK_USE_FIND_PACKAGE Do not use find_package to find dependencies ON if not crosscompiling DOXYBOOK_USE_FETCH_CONTENT Do not use FetchContent to fetch dependencies ON if not crosscompiling","title":"Integration \ud83d\udcbb"},{"location":"quickstart/#hello-world","text":"You only need Doxygen, doxybook from this repository, and some markdown static site generator. Document your code so that Doxygen can pick it up. Make sure your Doxyfile contains GENERATE_XML = YES and XML_OUTPUT = xml . A sample Doxyfile is provided in the example/Doxyfile folder in this repository. Run doxygen simply by calling doxygen in terminal in the same directory as your Doxyfile . Run doxybook as the following: doxybook --input path/to/doxygen/xml --output path/to/destination","title":"Hello World \ud83d\udc4b"},{"location":"quickstart/#examples","text":"Hugo (Book) MkDocs (ReadTheDocs) MkDocs (Material) MkDocs (Bootswatch) VuePress GitBook Docsify Hugo (Learn) Original Doxygen Hugo Book theme Link Config: { \"baseUrl\" : \"/doxybook/hugo-book/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } MkDocs ReadTheDocs theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-readthedocs/\" , \"indexInFolders\" : false , \"linkSuffix\" : \"/\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } MkDocs Material theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-material/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } MkDocs Bootswatch theme Link Config: { \"baseUrl\" : \"/doxybook/mkdocs-bootswatch/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"indexClassesName\" : \"index\" , \"indexFilesName\" : \"index\" , \"indexGroupsName\" : \"index\" , \"indexNamespacesName\" : \"index\" , \"indexRelatedPagesName\" : \"index\" , \"indexExamplesName\" : \"index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"index\" } VuePress GitBook Link Config: { \"baseUrl\" : \"/\" , \"indexInFolders\" : true , \"linkSuffix\" : \".md\" , \"linkLowercase\" : false , \"indexClassesName\" : \"README\" , \"indexFilesName\" : \"README\" , \"indexGroupsName\" : \"README\" , \"indexNamespacesName\" : \"README\" , \"indexRelatedPagesName\" : \"README\" , \"indexExamplesName\" : \"README\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"README\" } Docsify Hugo Book theme Link Config: { \"baseUrl\" : \"/doxybook/hugo-learn/\" , \"indexInFolders\" : true , \"linkSuffix\" : \"/\" , \"linkLowercase\" : true , \"indexClassesName\" : \"_index\" , \"indexFilesName\" : \"_index\" , \"indexGroupsName\" : \"_index\" , \"indexNamespacesName\" : \"_index\" , \"indexRelatedPagesName\" : \"_index\" , \"indexExamplesName\" : \"_index\" , \"mainPageInRoot\" : true , \"mainPageName\" : \"_index\" } Link","title":"Examples \ud83d\uddbc"},{"location":"quickstart/#requirements","text":"Requirements: C++17 Tested compilers: MSVC 14.2, 14.3; GCC 9, 10, 11, 12; Clang 12, 13, 14; AppleClang: 13 Tested standards: C++20; C++17","title":"Requirements \u2699"},{"location":"quickstart/#acknowledgments","text":"This project is a fork of https://github.com/matusnovak/doxybook2-bsl-license . We deeply appreciate all the contributions of Matus Novak .","title":"Acknowledgments"},{"location":"references/","text":"","title":"References"},{"location":"templates/","text":"Templates This doxybook utility uses templates very similar to Jinja on Python. The template engine used is inja for C++. There are already predefined templates stored inside of the doxybook executable file. If you do not specify an explicit template folder via --templates the default templates will be used. Generate default templates You can dump the default templates into a specific folder by calling doxybook as: doxybook --generate-templates /path/to/folder Note that the folder must exist. If there are any existing files that use the same name_, they will be overwritten. Using templates To use the templates, simply create a folder, put some templates in there ending with .tmpl file extension and they will be automatically loaded as: doxybook --input ... --output ... --templates /path/to/folder Just as the config, if the folder does not contain a specific template, the default one will be used. For example, Hugo (Book theme) needs an extra type: docs in the header of the markdown. The folder example/hugo-book/.doxybook/templates contains a single template template file named meta.tmpl . This template is used by header template which is then further used by the kind_class , kind_namespace , and so on. There are no other template files in that example directory, therefore the default ones will be used. To use custom templates, simply add them to to the directory specified by the --templates <dir> . The following are core templates that are needed to generate the output. All of these templates are defined by the configuration file (see section \"Config values\" above). For example, the config key template_kind_group is by default kind_nonclass , therefore the render engine expects kind_nonclass.tmpl in your templates folder (if exists). template_index_examples template_index_files template_index_groups template_index_namespaces template_index_related_pages template_kind_class template_kind_example template_kind_file template_kind_group template_kind_dir template_kind_namespace template_kind_page template_kind_union template_kind_interface template_kind_struct The following are template names used by the core templates above. These templates are simply dependencies of the templates above. They are being included by {% include \"meta\" %} or by {{ render(member_details, child) }} inside of the templates above. meta header footer index_ breadcrumbs member_details mode_details class_members_tables class_members_inherited_tables class_members_details Custom templates detailed example First, generate the default templates (this simply copies them from the executable file to the destination directory) by running doxybook --generate-templates <dir> . Let's say you want to override the fooder with some custom markdown. Find the footer.tmpl file and change the contents with whatever you want. You can delete the rest of the templates that you have not modified. Now run the executable with the --templates <dir> option. This will use your custom footer.tmpl . When the doxybook runs, the list of templates that are loaded is printed to the terminal right at the beginning. For example, if the template is loaded from your folder, it will print Parsing template: 'footer' from file: '/path/to/templates/footer.tmpl . If the template is loaded from the executable file itself (the default templates), it will print the following: Parsing template: 'footer' from default instead. Now, let's say that you want to change how enums are printed (the enum table that has Enumerator, Value, and Description columns). This is located in the member_details template. This template is used as {{ render(\"member_details\", child) }} inside of class_members_details and nonclass_members_details templates. So you only need to run doxybook --generate-templates <dir> and only keep member_details.tmpl and change it however you want. Why render instead of include ? The include is a keyword from the inja template engine to insert the child template file. All of the variables that are accessible in the parent_ template are also accessible in the child template being included. Think of it as copy pasting the contents of the child template and putting them into the parent_ template. The render method has a different context (global data). This means that you can pass in subset of the data accessible in the parent_ template. In this case, the class_members_details has a JSON data that also has an array publicTypes (if the class/struct has any public types). By default the class_members_details has something like this: {% for child in publicTypes %} {{ render(\"member_details\", child) }} {% endfor %} That will simply loop over the public types and renders the child by passing the array element of publicTypes to the render function. The render function will render the template which global context (all of the accessible data) is going to be the child object. To see what does the JSON (the global data/context in the template) looks like, simply add --debug-templates to the command line. This will generate *.md.json files. Imagine that this JSON is passed into render(..., json) when generating, for example, group__audio.md (or any other markdown file except the GitBook summary file). Changes to templates since 1.1.0 To include your own custom template, that does not override the default template, use {% include \"filename.tmpl\" %} or {{ render(\"filename.tmpl\", data) }} to do so. You need to specify the file extension .tmpl . Your custom templates must end with .tmpl file extension. Including or rendering templates by their name_ with no extension is only possible for the core templates specified in the config (the properties with name_ that starts with template... ). This is not recommended but possible. Debugging templates You can add --debug-templates into the command line (with no arguments) and a JSON file will be created alongside each of the markdown file. For example, if a markdown file group___engine.md will be created, the JSON will be created as group___engine.md.json . Why is this useful and why JSON? The JSON is the container between C++ data and the inja template engine. So inside the template you may find something as this: {% for param in params %}...{% endfor %} . This params variable is extracted from the JSON. This is also the exact same JSON generated in the JSON-only output. The JSON is simply put into the render function of the inja template engine.","title":"Templates"},{"location":"templates/#templates","text":"This doxybook utility uses templates very similar to Jinja on Python. The template engine used is inja for C++. There are already predefined templates stored inside of the doxybook executable file. If you do not specify an explicit template folder via --templates the default templates will be used.","title":"Templates"},{"location":"templates/#generate-default-templates","text":"You can dump the default templates into a specific folder by calling doxybook as: doxybook --generate-templates /path/to/folder Note that the folder must exist. If there are any existing files that use the same name_, they will be overwritten.","title":"Generate default templates"},{"location":"templates/#using-templates","text":"To use the templates, simply create a folder, put some templates in there ending with .tmpl file extension and they will be automatically loaded as: doxybook --input ... --output ... --templates /path/to/folder Just as the config, if the folder does not contain a specific template, the default one will be used. For example, Hugo (Book theme) needs an extra type: docs in the header of the markdown. The folder example/hugo-book/.doxybook/templates contains a single template template file named meta.tmpl . This template is used by header template which is then further used by the kind_class , kind_namespace , and so on. There are no other template files in that example directory, therefore the default ones will be used. To use custom templates, simply add them to to the directory specified by the --templates <dir> . The following are core templates that are needed to generate the output. All of these templates are defined by the configuration file (see section \"Config values\" above). For example, the config key template_kind_group is by default kind_nonclass , therefore the render engine expects kind_nonclass.tmpl in your templates folder (if exists). template_index_examples template_index_files template_index_groups template_index_namespaces template_index_related_pages template_kind_class template_kind_example template_kind_file template_kind_group template_kind_dir template_kind_namespace template_kind_page template_kind_union template_kind_interface template_kind_struct The following are template names used by the core templates above. These templates are simply dependencies of the templates above. They are being included by {% include \"meta\" %} or by {{ render(member_details, child) }} inside of the templates above. meta header footer index_ breadcrumbs member_details mode_details class_members_tables class_members_inherited_tables class_members_details","title":"Using templates"},{"location":"templates/#custom-templates-detailed-example","text":"First, generate the default templates (this simply copies them from the executable file to the destination directory) by running doxybook --generate-templates <dir> . Let's say you want to override the fooder with some custom markdown. Find the footer.tmpl file and change the contents with whatever you want. You can delete the rest of the templates that you have not modified. Now run the executable with the --templates <dir> option. This will use your custom footer.tmpl . When the doxybook runs, the list of templates that are loaded is printed to the terminal right at the beginning. For example, if the template is loaded from your folder, it will print Parsing template: 'footer' from file: '/path/to/templates/footer.tmpl . If the template is loaded from the executable file itself (the default templates), it will print the following: Parsing template: 'footer' from default instead. Now, let's say that you want to change how enums are printed (the enum table that has Enumerator, Value, and Description columns). This is located in the member_details template. This template is used as {{ render(\"member_details\", child) }} inside of class_members_details and nonclass_members_details templates. So you only need to run doxybook --generate-templates <dir> and only keep member_details.tmpl and change it however you want. Why render instead of include ? The include is a keyword from the inja template engine to insert the child template file. All of the variables that are accessible in the parent_ template are also accessible in the child template being included. Think of it as copy pasting the contents of the child template and putting them into the parent_ template. The render method has a different context (global data). This means that you can pass in subset of the data accessible in the parent_ template. In this case, the class_members_details has a JSON data that also has an array publicTypes (if the class/struct has any public types). By default the class_members_details has something like this: {% for child in publicTypes %} {{ render(\"member_details\", child) }} {% endfor %} That will simply loop over the public types and renders the child by passing the array element of publicTypes to the render function. The render function will render the template which global context (all of the accessible data) is going to be the child object. To see what does the JSON (the global data/context in the template) looks like, simply add --debug-templates to the command line. This will generate *.md.json files. Imagine that this JSON is passed into render(..., json) when generating, for example, group__audio.md (or any other markdown file except the GitBook summary file).","title":"Custom templates detailed example"},{"location":"templates/#changes-to-templates-since-110","text":"To include your own custom template, that does not override the default template, use {% include \"filename.tmpl\" %} or {{ render(\"filename.tmpl\", data) }} to do so. You need to specify the file extension .tmpl . Your custom templates must end with .tmpl file extension. Including or rendering templates by their name_ with no extension is only possible for the core templates specified in the config (the properties with name_ that starts with template... ). This is not recommended but possible.","title":"Changes to templates since 1.1.0"},{"location":"templates/#debugging-templates","text":"You can add --debug-templates into the command line (with no arguments) and a JSON file will be created alongside each of the markdown file. For example, if a markdown file group___engine.md will be created, the JSON will be created as group___engine.md.json . Why is this useful and why JSON? The JSON is the container between C++ data and the inja template engine. So inside the template you may find something as this: {% for param in params %}...{% endfor %} . This params variable is extracted from the JSON. This is also the exact same JSON generated in the JSON-only output. The JSON is simply put into the render function of the inja template engine.","title":"Debugging templates"},{"location":"usage/","text":"Basic Usage This is a command line tool that converts Doxygen generated XML files into markdown files (or JSON). You can then use the generated Markdown files to create beautiful C++ documentation using: MkDocs , GitBook , VuePress , Hugo , Docsify , or any other static site generator that supports markdown. This project is not limited to only the static site generators listed here, you can use any other one. The config file will help you to accomplish that by specifying the behavior or file names, relative links, other requirements of the static site generator. If you don't prefer the Markdown output generated by this tool, you can always make your own templates and supply them into this tool via the command line. If you don't want to bother with the templates, you can simply generate JSON only output, which contains partial Markdown for some things such as brief and detailed description, and use your own tool to create the documentation you want. Command line arguments Option Short Description --help -h Shows this help message. --version -v Shows the version. --quiet -q Run in quiet mode, no stdout, display onlyerrors and warnings to stderr. --input -i Path to the generated Doxygen XML folder.Must contain index.xml! --output -o Path to the target folder where to generatemarkdown files. --json -j Generate JSON only, no markdown, into theoutput path. This will also generate index.json. --config -c Optional path to a config json file. --config-data Optional json data to override config. --templates -t Optional path to a folder with templates. --generate-config Generate config file given a path to thedestination json file --generate-templates Generate template files given a path to atarget folder. --debug-templates -d Debug templates. This will create JSON foreach generated template. --summary-input Path to the summary input file. This filemust contain \"{{doxygen}}\" string. --summary-output Where to generate summary file. This filewill be created. Not a directory! --example doxybook --generate-configdoxybook -i ./doxygen/xml -o Overriding options Note, --config-data can be used on top of --config to overwrite config properties: Windows Linux Example on Windows terminal (double \"\" escapes the double quote): doxybook ... --config-data \"{\"\"link_suffix\"\": \"\"\"\"}\" doxybook ... --config-data '{\"link_suffix\": \"\"}' GitBook specific usage GitBook requires that your SUMMARY.md file contains all of the other markdown files. If the markdown file is not listed in here, it will not be generated into a HTML file. Therefore, using --summary-input and --summary-output you can generate a SUMMARY.md file. This works by creating a \"template\", let's call it SUMMARY.md.tmpl . This template file will not get modified by doxybook. You will need to put in any links you see fit (external links? other markdown files?), and then you will need to add {{ doxygen }} (including the double curly backets) somewhere in this template summary. Note that the indentation of {{ doxygen }} matters and will affect the output! Example: # Doxybook Example * [ Introduction ]( README.md ) {{ doxygen }} * [ GitHub ]( https://github.com/matusnovak/doxybook ) And when running: doxybook \\ --input path/to/input/xml \\ --output path/to/output/reference \\ --config path/to/config.json \\ --summary-input path/to/SUMMARY.md.tmpl \\ --summary-output path/to/SUMMARY.md The path/to/SUMMARY.md will be generated and {{ doxygen }} will be overwritten with a nested list. It will look like this: # Doxybook Example * [ Introduction ]( README.md ) * [ Classes ]( Classes/README.md ) * [ Engine::Exception ]( Classes/class_engine_1_1_exception.md ) * [ Engine::Assets::Asset ]( Classes/class_engine_1_1_assets_1_1_asset.md ) [...] * [ Namespaces ]( Namespaces/README.md ) * [ Engine ]( Namespaces/namespace_engine.md ) [...] * [ GitHub ]( https://github.com/matusnovak/doxybook ) There is a sample config and summary template file located in the example/gitbook folder in this repository. Generating JSON only You can generate JSON only files (no Markdown) by adding --json to the command line (with no value). Such as the following: doxybook --input path/to/input/xml --output path/to/output/reference --json","title":"Basic usage"},{"location":"usage/#basic-usage","text":"This is a command line tool that converts Doxygen generated XML files into markdown files (or JSON). You can then use the generated Markdown files to create beautiful C++ documentation using: MkDocs , GitBook , VuePress , Hugo , Docsify , or any other static site generator that supports markdown. This project is not limited to only the static site generators listed here, you can use any other one. The config file will help you to accomplish that by specifying the behavior or file names, relative links, other requirements of the static site generator. If you don't prefer the Markdown output generated by this tool, you can always make your own templates and supply them into this tool via the command line. If you don't want to bother with the templates, you can simply generate JSON only output, which contains partial Markdown for some things such as brief and detailed description, and use your own tool to create the documentation you want.","title":"Basic Usage"},{"location":"usage/#command-line-arguments","text":"Option Short Description --help -h Shows this help message. --version -v Shows the version. --quiet -q Run in quiet mode, no stdout, display onlyerrors and warnings to stderr. --input -i Path to the generated Doxygen XML folder.Must contain index.xml! --output -o Path to the target folder where to generatemarkdown files. --json -j Generate JSON only, no markdown, into theoutput path. This will also generate index.json. --config -c Optional path to a config json file. --config-data Optional json data to override config. --templates -t Optional path to a folder with templates. --generate-config Generate config file given a path to thedestination json file --generate-templates Generate template files given a path to atarget folder. --debug-templates -d Debug templates. This will create JSON foreach generated template. --summary-input Path to the summary input file. This filemust contain \"{{doxygen}}\" string. --summary-output Where to generate summary file. This filewill be created. Not a directory! --example doxybook --generate-configdoxybook -i ./doxygen/xml -o","title":"Command line arguments"},{"location":"usage/#overriding-options","text":"Note, --config-data can be used on top of --config to overwrite config properties: Windows Linux Example on Windows terminal (double \"\" escapes the double quote): doxybook ... --config-data \"{\"\"link_suffix\"\": \"\"\"\"}\" doxybook ... --config-data '{\"link_suffix\": \"\"}' GitBook specific usage GitBook requires that your SUMMARY.md file contains all of the other markdown files. If the markdown file is not listed in here, it will not be generated into a HTML file. Therefore, using --summary-input and --summary-output you can generate a SUMMARY.md file. This works by creating a \"template\", let's call it SUMMARY.md.tmpl . This template file will not get modified by doxybook. You will need to put in any links you see fit (external links? other markdown files?), and then you will need to add {{ doxygen }} (including the double curly backets) somewhere in this template summary. Note that the indentation of {{ doxygen }} matters and will affect the output! Example: # Doxybook Example * [ Introduction ]( README.md ) {{ doxygen }} * [ GitHub ]( https://github.com/matusnovak/doxybook ) And when running: doxybook \\ --input path/to/input/xml \\ --output path/to/output/reference \\ --config path/to/config.json \\ --summary-input path/to/SUMMARY.md.tmpl \\ --summary-output path/to/SUMMARY.md The path/to/SUMMARY.md will be generated and {{ doxygen }} will be overwritten with a nested list. It will look like this: # Doxybook Example * [ Introduction ]( README.md ) * [ Classes ]( Classes/README.md ) * [ Engine::Exception ]( Classes/class_engine_1_1_exception.md ) * [ Engine::Assets::Asset ]( Classes/class_engine_1_1_assets_1_1_asset.md ) [...] * [ Namespaces ]( Namespaces/README.md ) * [ Engine ]( Namespaces/namespace_engine.md ) [...] * [ GitHub ]( https://github.com/matusnovak/doxybook ) There is a sample config and summary template file located in the example/gitbook folder in this repository.","title":"Overriding options"},{"location":"usage/#generating-json-only","text":"You can generate JSON only files (no Markdown) by adding --json to the command line (with no value). Such as the following: doxybook --input path/to/input/xml --output path/to/output/reference --json","title":"Generating JSON only"},{"location":"reference/classes/","text":"Classes Class doxybook (namespace) config Configuration for the doxygen and generator classes. (struct) default_template Describe the default template for a page. (struct) doxygen All the nodes representing the content of doxygen xml files. (class) exception Doxybook exceptions. (class) generator A class that stores a doxygen object and generates the markdown documentation. (class) summary_section A section we should generate. (struct) json_converter Convert elements to json so they can be rendered with inja. (class) node A doxygen node. (class) class_reference A reference to a class. (struct) data The data in a doxygen node. (struct) param A parameter. (struct) parameter_list_item An item in a list of parameters. (struct) source_location Source code location. (struct) path (namespace) renderer Render inja templates with the specified configuration. (class) text_markdown_printer Print xml nodes as markdown. (class) list_data (struct) print_data (struct) text_plain_printer Print elements as plain text. (class) text_printer An abstract text printer. (class) utils (namespace) xml Represents and wraps an xml node. (class) element The data of an element nodes. (class) node An xml node. (class) xml_text_parser Parser for a doxygen xml file as an xml document. (class) node A parsed xml node. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/classes/#classes","text":"Class doxybook (namespace) config Configuration for the doxygen and generator classes. (struct) default_template Describe the default template for a page. (struct) doxygen All the nodes representing the content of doxygen xml files. (class) exception Doxybook exceptions. (class) generator A class that stores a doxygen object and generates the markdown documentation. (class) summary_section A section we should generate. (struct) json_converter Convert elements to json so they can be rendered with inja. (class) node A doxygen node. (class) class_reference A reference to a class. (struct) data The data in a doxygen node. (struct) param A parameter. (struct) parameter_list_item An item in a list of parameters. (struct) source_location Source code location. (struct) path (namespace) renderer Render inja templates with the specified configuration. (class) text_markdown_printer Print xml nodes as markdown. (class) list_data (struct) print_data (struct) text_plain_printer Print elements as plain text. (class) text_printer An abstract text printer. (class) utils (namespace) xml Represents and wraps an xml node. (class) element The data of an element nodes. (class) node An xml node. (class) xml_text_parser Parser for a doxygen xml file as an xml document. (class) node A parsed xml node. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/classes/classdoxybook_1_1doxygen/","text":"doxybook::doxygen Defined in header <doxybook/doxygen.hpp> class doxygen ; All the nodes representing the content of doxygen xml files. Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (virtual function) load Load an xml directory generated with doxygen. (function) finalize Finalize by printing the index with the printers. (function) get_index const Get root node representing the index. (function) find const Find a node with the given ID. (function) find_if const Find a node with the given condition. (function) get_cache const Get cache of nodes. (function) Public Functions function doxygen Defined in header <doxybook/doxygen.hpp> explicit doxygen ( config const & c ); Constructor. Exception Safety Basic exception guarantee. function ~doxygen Defined in header <doxybook/doxygen.hpp> virtual ~ doxygen () = default ; Destructor. Exception Safety Basic exception guarantee. function load Defined in header <doxybook/doxygen.hpp> void load ( std :: string const & input_dir ); Load an xml directory generated with doxygen. Exception Safety Basic exception guarantee. function finalize Defined in header <doxybook/doxygen.hpp> void finalize ( text_printer const & plain_printer , text_printer const & markdown_printer ); Finalize by printing the index with the printers. Exception Safety Basic exception guarantee. function get_index Defined in header <doxybook/doxygen.hpp> node const & get_index () const ; Get root node representing the index. Exception Safety Basic exception guarantee. function find Defined in header <doxybook/doxygen.hpp> std :: shared_ptr < node > find ( std :: string const & refid ) const ; Find a node with the given ID. Exception Safety Basic exception guarantee. function find_if Defined in header <doxybook/doxygen.hpp> std :: shared_ptr < node > find_if ( std :: function < bool ( node const & ) > f ) const ; Find a node with the given condition. Exception Safety Basic exception guarantee. function get_cache Defined in header <doxybook/doxygen.hpp> node_cache_map const & get_cache () const ; Get cache of nodes. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::doxygen"},{"location":"reference/classes/classdoxybook_1_1doxygen/#doxybookdoxygen","text":"Defined in header <doxybook/doxygen.hpp> class doxygen ; All the nodes representing the content of doxygen xml files.","title":"doxybook::doxygen"},{"location":"reference/classes/classdoxybook_1_1doxygen/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (virtual function) load Load an xml directory generated with doxygen. (function) finalize Finalize by printing the index with the printers. (function) get_index const Get root node representing the index. (function) find const Find a node with the given ID. (function) find_if const Find a node with the given condition. (function) get_cache const Get cache of nodes. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1doxygen/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-doxygen","text":"Defined in header <doxybook/doxygen.hpp> explicit doxygen ( config const & c ); Constructor. Exception Safety Basic exception guarantee.","title":"function doxygen"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-doxygen_1","text":"Defined in header <doxybook/doxygen.hpp> virtual ~ doxygen () = default ; Destructor. Exception Safety Basic exception guarantee.","title":"function ~doxygen"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-load","text":"Defined in header <doxybook/doxygen.hpp> void load ( std :: string const & input_dir ); Load an xml directory generated with doxygen. Exception Safety Basic exception guarantee.","title":"function load"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-finalize","text":"Defined in header <doxybook/doxygen.hpp> void finalize ( text_printer const & plain_printer , text_printer const & markdown_printer ); Finalize by printing the index with the printers. Exception Safety Basic exception guarantee.","title":"function finalize"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-get_index","text":"Defined in header <doxybook/doxygen.hpp> node const & get_index () const ; Get root node representing the index. Exception Safety Basic exception guarantee.","title":"function get_index"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-find","text":"Defined in header <doxybook/doxygen.hpp> std :: shared_ptr < node > find ( std :: string const & refid ) const ; Find a node with the given ID. Exception Safety Basic exception guarantee.","title":"function find"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-find_if","text":"Defined in header <doxybook/doxygen.hpp> std :: shared_ptr < node > find_if ( std :: function < bool ( node const & ) > f ) const ; Find a node with the given condition. Exception Safety Basic exception guarantee.","title":"function find_if"},{"location":"reference/classes/classdoxybook_1_1doxygen/#function-get_cache","text":"Defined in header <doxybook/doxygen.hpp> node_cache_map const & get_cache () const ; Get cache of nodes. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function get_cache"},{"location":"reference/classes/classdoxybook_1_1exception/","text":"doxybook::exception Defined in header <doxybook/exception.hpp> class exception ; Doxybook exceptions. Description This is a very basic class used to represent doxybook exceptions Inherits from exception Public Functions Member Functions Description (constructor) Constructor. (function) what const override The error message. (function) Public Functions function exception Defined in header <doxybook/exception.hpp> (1) exception () = default ; (2) explicit exception ( std :: string msg ); Constructor. Exception Safety Basic exception guarantee. function what Defined in header <doxybook/exception.hpp> char const * what () const override ; The error message. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::exception"},{"location":"reference/classes/classdoxybook_1_1exception/#doxybookexception","text":"Defined in header <doxybook/exception.hpp> class exception ; Doxybook exceptions. Description This is a very basic class used to represent doxybook exceptions Inherits from exception","title":"doxybook::exception"},{"location":"reference/classes/classdoxybook_1_1exception/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) what const override The error message. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1exception/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1exception/#function-exception","text":"Defined in header <doxybook/exception.hpp> (1) exception () = default ; (2) explicit exception ( std :: string msg ); Constructor. Exception Safety Basic exception guarantee.","title":"function exception"},{"location":"reference/classes/classdoxybook_1_1exception/#function-what","text":"Defined in header <doxybook/exception.hpp> char const * what () const override ; The error message. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function what"},{"location":"reference/classes/classdoxybook_1_1generator/","text":"doxybook::generator Defined in header <doxybook/generator.hpp> class generator ; A class that stores a doxygen object and generates the markdown documentation. Description This is main class in this whole library. The cli executable basically controls this generator. Public Classes Name struct summary_section A section we should generate. Public Types Member Types Definition filter_set A set of kinds we should use in an operation. (using) Public Functions Member Functions Description (constructor) Constructor. (function) print Generate the documentation for the specified doxygen kinds. (function) json Generate json for the specified doxygen kinds. (function) manifest Generate a manifest file. (function) print_index Generate the indexes for the specified doxygen kinds. (function) summary Generate the summary for the specified doxygen sections. (function) Public Types using filter_set Defined in header <doxybook/generator.hpp> using filter_set = std :: unordered_set < kind > ; A set of kinds we should use in an operation. Public Functions function generator Defined in header <doxybook/generator.hpp> explicit generator ( config const & config , doxygen const & doxygen , json_converter const & json_converter , std :: optional < std :: string > const & templates_path ); Constructor. Parameters config - Configuration options doxygen - Doxygen files json_converter - Converter from json to markdown templates_path - An optional path with templates Description The constructor requires the configuration and doxygen object which should be previously constructed. Exception Safety Basic exception guarantee. function print Defined in header <doxybook/generator.hpp> void print ( filter_set const & filter , filter_set const & skip ); Generate the documentation for the specified doxygen kinds. Exception Safety Basic exception guarantee. function json Defined in header <doxybook/generator.hpp> void json ( filter_set const & filter , filter_set const & skip ); Generate json for the specified doxygen kinds. Exception Safety Basic exception guarantee. function manifest Defined in header <doxybook/generator.hpp> void manifest (); Generate a manifest file. Exception Safety Basic exception guarantee. function print_index Defined in header <doxybook/generator.hpp> void print_index ( folder_category type , filter_set const & filter , filter_set const & skip ); Generate the indexes for the specified doxygen kinds. Exception Safety Basic exception guarantee. function summary Defined in header <doxybook/generator.hpp> void summary ( std :: string const & input_file , std :: string const & output_file , std :: vector < summary_section > const & sections ); Generate the summary for the specified doxygen sections. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::generator"},{"location":"reference/classes/classdoxybook_1_1generator/#doxybookgenerator","text":"Defined in header <doxybook/generator.hpp> class generator ; A class that stores a doxygen object and generates the markdown documentation. Description This is main class in this whole library. The cli executable basically controls this generator.","title":"doxybook::generator"},{"location":"reference/classes/classdoxybook_1_1generator/#public-classes","text":"Name struct summary_section A section we should generate.","title":"Public Classes"},{"location":"reference/classes/classdoxybook_1_1generator/#public-types","text":"Member Types Definition filter_set A set of kinds we should use in an operation. (using)","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1generator/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) print Generate the documentation for the specified doxygen kinds. (function) json Generate json for the specified doxygen kinds. (function) manifest Generate a manifest file. (function) print_index Generate the indexes for the specified doxygen kinds. (function) summary Generate the summary for the specified doxygen sections. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1generator/#public-types_1","text":"","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1generator/#using-filter_set","text":"Defined in header <doxybook/generator.hpp> using filter_set = std :: unordered_set < kind > ; A set of kinds we should use in an operation.","title":"using filter_set"},{"location":"reference/classes/classdoxybook_1_1generator/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1generator/#function-generator","text":"Defined in header <doxybook/generator.hpp> explicit generator ( config const & config , doxygen const & doxygen , json_converter const & json_converter , std :: optional < std :: string > const & templates_path ); Constructor. Parameters config - Configuration options doxygen - Doxygen files json_converter - Converter from json to markdown templates_path - An optional path with templates Description The constructor requires the configuration and doxygen object which should be previously constructed. Exception Safety Basic exception guarantee.","title":"function generator"},{"location":"reference/classes/classdoxybook_1_1generator/#function-print","text":"Defined in header <doxybook/generator.hpp> void print ( filter_set const & filter , filter_set const & skip ); Generate the documentation for the specified doxygen kinds. Exception Safety Basic exception guarantee.","title":"function print"},{"location":"reference/classes/classdoxybook_1_1generator/#function-json","text":"Defined in header <doxybook/generator.hpp> void json ( filter_set const & filter , filter_set const & skip ); Generate json for the specified doxygen kinds. Exception Safety Basic exception guarantee.","title":"function json"},{"location":"reference/classes/classdoxybook_1_1generator/#function-manifest","text":"Defined in header <doxybook/generator.hpp> void manifest (); Generate a manifest file. Exception Safety Basic exception guarantee.","title":"function manifest"},{"location":"reference/classes/classdoxybook_1_1generator/#function-print_index","text":"Defined in header <doxybook/generator.hpp> void print_index ( folder_category type , filter_set const & filter , filter_set const & skip ); Generate the indexes for the specified doxygen kinds. Exception Safety Basic exception guarantee.","title":"function print_index"},{"location":"reference/classes/classdoxybook_1_1generator/#function-summary","text":"Defined in header <doxybook/generator.hpp> void summary ( std :: string const & input_file , std :: string const & output_file , std :: vector < summary_section > const & sections ); Generate the summary for the specified doxygen sections. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function summary"},{"location":"reference/classes/classdoxybook_1_1json__converter/","text":"doxybook::json_converter Defined in header <doxybook/json_converter.hpp> class json_converter ; Convert elements to json so they can be rendered with inja. Public Functions Member Functions Description (constructor) Constructor. (function) convert const Convert a vector of strings to a json array. (function) get_as_json const Convert a doxygen node to json. (function) Public Functions function json_converter Defined in header <doxybook/json_converter.hpp> explicit json_converter ( config const & config , doxygen const & doxygen , text_printer const & plainPrinter , text_printer const & markdownPrinter ); Constructor. Exception Safety Basic exception guarantee. function convert Defined in header <doxybook/json_converter.hpp> (1) nlohmann :: json convert ( std :: vector < std :: string > const & vec ) const ; (2) nlohmann :: json convert ( node :: class_reference const & class_ ) const ; (3) nlohmann :: json convert ( std :: vector < node :: class_reference > const & classes ) const ; (4) nlohmann :: json convert ( node :: source_location const & location ) const ; (5) nlohmann :: json convert ( node :: param const & param ) const ; (6) nlohmann :: json convert ( node :: parameter_list_item const & item ) const ; (7) nlohmann :: json convert ( std :: vector < node :: parameter_list_item > const & item ) const ; (8) nlohmann :: json convert ( node const & node ) const ; (9) nlohmann :: json convert ( node const & node , node :: data const & data ) const ; Convert a vector of strings to a json array. Convert a class_reference to json. Convert a vector of class references to json. Convert a source location to json. Convert a doxygen param to json. Convert a parameter list item to json. Convert a parameter list to json. Convert a doxygen node to json. Convert a doxygen node data to json. Exception Safety Basic exception guarantee. function get_as_json Defined in header <doxybook/json_converter.hpp> nlohmann :: json get_as_json ( node const & node ) const ; Convert a doxygen node to json. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::json_converter"},{"location":"reference/classes/classdoxybook_1_1json__converter/#doxybookjson_converter","text":"Defined in header <doxybook/json_converter.hpp> class json_converter ; Convert elements to json so they can be rendered with inja.","title":"doxybook::json_converter"},{"location":"reference/classes/classdoxybook_1_1json__converter/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) convert const Convert a vector of strings to a json array. (function) get_as_json const Convert a doxygen node to json. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1json__converter/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-json_converter","text":"Defined in header <doxybook/json_converter.hpp> explicit json_converter ( config const & config , doxygen const & doxygen , text_printer const & plainPrinter , text_printer const & markdownPrinter ); Constructor. Exception Safety Basic exception guarantee.","title":"function json_converter"},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-convert","text":"Defined in header <doxybook/json_converter.hpp> (1) nlohmann :: json convert ( std :: vector < std :: string > const & vec ) const ; (2) nlohmann :: json convert ( node :: class_reference const & class_ ) const ; (3) nlohmann :: json convert ( std :: vector < node :: class_reference > const & classes ) const ; (4) nlohmann :: json convert ( node :: source_location const & location ) const ; (5) nlohmann :: json convert ( node :: param const & param ) const ; (6) nlohmann :: json convert ( node :: parameter_list_item const & item ) const ; (7) nlohmann :: json convert ( std :: vector < node :: parameter_list_item > const & item ) const ; (8) nlohmann :: json convert ( node const & node ) const ; (9) nlohmann :: json convert ( node const & node , node :: data const & data ) const ; Convert a vector of strings to a json array. Convert a class_reference to json. Convert a vector of class references to json. Convert a source location to json. Convert a doxygen param to json. Convert a parameter list item to json. Convert a parameter list to json. Convert a doxygen node to json. Convert a doxygen node data to json. Exception Safety Basic exception guarantee.","title":"function convert"},{"location":"reference/classes/classdoxybook_1_1json__converter/#function-get_as_json","text":"Defined in header <doxybook/json_converter.hpp> nlohmann :: json get_as_json ( node const & node ) const ; Convert a doxygen node to json. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function get_as_json"},{"location":"reference/classes/classdoxybook_1_1node/","text":"doxybook::node Defined in header <doxybook/node.hpp> class node ; A doxygen node. Public Classes Name struct class_reference A reference to a class. struct data The data in a doxygen node. struct param A parameter. struct parameter_list_item An item in a list of parameters. struct source_location Source code location. Public Types Member Types Definition load_data_result The result of loading the node internal data. (using) Public Functions Member Functions Description parse Parse root xml objects (classes, structs, etc) (function) (constructor) Constructor. (function) (destructor) Destructor. (function) find const Find a node by refid. (function) find_child const Find an immediate child node. (function) is_structured const Check if node represents a structured type. (function) is_language const Check if node represents a language feature. (function) is_file_or_dir const Check if node represents a file or directory. (function) get_kind const Return the kind of node. (function) get_language const Return the node language. (function) get_type const Return the node type. (function) get_refid const Return the node refid. (function) get_qualified_name const Return the qualified name. (function) get_name const Return the node name. (function) get_parent const Return the node parent. (function) get_group const Return the node group. (function) is_empty const Check if the node is empty. (function) get_children const Return all child nodes. (function) get_xml_path const Return the node xml_path. (function) get_brief const Return the node brief. (function) get_summary const Return the node summary. (function) get_title const Return the node title. (function) get_visibility const Return the node visibility. (function) get_virtual const Return the node virtual category. (function) get_base_classes const Return the node base classes. (function) get_derived_classes const Return the node derived classes. (function) get_url const Return the node url. (function) get_anchor const Return the node anchor. (function) get_section const Return the node section. (function) finalize Print the node contents to text and markdown. (function) load_data const Load the node data and its child nodes. (function) Friends Friends Description doxygen Constructor. (public friend class) Public Types using load_data_result Defined in header <doxybook/node.hpp> using load_data_result = std :: tuple < data , std :: unordered_map < std :: string , data > > ; The result of loading the node internal data. Public Functions function parse Defined in header <doxybook/node.hpp> (1) static std :: shared_ptr < node > parse ( node_cache_map & cache , std :: string const & input_dir , std :: string const & refid , bool is_group_or_file , bool const allow_undocumented_macros ); (2) static std :: shared_ptr < node > parse ( node_cache_map & cache , std :: string const & input_dir , std :: shared_ptr < node > const & ptr , bool is_group_or_file , bool const allow_undocumented_macros ); (3) static std :: shared_ptr < node > parse ( xml :: element & member_def , std :: string const & ref_id ); Parse root xml objects (classes, structs, etc) Parse objects under the specified node. Parse member xml objects (functions, enums, etc) Exception Safety Basic exception guarantee. function node Defined in header <doxybook/node.hpp> explicit node ( std :: string const & refid ); Constructor. Parameters refid - Node id Description The constructor will only store the refid and an empty temporary node. Exception Safety Basic exception guarantee. function ~node Defined in header <doxybook/node.hpp> ~ node (); Destructor. Exception Safety Basic exception guarantee. function find Defined in header <doxybook/node.hpp> std :: shared_ptr < node > find ( std :: string const & refid ) const ; Find a node by refid. Exception Safety Basic exception guarantee. function find_child Defined in header <doxybook/node.hpp> std :: shared_ptr < node > find_child ( std :: string const & refid ) const ; Find an immediate child node. Exception Safety Basic exception guarantee. function is_structured Defined in header <doxybook/node.hpp> bool is_structured () const ; Check if node represents a structured type. Exception Safety Basic exception guarantee. function is_language Defined in header <doxybook/node.hpp> bool is_language () const ; Check if node represents a language feature. Exception Safety Basic exception guarantee. function is_file_or_dir Defined in header <doxybook/node.hpp> bool is_file_or_dir () const ; Check if node represents a file or directory. Exception Safety Basic exception guarantee. function get_kind Defined in header <doxybook/node.hpp> kind get_kind () const ; Return the kind of node. Exception Safety Basic exception guarantee. function get_language Defined in header <doxybook/node.hpp> std :: string get_language () const ; Return the node language. Exception Safety Basic exception guarantee. function get_type Defined in header <doxybook/node.hpp> type get_type () const ; Return the node type. Exception Safety Basic exception guarantee. function get_refid Defined in header <doxybook/node.hpp> std :: string const & get_refid () const ; Return the node refid. Exception Safety Basic exception guarantee. function get_qualified_name Defined in header <doxybook/node.hpp> std :: string const & get_qualified_name () const ; Return the qualified name. Exception Safety Basic exception guarantee. function get_name Defined in header <doxybook/node.hpp> std :: string const & get_name () const ; Return the node name. Exception Safety Basic exception guarantee. function get_parent Defined in header <doxybook/node.hpp> node const * get_parent () const ; Return the node parent. Exception Safety Basic exception guarantee. function get_group Defined in header <doxybook/node.hpp> node const * get_group () const ; Return the node group. Exception Safety Basic exception guarantee. function is_empty Defined in header <doxybook/node.hpp> bool is_empty () const ; Check if the node is empty. Exception Safety Basic exception guarantee. function get_children Defined in header <doxybook/node.hpp> std :: list < std :: shared_ptr < node > > const & get_children () const ; Return all child nodes. Exception Safety Basic exception guarantee. function get_xml_path Defined in header <doxybook/node.hpp> std :: string const & get_xml_path () const ; Return the node xml_path. Exception Safety Basic exception guarantee. function get_brief Defined in header <doxybook/node.hpp> std :: string const & get_brief () const ; Return the node brief. Exception Safety Basic exception guarantee. function get_summary Defined in header <doxybook/node.hpp> std :: string const & get_summary () const ; Return the node summary. Exception Safety Basic exception guarantee. function get_title Defined in header <doxybook/node.hpp> std :: string const & get_title () const ; Return the node title. Exception Safety Basic exception guarantee. function get_visibility Defined in header <doxybook/node.hpp> visibility get_visibility () const ; Return the node visibility. Exception Safety Basic exception guarantee. function get_virtual Defined in header <doxybook/node.hpp> virtual_category get_virtual () const ; Return the node virtual category. Exception Safety Basic exception guarantee. function get_base_classes Defined in header <doxybook/node.hpp> std :: vector < class_reference > const & get_base_classes () const ; Return the node base classes. Exception Safety Basic exception guarantee. function get_derived_classes Defined in header <doxybook/node.hpp> std :: vector < class_reference > const & get_derived_classes () const ; Return the node derived classes. Exception Safety Basic exception guarantee. function get_url Defined in header <doxybook/node.hpp> std :: string const & get_url () const ; Return the node url. Exception Safety Basic exception guarantee. function get_anchor Defined in header <doxybook/node.hpp> std :: string const & get_anchor () const ; Return the node anchor. Exception Safety Basic exception guarantee. function get_section Defined in header <doxybook/node.hpp> std :: string const & get_section () const ; Return the node section. Description This is useful for class member functions that need to go into sections Exception Safety Basic exception guarantee. function finalize Defined in header <doxybook/node.hpp> void finalize ( config const & config , text_printer const & plain_printer , text_printer const & markdown_printer , node_cache_map const & cache ); Print the node contents to text and markdown. Exception Safety Basic exception guarantee. function load_data Defined in header <doxybook/node.hpp> load_data_result load_data ( config const & config , text_printer const & plain_printer , text_printer const & markdown_printer , node_cache_map const & cache ) const ; Load the node data and its child nodes. Exception Safety Basic exception guarantee. Friends friend doxygen Defined in header <doxybook/node.hpp> friend class doxygen ; Updated on 2022-11-17","title":"doxybook::node"},{"location":"reference/classes/classdoxybook_1_1node/#doxybooknode","text":"Defined in header <doxybook/node.hpp> class node ; A doxygen node.","title":"doxybook::node"},{"location":"reference/classes/classdoxybook_1_1node/#public-classes","text":"Name struct class_reference A reference to a class. struct data The data in a doxygen node. struct param A parameter. struct parameter_list_item An item in a list of parameters. struct source_location Source code location.","title":"Public Classes"},{"location":"reference/classes/classdoxybook_1_1node/#public-types","text":"Member Types Definition load_data_result The result of loading the node internal data. (using)","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1node/#public-functions","text":"Member Functions Description parse Parse root xml objects (classes, structs, etc) (function) (constructor) Constructor. (function) (destructor) Destructor. (function) find const Find a node by refid. (function) find_child const Find an immediate child node. (function) is_structured const Check if node represents a structured type. (function) is_language const Check if node represents a language feature. (function) is_file_or_dir const Check if node represents a file or directory. (function) get_kind const Return the kind of node. (function) get_language const Return the node language. (function) get_type const Return the node type. (function) get_refid const Return the node refid. (function) get_qualified_name const Return the qualified name. (function) get_name const Return the node name. (function) get_parent const Return the node parent. (function) get_group const Return the node group. (function) is_empty const Check if the node is empty. (function) get_children const Return all child nodes. (function) get_xml_path const Return the node xml_path. (function) get_brief const Return the node brief. (function) get_summary const Return the node summary. (function) get_title const Return the node title. (function) get_visibility const Return the node visibility. (function) get_virtual const Return the node virtual category. (function) get_base_classes const Return the node base classes. (function) get_derived_classes const Return the node derived classes. (function) get_url const Return the node url. (function) get_anchor const Return the node anchor. (function) get_section const Return the node section. (function) finalize Print the node contents to text and markdown. (function) load_data const Load the node data and its child nodes. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1node/#friends","text":"Friends Description doxygen Constructor. (public friend class)","title":"Friends"},{"location":"reference/classes/classdoxybook_1_1node/#public-types_1","text":"","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1node/#using-load_data_result","text":"Defined in header <doxybook/node.hpp> using load_data_result = std :: tuple < data , std :: unordered_map < std :: string , data > > ; The result of loading the node internal data.","title":"using load_data_result"},{"location":"reference/classes/classdoxybook_1_1node/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1node/#function-parse","text":"Defined in header <doxybook/node.hpp> (1) static std :: shared_ptr < node > parse ( node_cache_map & cache , std :: string const & input_dir , std :: string const & refid , bool is_group_or_file , bool const allow_undocumented_macros ); (2) static std :: shared_ptr < node > parse ( node_cache_map & cache , std :: string const & input_dir , std :: shared_ptr < node > const & ptr , bool is_group_or_file , bool const allow_undocumented_macros ); (3) static std :: shared_ptr < node > parse ( xml :: element & member_def , std :: string const & ref_id ); Parse root xml objects (classes, structs, etc) Parse objects under the specified node. Parse member xml objects (functions, enums, etc) Exception Safety Basic exception guarantee.","title":"function parse"},{"location":"reference/classes/classdoxybook_1_1node/#function-node","text":"Defined in header <doxybook/node.hpp> explicit node ( std :: string const & refid ); Constructor. Parameters refid - Node id Description The constructor will only store the refid and an empty temporary node. Exception Safety Basic exception guarantee.","title":"function node"},{"location":"reference/classes/classdoxybook_1_1node/#function-node_1","text":"Defined in header <doxybook/node.hpp> ~ node (); Destructor. Exception Safety Basic exception guarantee.","title":"function ~node"},{"location":"reference/classes/classdoxybook_1_1node/#function-find","text":"Defined in header <doxybook/node.hpp> std :: shared_ptr < node > find ( std :: string const & refid ) const ; Find a node by refid. Exception Safety Basic exception guarantee.","title":"function find"},{"location":"reference/classes/classdoxybook_1_1node/#function-find_child","text":"Defined in header <doxybook/node.hpp> std :: shared_ptr < node > find_child ( std :: string const & refid ) const ; Find an immediate child node. Exception Safety Basic exception guarantee.","title":"function find_child"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_structured","text":"Defined in header <doxybook/node.hpp> bool is_structured () const ; Check if node represents a structured type. Exception Safety Basic exception guarantee.","title":"function is_structured"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_language","text":"Defined in header <doxybook/node.hpp> bool is_language () const ; Check if node represents a language feature. Exception Safety Basic exception guarantee.","title":"function is_language"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_file_or_dir","text":"Defined in header <doxybook/node.hpp> bool is_file_or_dir () const ; Check if node represents a file or directory. Exception Safety Basic exception guarantee.","title":"function is_file_or_dir"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_kind","text":"Defined in header <doxybook/node.hpp> kind get_kind () const ; Return the kind of node. Exception Safety Basic exception guarantee.","title":"function get_kind"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_language","text":"Defined in header <doxybook/node.hpp> std :: string get_language () const ; Return the node language. Exception Safety Basic exception guarantee.","title":"function get_language"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_type","text":"Defined in header <doxybook/node.hpp> type get_type () const ; Return the node type. Exception Safety Basic exception guarantee.","title":"function get_type"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_refid","text":"Defined in header <doxybook/node.hpp> std :: string const & get_refid () const ; Return the node refid. Exception Safety Basic exception guarantee.","title":"function get_refid"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_qualified_name","text":"Defined in header <doxybook/node.hpp> std :: string const & get_qualified_name () const ; Return the qualified name. Exception Safety Basic exception guarantee.","title":"function get_qualified_name"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_name","text":"Defined in header <doxybook/node.hpp> std :: string const & get_name () const ; Return the node name. Exception Safety Basic exception guarantee.","title":"function get_name"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_parent","text":"Defined in header <doxybook/node.hpp> node const * get_parent () const ; Return the node parent. Exception Safety Basic exception guarantee.","title":"function get_parent"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_group","text":"Defined in header <doxybook/node.hpp> node const * get_group () const ; Return the node group. Exception Safety Basic exception guarantee.","title":"function get_group"},{"location":"reference/classes/classdoxybook_1_1node/#function-is_empty","text":"Defined in header <doxybook/node.hpp> bool is_empty () const ; Check if the node is empty. Exception Safety Basic exception guarantee.","title":"function is_empty"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_children","text":"Defined in header <doxybook/node.hpp> std :: list < std :: shared_ptr < node > > const & get_children () const ; Return all child nodes. Exception Safety Basic exception guarantee.","title":"function get_children"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_xml_path","text":"Defined in header <doxybook/node.hpp> std :: string const & get_xml_path () const ; Return the node xml_path. Exception Safety Basic exception guarantee.","title":"function get_xml_path"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_brief","text":"Defined in header <doxybook/node.hpp> std :: string const & get_brief () const ; Return the node brief. Exception Safety Basic exception guarantee.","title":"function get_brief"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_summary","text":"Defined in header <doxybook/node.hpp> std :: string const & get_summary () const ; Return the node summary. Exception Safety Basic exception guarantee.","title":"function get_summary"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_title","text":"Defined in header <doxybook/node.hpp> std :: string const & get_title () const ; Return the node title. Exception Safety Basic exception guarantee.","title":"function get_title"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_visibility","text":"Defined in header <doxybook/node.hpp> visibility get_visibility () const ; Return the node visibility. Exception Safety Basic exception guarantee.","title":"function get_visibility"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_virtual","text":"Defined in header <doxybook/node.hpp> virtual_category get_virtual () const ; Return the node virtual category. Exception Safety Basic exception guarantee.","title":"function get_virtual"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_base_classes","text":"Defined in header <doxybook/node.hpp> std :: vector < class_reference > const & get_base_classes () const ; Return the node base classes. Exception Safety Basic exception guarantee.","title":"function get_base_classes"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_derived_classes","text":"Defined in header <doxybook/node.hpp> std :: vector < class_reference > const & get_derived_classes () const ; Return the node derived classes. Exception Safety Basic exception guarantee.","title":"function get_derived_classes"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_url","text":"Defined in header <doxybook/node.hpp> std :: string const & get_url () const ; Return the node url. Exception Safety Basic exception guarantee.","title":"function get_url"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_anchor","text":"Defined in header <doxybook/node.hpp> std :: string const & get_anchor () const ; Return the node anchor. Exception Safety Basic exception guarantee.","title":"function get_anchor"},{"location":"reference/classes/classdoxybook_1_1node/#function-get_section","text":"Defined in header <doxybook/node.hpp> std :: string const & get_section () const ; Return the node section. Description This is useful for class member functions that need to go into sections Exception Safety Basic exception guarantee.","title":"function get_section"},{"location":"reference/classes/classdoxybook_1_1node/#function-finalize","text":"Defined in header <doxybook/node.hpp> void finalize ( config const & config , text_printer const & plain_printer , text_printer const & markdown_printer , node_cache_map const & cache ); Print the node contents to text and markdown. Exception Safety Basic exception guarantee.","title":"function finalize"},{"location":"reference/classes/classdoxybook_1_1node/#function-load_data","text":"Defined in header <doxybook/node.hpp> load_data_result load_data ( config const & config , text_printer const & plain_printer , text_printer const & markdown_printer , node_cache_map const & cache ) const ; Load the node data and its child nodes. Exception Safety Basic exception guarantee.","title":"function load_data"},{"location":"reference/classes/classdoxybook_1_1node/#friends_1","text":"","title":"Friends"},{"location":"reference/classes/classdoxybook_1_1node/#friend-doxygen","text":"Defined in header <doxybook/node.hpp> friend class doxygen ; Updated on 2022-11-17","title":"friend doxygen"},{"location":"reference/classes/classdoxybook_1_1renderer/","text":"doxybook::renderer Defined in header <doxybook/renderer.hpp> class renderer ; Render inja templates with the specified configuration. Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) (function) render const Destructor. (function) Public Functions function renderer Defined in header <doxybook/renderer.hpp> explicit renderer ( config const & config , doxygen const & doxygen , json_converter const & json_converter , std :: optional < std :: string > const & templates_path = std :: nullopt ); Constructor. Exception Safety Basic exception guarantee. function ~renderer Defined in header <doxybook/renderer.hpp> ~ renderer (); Exception Safety Basic exception guarantee. function render Defined in header <doxybook/renderer.hpp> (1) void render ( std :: string const & name , std :: string const & path , nlohmann :: json const & data ) const ; (2) std :: string render ( std :: string const & name , nlohmann :: json const & data ) const ; Destructor. Render template. Parameters data - data as json name - template name Return value Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::renderer"},{"location":"reference/classes/classdoxybook_1_1renderer/#doxybookrenderer","text":"Defined in header <doxybook/renderer.hpp> class renderer ; Render inja templates with the specified configuration.","title":"doxybook::renderer"},{"location":"reference/classes/classdoxybook_1_1renderer/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) (function) render const Destructor. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1renderer/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1renderer/#function-renderer","text":"Defined in header <doxybook/renderer.hpp> explicit renderer ( config const & config , doxygen const & doxygen , json_converter const & json_converter , std :: optional < std :: string > const & templates_path = std :: nullopt ); Constructor. Exception Safety Basic exception guarantee.","title":"function renderer"},{"location":"reference/classes/classdoxybook_1_1renderer/#function-renderer_1","text":"Defined in header <doxybook/renderer.hpp> ~ renderer (); Exception Safety Basic exception guarantee.","title":"function ~renderer"},{"location":"reference/classes/classdoxybook_1_1renderer/#function-render","text":"Defined in header <doxybook/renderer.hpp> (1) void render ( std :: string const & name , std :: string const & path , nlohmann :: json const & data ) const ; (2) std :: string render ( std :: string const & name , nlohmann :: json const & data ) const ; Destructor. Render template. Parameters data - data as json name - template name Return value Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function render"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/","text":"doxybook::text_markdown_printer Defined in header <doxybook/text_markdown_printer.hpp> class text_markdown_printer ; Print xml nodes as markdown. Inherits from text_printer Public Functions Member Functions Description (constructor) Constructor. (function) print const override Print an xml node. (virtual function) Protected Attributes Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable) Additional inherited members Public Functions (inherited from doxybook::text_printer ) Member Functions Description text_printer Constructor. (function) ~text_printer = default Destructor. (virtual function) Public Functions function text_markdown_printer Defined in header <doxybook/text_markdown_printer.hpp> explicit text_markdown_printer ( config const & config , std :: string input_dir , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee. function print Defined in header <doxybook/text_markdown_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language ) const override ; Print an xml node. Exception Safety Basic exception guarantee. Protected Attributes variable config_ Defined in header <doxybook/text_printer.hpp> config const & config_ ; variable doxygen_ Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"doxybook::text_markdown_printer"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#doxybooktext_markdown_printer","text":"Defined in header <doxybook/text_markdown_printer.hpp> class text_markdown_printer ; Print xml nodes as markdown. Inherits from text_printer","title":"doxybook::text_markdown_printer"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) print const override Print an xml node. (virtual function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#protected-attributes","text":"Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable)","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#additional-inherited-members","text":"Public Functions (inherited from doxybook::text_printer ) Member Functions Description text_printer Constructor. (function) ~text_printer = default Destructor. (virtual function)","title":"Additional inherited members"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#function-text_markdown_printer","text":"Defined in header <doxybook/text_markdown_printer.hpp> explicit text_markdown_printer ( config const & config , std :: string input_dir , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee.","title":"function text_markdown_printer"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#function-print","text":"Defined in header <doxybook/text_markdown_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language ) const override ; Print an xml node. Exception Safety Basic exception guarantee.","title":"function print"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#protected-attributes_1","text":"","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#variable-config_","text":"Defined in header <doxybook/text_printer.hpp> config const & config_ ;","title":"variable config_"},{"location":"reference/classes/classdoxybook_1_1text__markdown__printer/#variable-doxygen_","text":"Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"variable doxygen_"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/","text":"doxybook::text_plain_printer Defined in header <doxybook/text_plain_printer.hpp> class text_plain_printer ; Print elements as plain text. Inherits from text_printer Public Functions Member Functions Description (constructor) Constructor. (function) print const override Print an element as plain text. (virtual function) Protected Attributes Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable) Additional inherited members Public Functions (inherited from doxybook::text_printer ) Member Functions Description text_printer Constructor. (function) ~text_printer = default Destructor. (virtual function) Public Functions function text_plain_printer Defined in header <doxybook/text_plain_printer.hpp> explicit text_plain_printer ( config const & config , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee. function print Defined in header <doxybook/text_plain_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language ) const override ; Print an element as plain text. Exception Safety Basic exception guarantee. Protected Attributes variable config_ Defined in header <doxybook/text_printer.hpp> config const & config_ ; variable doxygen_ Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"doxybook::text_plain_printer"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#doxybooktext_plain_printer","text":"Defined in header <doxybook/text_plain_printer.hpp> class text_plain_printer ; Print elements as plain text. Inherits from text_printer","title":"doxybook::text_plain_printer"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) print const override Print an element as plain text. (virtual function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#protected-attributes","text":"Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable)","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#additional-inherited-members","text":"Public Functions (inherited from doxybook::text_printer ) Member Functions Description text_printer Constructor. (function) ~text_printer = default Destructor. (virtual function)","title":"Additional inherited members"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#function-text_plain_printer","text":"Defined in header <doxybook/text_plain_printer.hpp> explicit text_plain_printer ( config const & config , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee.","title":"function text_plain_printer"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#function-print","text":"Defined in header <doxybook/text_plain_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language ) const override ; Print an element as plain text. Exception Safety Basic exception guarantee.","title":"function print"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#protected-attributes_1","text":"","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#variable-config_","text":"Defined in header <doxybook/text_printer.hpp> config const & config_ ;","title":"variable config_"},{"location":"reference/classes/classdoxybook_1_1text__plain__printer/#variable-doxygen_","text":"Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"variable doxygen_"},{"location":"reference/classes/classdoxybook_1_1text__printer/","text":"doxybook::text_printer Defined in header <doxybook/text_printer.hpp> class text_printer ; An abstract text printer. Inherited by text_markdown_printer , text_plain_printer Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (virtual function) print const = 0 Convert an element to text. (virtual function) Protected Attributes Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable) Public Functions function text_printer Defined in header <doxybook/text_printer.hpp> explicit text_printer ( config const & config , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee. function ~text_printer Defined in header <doxybook/text_printer.hpp> virtual ~ text_printer () = default ; Destructor. Exception Safety Basic exception guarantee. function print Defined in header <doxybook/text_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language = \"cpp\" ) const = 0 ; Convert an element to text. Exception Safety Basic exception guarantee. Protected Attributes variable config_ Defined in header <doxybook/text_printer.hpp> config const & config_ ; variable doxygen_ Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"doxybook::text_printer"},{"location":"reference/classes/classdoxybook_1_1text__printer/#doxybooktext_printer","text":"Defined in header <doxybook/text_printer.hpp> class text_printer ; An abstract text printer. Inherited by text_markdown_printer , text_plain_printer","title":"doxybook::text_printer"},{"location":"reference/classes/classdoxybook_1_1text__printer/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (virtual function) print const = 0 Convert an element to text. (virtual function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__printer/#protected-attributes","text":"Member Protected Attributes Description config_ config const & (protected variable) doxygen_ doxygen const & (protected variable)","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__printer/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-text_printer","text":"Defined in header <doxybook/text_printer.hpp> explicit text_printer ( config const & config , doxygen const & doxygen ); Constructor. Exception Safety Basic exception guarantee.","title":"function text_printer"},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-text_printer_1","text":"Defined in header <doxybook/text_printer.hpp> virtual ~ text_printer () = default ; Destructor. Exception Safety Basic exception guarantee.","title":"function ~text_printer"},{"location":"reference/classes/classdoxybook_1_1text__printer/#function-print","text":"Defined in header <doxybook/text_printer.hpp> virtual std :: string print ( xml_text_parser :: node const & node , std :: string const & language = \"cpp\" ) const = 0 ; Convert an element to text. Exception Safety Basic exception guarantee.","title":"function print"},{"location":"reference/classes/classdoxybook_1_1text__printer/#protected-attributes_1","text":"","title":"Protected Attributes"},{"location":"reference/classes/classdoxybook_1_1text__printer/#variable-config_","text":"Defined in header <doxybook/text_printer.hpp> config const & config_ ;","title":"variable config_"},{"location":"reference/classes/classdoxybook_1_1text__printer/#variable-doxygen_","text":"Defined in header <doxybook/text_printer.hpp> doxygen const & doxygen_ ; Updated on 2022-11-17","title":"variable doxygen_"},{"location":"reference/classes/classdoxybook_1_1xml/","text":"doxybook::xml Defined in header <doxybook/xml.hpp> class xml ; Represents and wraps an xml node. Public Classes Name class element The data of an element nodes. class node An xml node. Public Types Member Types Definition element_callback std::function< void([element](/doxybook/reference/classes/classdoxybook_1_1xml_1_1element/) &)> (using) Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) Destructor. (function) first_child_element const Get first child element with the specified name. (function) get_path const Get document path. (function) Public Types using element_callback Defined in header <doxybook/xml.hpp> using element_callback = std :: function < void ( element & ) > ; Public Functions function xml Defined in header <doxybook/xml.hpp> explicit xml ( std :: string const & path ); Constructor. Exception Safety Basic exception guarantee. function ~xml Defined in header <doxybook/xml.hpp> ~ xml (); Destructor. Exception Safety Basic exception guarantee. function first_child_element Defined in header <doxybook/xml.hpp> element first_child_element ( std :: string const & name ) const ; Get first child element with the specified name. Exception Safety Basic exception guarantee. function get_path Defined in header <doxybook/xml.hpp> std :: string const & get_path () const ; Get document path. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::xml"},{"location":"reference/classes/classdoxybook_1_1xml/#doxybookxml","text":"Defined in header <doxybook/xml.hpp> class xml ; Represents and wraps an xml node.","title":"doxybook::xml"},{"location":"reference/classes/classdoxybook_1_1xml/#public-classes","text":"Name class element The data of an element nodes. class node An xml node.","title":"Public Classes"},{"location":"reference/classes/classdoxybook_1_1xml/#public-types","text":"Member Types Definition element_callback std::function< void([element](/doxybook/reference/classes/classdoxybook_1_1xml_1_1element/) &)> (using)","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1xml/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) Destructor. (function) first_child_element const Get first child element with the specified name. (function) get_path const Get document path. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml/#public-types_1","text":"","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1xml/#using-element_callback","text":"Defined in header <doxybook/xml.hpp> using element_callback = std :: function < void ( element & ) > ;","title":"using element_callback"},{"location":"reference/classes/classdoxybook_1_1xml/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml/#function-xml","text":"Defined in header <doxybook/xml.hpp> explicit xml ( std :: string const & path ); Constructor. Exception Safety Basic exception guarantee.","title":"function xml"},{"location":"reference/classes/classdoxybook_1_1xml/#function-xml_1","text":"Defined in header <doxybook/xml.hpp> ~ xml (); Destructor. Exception Safety Basic exception guarantee.","title":"function ~xml"},{"location":"reference/classes/classdoxybook_1_1xml/#function-first_child_element","text":"Defined in header <doxybook/xml.hpp> element first_child_element ( std :: string const & name ) const ; Get first child element with the specified name. Exception Safety Basic exception guarantee.","title":"function first_child_element"},{"location":"reference/classes/classdoxybook_1_1xml/#function-get_path","text":"Defined in header <doxybook/xml.hpp> std :: string const & get_path () const ; Get document path. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function get_path"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/","text":"doxybook::xml::element Defined in header <doxybook/xml.hpp> class element ; The data of an element nodes. Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (function) all_child_elements const Execute callback for all child element with a given name. (function) as_node const Get as generic node. (function) next_sibling_element const Get next sibling element. (function) next_sibling const Get next sibling node. (function) first_child const Get first child node. (function) first_child_element const Get first child element node. (function) get_line const Get line number in xml file. (function) get_document const Get reference to document. (function) get_attr const Get node attribute. (function) get_name const Get node name. (function) has_text const Check if node has text. (function) get_text const Get node text. (function) operator bool const Check if element is valid. (function) Public Functions function element Defined in header <doxybook/xml.hpp> (1) element () = default ; (2) explicit element ( tinyxml2 :: XMLElement * ptr ); Constructor. Constructor from tinyxml element node. Exception Safety Basic exception guarantee. function ~element Defined in header <doxybook/xml.hpp> ~ element () = default ; Destructor. Exception Safety Basic exception guarantee. function all_child_elements Defined in header <doxybook/xml.hpp> void all_child_elements ( std :: string const & name , element_callback const & callback ) const ; Execute callback for all child element with a given name. Exception Safety Basic exception guarantee. function as_node Defined in header <doxybook/xml.hpp> node as_node () const ; Get as generic node. Exception Safety Basic exception guarantee. function next_sibling_element Defined in header <doxybook/xml.hpp> (1) element next_sibling_element () const ; (2) element next_sibling_element ( std :: string const & name ) const ; Get next sibling element. Get next sibling element with the specified name. Exception Safety Basic exception guarantee. function next_sibling Defined in header <doxybook/xml.hpp> node next_sibling () const ; Get next sibling node. Exception Safety Basic exception guarantee. function first_child Defined in header <doxybook/xml.hpp> node first_child () const ; Get first child node. Exception Safety Basic exception guarantee. function first_child_element Defined in header <doxybook/xml.hpp> (1) element first_child_element () const ; (2) element first_child_element ( std :: string const & name ) const ; Get first child element node. Get first child element with the specified name. Exception Safety Basic exception guarantee. function get_line Defined in header <doxybook/xml.hpp> int get_line () const ; Get line number in xml file. Exception Safety Basic exception guarantee. function get_document Defined in header <doxybook/xml.hpp> xml const & get_document () const ; Get reference to document. Exception Safety Basic exception guarantee. function get_attr Defined in header <doxybook/xml.hpp> (1) std :: string get_attr ( std :: string const & name ) const ; (2) std :: string get_attr ( std :: string const & name , std :: string const & default_value ) const ; Get node attribute. Get node attribute or default value. Exception Safety Basic exception guarantee. function get_name Defined in header <doxybook/xml.hpp> std :: string get_name () const ; Get node name. Exception Safety Basic exception guarantee. function has_text Defined in header <doxybook/xml.hpp> bool has_text () const ; Check if node has text. Exception Safety Basic exception guarantee. function get_text Defined in header <doxybook/xml.hpp> std :: string get_text () const ; Get node text. Exception Safety Basic exception guarantee. function operator bool Defined in header <doxybook/xml.hpp> operator bool () const ; Check if element is valid. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::xml::element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#doxybookxmlelement","text":"Defined in header <doxybook/xml.hpp> class element ; The data of an element nodes.","title":"doxybook::xml::element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (function) all_child_elements const Execute callback for all child element with a given name. (function) as_node const Get as generic node. (function) next_sibling_element const Get next sibling element. (function) next_sibling const Get next sibling node. (function) first_child const Get first child node. (function) first_child_element const Get first child element node. (function) get_line const Get line number in xml file. (function) get_document const Get reference to document. (function) get_attr const Get node attribute. (function) get_name const Get node name. (function) has_text const Check if node has text. (function) get_text const Get node text. (function) operator bool const Check if element is valid. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-element","text":"Defined in header <doxybook/xml.hpp> (1) element () = default ; (2) explicit element ( tinyxml2 :: XMLElement * ptr ); Constructor. Constructor from tinyxml element node. Exception Safety Basic exception guarantee.","title":"function element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-element_1","text":"Defined in header <doxybook/xml.hpp> ~ element () = default ; Destructor. Exception Safety Basic exception guarantee.","title":"function ~element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-all_child_elements","text":"Defined in header <doxybook/xml.hpp> void all_child_elements ( std :: string const & name , element_callback const & callback ) const ; Execute callback for all child element with a given name. Exception Safety Basic exception guarantee.","title":"function all_child_elements"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-as_node","text":"Defined in header <doxybook/xml.hpp> node as_node () const ; Get as generic node. Exception Safety Basic exception guarantee.","title":"function as_node"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-next_sibling_element","text":"Defined in header <doxybook/xml.hpp> (1) element next_sibling_element () const ; (2) element next_sibling_element ( std :: string const & name ) const ; Get next sibling element. Get next sibling element with the specified name. Exception Safety Basic exception guarantee.","title":"function next_sibling_element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-next_sibling","text":"Defined in header <doxybook/xml.hpp> node next_sibling () const ; Get next sibling node. Exception Safety Basic exception guarantee.","title":"function next_sibling"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-first_child","text":"Defined in header <doxybook/xml.hpp> node first_child () const ; Get first child node. Exception Safety Basic exception guarantee.","title":"function first_child"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-first_child_element","text":"Defined in header <doxybook/xml.hpp> (1) element first_child_element () const ; (2) element first_child_element ( std :: string const & name ) const ; Get first child element node. Get first child element with the specified name. Exception Safety Basic exception guarantee.","title":"function first_child_element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_line","text":"Defined in header <doxybook/xml.hpp> int get_line () const ; Get line number in xml file. Exception Safety Basic exception guarantee.","title":"function get_line"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_document","text":"Defined in header <doxybook/xml.hpp> xml const & get_document () const ; Get reference to document. Exception Safety Basic exception guarantee.","title":"function get_document"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_attr","text":"Defined in header <doxybook/xml.hpp> (1) std :: string get_attr ( std :: string const & name ) const ; (2) std :: string get_attr ( std :: string const & name , std :: string const & default_value ) const ; Get node attribute. Get node attribute or default value. Exception Safety Basic exception guarantee.","title":"function get_attr"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_name","text":"Defined in header <doxybook/xml.hpp> std :: string get_name () const ; Get node name. Exception Safety Basic exception guarantee.","title":"function get_name"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-has_text","text":"Defined in header <doxybook/xml.hpp> bool has_text () const ; Check if node has text. Exception Safety Basic exception guarantee.","title":"function has_text"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-get_text","text":"Defined in header <doxybook/xml.hpp> std :: string get_text () const ; Get node text. Exception Safety Basic exception guarantee.","title":"function get_text"},{"location":"reference/classes/classdoxybook_1_1xml_1_1element/#function-operator-bool","text":"Defined in header <doxybook/xml.hpp> operator bool () const ; Check if element is valid. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function operator bool"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/","text":"doxybook::xml::node Defined in header <doxybook/xml.hpp> class node ; An xml node. Public Functions Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (function) next_sibling const Get next node. (function) first_child const Get first child node. (function) has_text const Check if node has text. (function) get_text const Get node text. (function) is_element const Check if this is an element node. (function) as_element const Get node as an element. (function) operator bool const Check if node is valid. (function) Public Functions function node Defined in header <doxybook/xml.hpp> (1) node () = default ; (2) explicit node ( tinyxml2 :: XMLNode * ptr ); Constructor. Construct from a tinyxml node. Exception Safety Basic exception guarantee. function ~node Defined in header <doxybook/xml.hpp> ~ node () = default ; Destructor. Exception Safety Basic exception guarantee. function next_sibling Defined in header <doxybook/xml.hpp> node next_sibling () const ; Get next node. Exception Safety Basic exception guarantee. function first_child Defined in header <doxybook/xml.hpp> node first_child () const ; Get first child node. Exception Safety Basic exception guarantee. function has_text Defined in header <doxybook/xml.hpp> bool has_text () const ; Check if node has text. Exception Safety Basic exception guarantee. function get_text Defined in header <doxybook/xml.hpp> std :: string get_text () const ; Get node text. Exception Safety Basic exception guarantee. function is_element Defined in header <doxybook/xml.hpp> bool is_element () const ; Check if this is an element node. Exception Safety Basic exception guarantee. function as_element Defined in header <doxybook/xml.hpp> element as_element () const ; Get node as an element. Exception Safety Basic exception guarantee. function operator bool Defined in header <doxybook/xml.hpp> operator bool () const ; Check if node is valid. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::xml::node"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#doxybookxmlnode","text":"Defined in header <doxybook/xml.hpp> class node ; An xml node.","title":"doxybook::xml::node"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#public-functions","text":"Member Functions Description (constructor) Constructor. (function) (destructor) = default Destructor. (function) next_sibling const Get next node. (function) first_child const Get first child node. (function) has_text const Check if node has text. (function) get_text const Get node text. (function) is_element const Check if this is an element node. (function) as_element const Get node as an element. (function) operator bool const Check if node is valid. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-node","text":"Defined in header <doxybook/xml.hpp> (1) node () = default ; (2) explicit node ( tinyxml2 :: XMLNode * ptr ); Constructor. Construct from a tinyxml node. Exception Safety Basic exception guarantee.","title":"function node"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-node_1","text":"Defined in header <doxybook/xml.hpp> ~ node () = default ; Destructor. Exception Safety Basic exception guarantee.","title":"function ~node"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-next_sibling","text":"Defined in header <doxybook/xml.hpp> node next_sibling () const ; Get next node. Exception Safety Basic exception guarantee.","title":"function next_sibling"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-first_child","text":"Defined in header <doxybook/xml.hpp> node first_child () const ; Get first child node. Exception Safety Basic exception guarantee.","title":"function first_child"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-has_text","text":"Defined in header <doxybook/xml.hpp> bool has_text () const ; Check if node has text. Exception Safety Basic exception guarantee.","title":"function has_text"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-get_text","text":"Defined in header <doxybook/xml.hpp> std :: string get_text () const ; Get node text. Exception Safety Basic exception guarantee.","title":"function get_text"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-is_element","text":"Defined in header <doxybook/xml.hpp> bool is_element () const ; Check if this is an element node. Exception Safety Basic exception guarantee.","title":"function is_element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-as_element","text":"Defined in header <doxybook/xml.hpp> element as_element () const ; Get node as an element. Exception Safety Basic exception guarantee.","title":"function as_element"},{"location":"reference/classes/classdoxybook_1_1xml_1_1node/#function-operator-bool","text":"Defined in header <doxybook/xml.hpp> operator bool () const ; Check if node is valid. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function operator bool"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/","text":"doxybook::xml_text_parser Defined in header <doxybook/xml_text_parser.hpp> class xml_text_parser ; Parser for a doxygen xml file as an xml document. Public Classes Name struct node A parsed xml node. Public Types Member Types Definition children_type std::vector< std::unique_ptr< tag > > (using) Public Functions Member Functions Description parse_paras Parse elements. (function) parse_para Parse element. (function) str_to_type Convert string to node type. (function) Public Types using children_type Defined in header <doxybook/xml_text_parser.hpp> using children_type = std :: vector < std :: unique_ptr < tag > > ; Public Functions function parse_paras Defined in header <doxybook/xml_text_parser.hpp> static node parse_paras ( xml :: element const & element ); Parse elements. Exception Safety Basic exception guarantee. function parse_para Defined in header <doxybook/xml_text_parser.hpp> static node parse_para ( xml :: element const & element ); Parse element. Exception Safety Basic exception guarantee. function str_to_type Defined in header <doxybook/xml_text_parser.hpp> static enum node :: type str_to_type ( std :: string const & str ); Convert string to node type. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::xml_text_parser"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#doxybookxml_text_parser","text":"Defined in header <doxybook/xml_text_parser.hpp> class xml_text_parser ; Parser for a doxygen xml file as an xml document.","title":"doxybook::xml_text_parser"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-classes","text":"Name struct node A parsed xml node.","title":"Public Classes"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-types","text":"Member Types Definition children_type std::vector< std::unique_ptr< tag > > (using)","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-functions","text":"Member Functions Description parse_paras Parse elements. (function) parse_para Parse element. (function) str_to_type Convert string to node type. (function)","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-types_1","text":"","title":"Public Types"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#using-children_type","text":"Defined in header <doxybook/xml_text_parser.hpp> using children_type = std :: vector < std :: unique_ptr < tag > > ;","title":"using children_type"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#public-functions_1","text":"","title":"Public Functions"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-parse_paras","text":"Defined in header <doxybook/xml_text_parser.hpp> static node parse_paras ( xml :: element const & element ); Parse elements. Exception Safety Basic exception guarantee.","title":"function parse_paras"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-parse_para","text":"Defined in header <doxybook/xml_text_parser.hpp> static node parse_para ( xml :: element const & element ); Parse element. Exception Safety Basic exception guarantee.","title":"function parse_para"},{"location":"reference/classes/classdoxybook_1_1xml__text__parser/#function-str_to_type","text":"Defined in header <doxybook/xml_text_parser.hpp> static enum node :: type str_to_type ( std :: string const & str ); Convert string to node type. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function str_to_type"},{"location":"reference/classes/structdoxybook_1_1config/","text":"doxybook::config Defined in header <doxybook/config.hpp> struct config ; Configuration for the doxygen and generator classes. Public Attributes Member Public Attributes Description output_dir Where to store the output files? (public variable) debug_template_json Generate extra JSON for each rendered template. (public variable) use_folders Put all files into categorized folders. (public variable) undocumented_macros Whether we should allow undocumented macros. (public variable) index_in_folders Put index files into the respective subdirectories. (public variable) main_page_in_root Main page should be located in the root directory. (public variable) main_page_name Name of the mainpage / indexpage. (public variable) base_url The base URL to prepend all links with. (public variable) file_extension The extension for markdown files. (public variable) link_suffix The suffix to end links with. (public variable) replaceUnderscoresInAnchors Replace underscores with hyphens in anchors. (public variable) sort Sort symbols alphabetically. (public variable) copy_images Copy images from the Doxygen xml dir. (public variable) images_folder Where to copy images. (public variable) link_lowercase Convert all refids and folder names to lowercase. (public variable) link_and_inline_code_as_html Output links/code as / tags instead of Markdown. (public variable) folder_groups_name The modules folder name. (public variable) folder_classes_name The classes folder name. (public variable) folder_files_name The files folder name. (public variable) folder_related_pages_name The pages folder name. (public variable) folder_namespaces_name The namespaces folder name. (public variable) folder_examples_name The examples folder name. (public variable) index_groups_name The groups index file name. (public variable) index_classes_name The classes index file name. (public variable) index_files_name The files index file name. (public variable) index_related_pages_name The relatedPages index file name. (public variable) index_namespaces_name The namespaces index file name. (public variable) index_examples_name The examples index file name. (public variable) template_kind_class The template file we should use for classes. (public variable) template_kind_struct The template file we should use for structs. (public variable) template_kind_union The template file we should use for unions. (public variable) template_kind_interface The template file we should use for interfaces. (public variable) template_kind_java_enum The template file we should use for java enums. (public variable) template_kind_namespace The template file we should use for namespaces. (public variable) template_kind_group The template file we should use for groups. (public variable) template_kind_file The template file we should use for files. (public variable) template_kind_dir The template file we should use for dirs. (public variable) template_kind_page The template file we should use for pages. (public variable) template_kind_example The template file we should use for examples. (public variable) template_index_classes The template file we should we for the class index. (public variable) template_index_namespaces The template file we should we for the namespace index. (public variable) template_index_groups The template file we should we for the group index. (public variable) template_index_files The template file we should we for the file index. (public variable) template_index_related_pages The template file we should we for the related page index. (public variable) template_index_examples The template file we should we for the example index. (public variable) index_classes_title The title for classes in index pages. (public variable) index_namespaces_title The title for namespaces in index pages. (public variable) index_groups_title The title for groups in index pages. (public variable) index_files_title The title for files in index pages. (public variable) index_related_pages_title The title for relatedPages in index pages. (public variable) index_examples_title The title for examples in index pages. (public variable) files_filter The source files allowed in the output? (public variable) folders_to_generate Folders we should generate. (public variable) formulaInlineStart Token for latex formulas inline start. (public variable) formulaInlineEnd Token for latex formulas inline end. (public variable) formulaBlockStart Token for latex formulas block start. (public variable) formulaBlockEnd Token for latex formulas block end. (public variable) Public Attributes variable output_dir Defined in header <doxybook/config.hpp> std :: string output_dir ; Where to store the output files? variable debug_template_json Defined in header <doxybook/config.hpp> bool debug_template_json { false }; Generate extra JSON for each rendered template. variable use_folders Defined in header <doxybook/config.hpp> bool use_folders { true }; Put all files into categorized folders. variable undocumented_macros Defined in header <doxybook/config.hpp> bool undocumented_macros { false }; Whether we should allow undocumented macros. variable index_in_folders Defined in header <doxybook/config.hpp> bool index_in_folders { false }; Put index files into the respective subdirectories. Description (Hugo/Learn) needs that variable main_page_in_root Defined in header <doxybook/config.hpp> bool main_page_in_root { false }; Main page should be located in the root directory. variable main_page_name Defined in header <doxybook/config.hpp> std :: string main_page_name { \"indexpage\" }; Name of the mainpage / indexpage. variable base_url Defined in header <doxybook/config.hpp> std :: string base_url { \"\" }; The base URL to prepend all links with. variable file_extension Defined in header <doxybook/config.hpp> std :: string file_extension { \"md\" }; The extension for markdown files. variable link_suffix Defined in header <doxybook/config.hpp> std :: string link_suffix { \".md\" }; The suffix to end links with. variable replaceUnderscoresInAnchors Defined in header <doxybook/config.hpp> bool replaceUnderscoresInAnchors { true }; Replace underscores with hyphens in anchors. variable sort Defined in header <doxybook/config.hpp> bool sort { false }; Sort symbols alphabetically. variable copy_images Defined in header <doxybook/config.hpp> bool copy_images { true }; Copy images from the Doxygen xml dir. variable images_folder Defined in header <doxybook/config.hpp> std :: string images_folder { \"images\" }; Where to copy images. variable link_lowercase Defined in header <doxybook/config.hpp> bool link_lowercase { false }; Convert all refids and folder names to lowercase. variable link_and_inline_code_as_html Defined in header <doxybook/config.hpp> bool link_and_inline_code_as_html { false }; Output links/code as / tags instead of Markdown. variable folder_groups_name Defined in header <doxybook/config.hpp> std :: string folder_groups_name { \"libraries\" }; The modules folder name. variable folder_classes_name Defined in header <doxybook/config.hpp> std :: string folder_classes_name { \"classes\" }; The classes folder name. variable folder_files_name Defined in header <doxybook/config.hpp> std :: string folder_files_name { \"files\" }; The files folder name. variable folder_related_pages_name Defined in header <doxybook/config.hpp> std :: string folder_related_pages_name { \"pages\" }; The pages folder name. variable folder_namespaces_name Defined in header <doxybook/config.hpp> std :: string folder_namespaces_name { \"namespaces\" }; The namespaces folder name. variable folder_examples_name Defined in header <doxybook/config.hpp> std :: string folder_examples_name { \"examples\" }; The examples folder name. variable index_groups_name Defined in header <doxybook/config.hpp> std :: string index_groups_name { \"index_groups\" }; The groups index file name. variable index_classes_name Defined in header <doxybook/config.hpp> std :: string index_classes_name { \"index_classes\" }; The classes index file name. variable index_files_name Defined in header <doxybook/config.hpp> std :: string index_files_name { \"index_files\" }; The files index file name. variable index_related_pages_name Defined in header <doxybook/config.hpp> std :: string index_related_pages_name { \"index_pages\" }; The relatedPages index file name. variable index_namespaces_name Defined in header <doxybook/config.hpp> std :: string index_namespaces_name { \"index_namespaces\" }; The namespaces index file name. variable index_examples_name Defined in header <doxybook/config.hpp> std :: string index_examples_name { \"index_examples\" }; The examples index file name. variable template_kind_class Defined in header <doxybook/config.hpp> std :: string template_kind_class { \"kind_class\" }; The template file we should use for classes. variable template_kind_struct Defined in header <doxybook/config.hpp> std :: string template_kind_struct { \"kind_class\" }; The template file we should use for structs. variable template_kind_union Defined in header <doxybook/config.hpp> std :: string template_kind_union { \"kind_class\" }; The template file we should use for unions. variable template_kind_interface Defined in header <doxybook/config.hpp> std :: string template_kind_interface { \"kind_class\" }; The template file we should use for interfaces. variable template_kind_java_enum Defined in header <doxybook/config.hpp> std :: string template_kind_java_enum { \"kind_class\" }; The template file we should use for java enums. variable template_kind_namespace Defined in header <doxybook/config.hpp> std :: string template_kind_namespace { \"kind_nonclass\" }; The template file we should use for namespaces. variable template_kind_group Defined in header <doxybook/config.hpp> std :: string template_kind_group { \"kind_nonclass\" }; The template file we should use for groups. variable template_kind_file Defined in header <doxybook/config.hpp> std :: string template_kind_file { \"kind_file\" }; The template file we should use for files. variable template_kind_dir Defined in header <doxybook/config.hpp> std :: string template_kind_dir { \"kind_file\" }; The template file we should use for dirs. variable template_kind_page Defined in header <doxybook/config.hpp> std :: string template_kind_page { \"kind_page\" }; The template file we should use for pages. variable template_kind_example Defined in header <doxybook/config.hpp> std :: string template_kind_example { \"kind_page\" }; The template file we should use for examples. variable template_index_classes Defined in header <doxybook/config.hpp> std :: string template_index_classes { \"index_classes\" }; The template file we should we for the class index. variable template_index_namespaces Defined in header <doxybook/config.hpp> std :: string template_index_namespaces { \"index_namespaces\" }; The template file we should we for the namespace index. variable template_index_groups Defined in header <doxybook/config.hpp> std :: string template_index_groups { \"index_groups\" }; The template file we should we for the group index. variable template_index_files Defined in header <doxybook/config.hpp> std :: string template_index_files { \"index_files\" }; The template file we should we for the file index. variable template_index_related_pages Defined in header <doxybook/config.hpp> std :: string template_index_related_pages { \"index_pages\" }; The template file we should we for the related page index. variable template_index_examples Defined in header <doxybook/config.hpp> std :: string template_index_examples { \"index_examples\" }; The template file we should we for the example index. variable index_classes_title Defined in header <doxybook/config.hpp> std :: string index_classes_title { \"Classes\" }; The title for classes in index pages. variable index_namespaces_title Defined in header <doxybook/config.hpp> std :: string index_namespaces_title { \"Namespaces\" }; The title for namespaces in index pages. variable index_groups_title Defined in header <doxybook/config.hpp> std :: string index_groups_title { \"Libraries\" }; The title for groups in index pages. variable index_files_title Defined in header <doxybook/config.hpp> std :: string index_files_title { \"Files\" }; The title for files in index pages. variable index_related_pages_title Defined in header <doxybook/config.hpp> std :: string index_related_pages_title { \"Pages\" }; The title for relatedPages in index pages. variable index_examples_title Defined in header <doxybook/config.hpp> std :: string index_examples_title { \"Examples\" }; The title for examples in index pages. variable files_filter Defined in header <doxybook/config.hpp> std :: vector < std :: string > files_filter {}; The source files allowed in the output? Description An empty list means all files are allowed variable folders_to_generate Defined in header <doxybook/config.hpp> std :: vector < folder_category > folders_to_generate { folder_category :: MODULES , folder_category :: CLASSES , folder_category :: FILES , folder_category :: PAGES , folder_category :: NAMESPACES , folder_category :: EXAMPLES , }; Folders we should generate. variable formulaInlineStart Defined in header <doxybook/config.hpp> std :: string formulaInlineStart { \" \\\\ (\" }; Token for latex formulas inline start. variable formulaInlineEnd Defined in header <doxybook/config.hpp> std :: string formulaInlineEnd { \" \\\\ )\" }; Token for latex formulas inline end. variable formulaBlockStart Defined in header <doxybook/config.hpp> std :: string formulaBlockStart { \" \\\\ [\" }; Token for latex formulas block start. variable formulaBlockEnd Defined in header <doxybook/config.hpp> std :: string formulaBlockEnd { \" \\\\ ]\" }; Token for latex formulas block end. Updated on 2022-11-17","title":"doxybook::config"},{"location":"reference/classes/structdoxybook_1_1config/#doxybookconfig","text":"Defined in header <doxybook/config.hpp> struct config ; Configuration for the doxygen and generator classes.","title":"doxybook::config"},{"location":"reference/classes/structdoxybook_1_1config/#public-attributes","text":"Member Public Attributes Description output_dir Where to store the output files? (public variable) debug_template_json Generate extra JSON for each rendered template. (public variable) use_folders Put all files into categorized folders. (public variable) undocumented_macros Whether we should allow undocumented macros. (public variable) index_in_folders Put index files into the respective subdirectories. (public variable) main_page_in_root Main page should be located in the root directory. (public variable) main_page_name Name of the mainpage / indexpage. (public variable) base_url The base URL to prepend all links with. (public variable) file_extension The extension for markdown files. (public variable) link_suffix The suffix to end links with. (public variable) replaceUnderscoresInAnchors Replace underscores with hyphens in anchors. (public variable) sort Sort symbols alphabetically. (public variable) copy_images Copy images from the Doxygen xml dir. (public variable) images_folder Where to copy images. (public variable) link_lowercase Convert all refids and folder names to lowercase. (public variable) link_and_inline_code_as_html Output links/code as / tags instead of Markdown. (public variable) folder_groups_name The modules folder name. (public variable) folder_classes_name The classes folder name. (public variable) folder_files_name The files folder name. (public variable) folder_related_pages_name The pages folder name. (public variable) folder_namespaces_name The namespaces folder name. (public variable) folder_examples_name The examples folder name. (public variable) index_groups_name The groups index file name. (public variable) index_classes_name The classes index file name. (public variable) index_files_name The files index file name. (public variable) index_related_pages_name The relatedPages index file name. (public variable) index_namespaces_name The namespaces index file name. (public variable) index_examples_name The examples index file name. (public variable) template_kind_class The template file we should use for classes. (public variable) template_kind_struct The template file we should use for structs. (public variable) template_kind_union The template file we should use for unions. (public variable) template_kind_interface The template file we should use for interfaces. (public variable) template_kind_java_enum The template file we should use for java enums. (public variable) template_kind_namespace The template file we should use for namespaces. (public variable) template_kind_group The template file we should use for groups. (public variable) template_kind_file The template file we should use for files. (public variable) template_kind_dir The template file we should use for dirs. (public variable) template_kind_page The template file we should use for pages. (public variable) template_kind_example The template file we should use for examples. (public variable) template_index_classes The template file we should we for the class index. (public variable) template_index_namespaces The template file we should we for the namespace index. (public variable) template_index_groups The template file we should we for the group index. (public variable) template_index_files The template file we should we for the file index. (public variable) template_index_related_pages The template file we should we for the related page index. (public variable) template_index_examples The template file we should we for the example index. (public variable) index_classes_title The title for classes in index pages. (public variable) index_namespaces_title The title for namespaces in index pages. (public variable) index_groups_title The title for groups in index pages. (public variable) index_files_title The title for files in index pages. (public variable) index_related_pages_title The title for relatedPages in index pages. (public variable) index_examples_title The title for examples in index pages. (public variable) files_filter The source files allowed in the output? (public variable) folders_to_generate Folders we should generate. (public variable) formulaInlineStart Token for latex formulas inline start. (public variable) formulaInlineEnd Token for latex formulas inline end. (public variable) formulaBlockStart Token for latex formulas block start. (public variable) formulaBlockEnd Token for latex formulas block end. (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1config/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1config/#variable-output_dir","text":"Defined in header <doxybook/config.hpp> std :: string output_dir ; Where to store the output files?","title":"variable output_dir"},{"location":"reference/classes/structdoxybook_1_1config/#variable-debug_template_json","text":"Defined in header <doxybook/config.hpp> bool debug_template_json { false }; Generate extra JSON for each rendered template.","title":"variable debug_template_json"},{"location":"reference/classes/structdoxybook_1_1config/#variable-use_folders","text":"Defined in header <doxybook/config.hpp> bool use_folders { true }; Put all files into categorized folders.","title":"variable use_folders"},{"location":"reference/classes/structdoxybook_1_1config/#variable-undocumented_macros","text":"Defined in header <doxybook/config.hpp> bool undocumented_macros { false }; Whether we should allow undocumented macros.","title":"variable undocumented_macros"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_in_folders","text":"Defined in header <doxybook/config.hpp> bool index_in_folders { false }; Put index files into the respective subdirectories. Description (Hugo/Learn) needs that","title":"variable index_in_folders"},{"location":"reference/classes/structdoxybook_1_1config/#variable-main_page_in_root","text":"Defined in header <doxybook/config.hpp> bool main_page_in_root { false }; Main page should be located in the root directory.","title":"variable main_page_in_root"},{"location":"reference/classes/structdoxybook_1_1config/#variable-main_page_name","text":"Defined in header <doxybook/config.hpp> std :: string main_page_name { \"indexpage\" }; Name of the mainpage / indexpage.","title":"variable main_page_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-base_url","text":"Defined in header <doxybook/config.hpp> std :: string base_url { \"\" }; The base URL to prepend all links with.","title":"variable base_url"},{"location":"reference/classes/structdoxybook_1_1config/#variable-file_extension","text":"Defined in header <doxybook/config.hpp> std :: string file_extension { \"md\" }; The extension for markdown files.","title":"variable file_extension"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_suffix","text":"Defined in header <doxybook/config.hpp> std :: string link_suffix { \".md\" }; The suffix to end links with.","title":"variable link_suffix"},{"location":"reference/classes/structdoxybook_1_1config/#variable-replaceunderscoresinanchors","text":"Defined in header <doxybook/config.hpp> bool replaceUnderscoresInAnchors { true }; Replace underscores with hyphens in anchors.","title":"variable replaceUnderscoresInAnchors"},{"location":"reference/classes/structdoxybook_1_1config/#variable-sort","text":"Defined in header <doxybook/config.hpp> bool sort { false }; Sort symbols alphabetically.","title":"variable sort"},{"location":"reference/classes/structdoxybook_1_1config/#variable-copy_images","text":"Defined in header <doxybook/config.hpp> bool copy_images { true }; Copy images from the Doxygen xml dir.","title":"variable copy_images"},{"location":"reference/classes/structdoxybook_1_1config/#variable-images_folder","text":"Defined in header <doxybook/config.hpp> std :: string images_folder { \"images\" }; Where to copy images.","title":"variable images_folder"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_lowercase","text":"Defined in header <doxybook/config.hpp> bool link_lowercase { false }; Convert all refids and folder names to lowercase.","title":"variable link_lowercase"},{"location":"reference/classes/structdoxybook_1_1config/#variable-link_and_inline_code_as_html","text":"Defined in header <doxybook/config.hpp> bool link_and_inline_code_as_html { false }; Output links/code as / tags instead of Markdown.","title":"variable link_and_inline_code_as_html"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_groups_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_groups_name { \"libraries\" }; The modules folder name.","title":"variable folder_groups_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_classes_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_classes_name { \"classes\" }; The classes folder name.","title":"variable folder_classes_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_files_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_files_name { \"files\" }; The files folder name.","title":"variable folder_files_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_related_pages_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_related_pages_name { \"pages\" }; The pages folder name.","title":"variable folder_related_pages_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_namespaces_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_namespaces_name { \"namespaces\" }; The namespaces folder name.","title":"variable folder_namespaces_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folder_examples_name","text":"Defined in header <doxybook/config.hpp> std :: string folder_examples_name { \"examples\" }; The examples folder name.","title":"variable folder_examples_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_groups_name","text":"Defined in header <doxybook/config.hpp> std :: string index_groups_name { \"index_groups\" }; The groups index file name.","title":"variable index_groups_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_classes_name","text":"Defined in header <doxybook/config.hpp> std :: string index_classes_name { \"index_classes\" }; The classes index file name.","title":"variable index_classes_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_files_name","text":"Defined in header <doxybook/config.hpp> std :: string index_files_name { \"index_files\" }; The files index file name.","title":"variable index_files_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_related_pages_name","text":"Defined in header <doxybook/config.hpp> std :: string index_related_pages_name { \"index_pages\" }; The relatedPages index file name.","title":"variable index_related_pages_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_namespaces_name","text":"Defined in header <doxybook/config.hpp> std :: string index_namespaces_name { \"index_namespaces\" }; The namespaces index file name.","title":"variable index_namespaces_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_examples_name","text":"Defined in header <doxybook/config.hpp> std :: string index_examples_name { \"index_examples\" }; The examples index file name.","title":"variable index_examples_name"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_class","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_class { \"kind_class\" }; The template file we should use for classes.","title":"variable template_kind_class"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_struct","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_struct { \"kind_class\" }; The template file we should use for structs.","title":"variable template_kind_struct"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_union","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_union { \"kind_class\" }; The template file we should use for unions.","title":"variable template_kind_union"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_interface","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_interface { \"kind_class\" }; The template file we should use for interfaces.","title":"variable template_kind_interface"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_java_enum","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_java_enum { \"kind_class\" }; The template file we should use for java enums.","title":"variable template_kind_java_enum"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_namespace","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_namespace { \"kind_nonclass\" }; The template file we should use for namespaces.","title":"variable template_kind_namespace"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_group","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_group { \"kind_nonclass\" }; The template file we should use for groups.","title":"variable template_kind_group"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_file","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_file { \"kind_file\" }; The template file we should use for files.","title":"variable template_kind_file"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_dir","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_dir { \"kind_file\" }; The template file we should use for dirs.","title":"variable template_kind_dir"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_page","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_page { \"kind_page\" }; The template file we should use for pages.","title":"variable template_kind_page"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_kind_example","text":"Defined in header <doxybook/config.hpp> std :: string template_kind_example { \"kind_page\" }; The template file we should use for examples.","title":"variable template_kind_example"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_classes","text":"Defined in header <doxybook/config.hpp> std :: string template_index_classes { \"index_classes\" }; The template file we should we for the class index.","title":"variable template_index_classes"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_namespaces","text":"Defined in header <doxybook/config.hpp> std :: string template_index_namespaces { \"index_namespaces\" }; The template file we should we for the namespace index.","title":"variable template_index_namespaces"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_groups","text":"Defined in header <doxybook/config.hpp> std :: string template_index_groups { \"index_groups\" }; The template file we should we for the group index.","title":"variable template_index_groups"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_files","text":"Defined in header <doxybook/config.hpp> std :: string template_index_files { \"index_files\" }; The template file we should we for the file index.","title":"variable template_index_files"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_related_pages","text":"Defined in header <doxybook/config.hpp> std :: string template_index_related_pages { \"index_pages\" }; The template file we should we for the related page index.","title":"variable template_index_related_pages"},{"location":"reference/classes/structdoxybook_1_1config/#variable-template_index_examples","text":"Defined in header <doxybook/config.hpp> std :: string template_index_examples { \"index_examples\" }; The template file we should we for the example index.","title":"variable template_index_examples"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_classes_title","text":"Defined in header <doxybook/config.hpp> std :: string index_classes_title { \"Classes\" }; The title for classes in index pages.","title":"variable index_classes_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_namespaces_title","text":"Defined in header <doxybook/config.hpp> std :: string index_namespaces_title { \"Namespaces\" }; The title for namespaces in index pages.","title":"variable index_namespaces_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_groups_title","text":"Defined in header <doxybook/config.hpp> std :: string index_groups_title { \"Libraries\" }; The title for groups in index pages.","title":"variable index_groups_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_files_title","text":"Defined in header <doxybook/config.hpp> std :: string index_files_title { \"Files\" }; The title for files in index pages.","title":"variable index_files_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_related_pages_title","text":"Defined in header <doxybook/config.hpp> std :: string index_related_pages_title { \"Pages\" }; The title for relatedPages in index pages.","title":"variable index_related_pages_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-index_examples_title","text":"Defined in header <doxybook/config.hpp> std :: string index_examples_title { \"Examples\" }; The title for examples in index pages.","title":"variable index_examples_title"},{"location":"reference/classes/structdoxybook_1_1config/#variable-files_filter","text":"Defined in header <doxybook/config.hpp> std :: vector < std :: string > files_filter {}; The source files allowed in the output? Description An empty list means all files are allowed","title":"variable files_filter"},{"location":"reference/classes/structdoxybook_1_1config/#variable-folders_to_generate","text":"Defined in header <doxybook/config.hpp> std :: vector < folder_category > folders_to_generate { folder_category :: MODULES , folder_category :: CLASSES , folder_category :: FILES , folder_category :: PAGES , folder_category :: NAMESPACES , folder_category :: EXAMPLES , }; Folders we should generate.","title":"variable folders_to_generate"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulainlinestart","text":"Defined in header <doxybook/config.hpp> std :: string formulaInlineStart { \" \\\\ (\" }; Token for latex formulas inline start.","title":"variable formulaInlineStart"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulainlineend","text":"Defined in header <doxybook/config.hpp> std :: string formulaInlineEnd { \" \\\\ )\" }; Token for latex formulas inline end.","title":"variable formulaInlineEnd"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulablockstart","text":"Defined in header <doxybook/config.hpp> std :: string formulaBlockStart { \" \\\\ [\" }; Token for latex formulas block start.","title":"variable formulaBlockStart"},{"location":"reference/classes/structdoxybook_1_1config/#variable-formulablockend","text":"Defined in header <doxybook/config.hpp> std :: string formulaBlockEnd { \" \\\\ ]\" }; Token for latex formulas block end. Updated on 2022-11-17","title":"variable formulaBlockEnd"},{"location":"reference/classes/structdoxybook_1_1default__template/","text":"doxybook::default_template Defined in header <doxybook/default_templates.hpp> struct default_template ; Describe the default template for a page. Public Attributes Member Public Attributes Description src The template source. (public variable) dependencies Files on which the template depends. (public variable) Public Attributes variable src Defined in header <doxybook/default_templates.hpp> std :: string src ; The template source. variable dependencies Defined in header <doxybook/default_templates.hpp> std :: vector < std :: string > dependencies ; Files on which the template depends. Updated on 2022-11-17","title":"doxybook::default_template"},{"location":"reference/classes/structdoxybook_1_1default__template/#doxybookdefault_template","text":"Defined in header <doxybook/default_templates.hpp> struct default_template ; Describe the default template for a page.","title":"doxybook::default_template"},{"location":"reference/classes/structdoxybook_1_1default__template/#public-attributes","text":"Member Public Attributes Description src The template source. (public variable) dependencies Files on which the template depends. (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1default__template/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1default__template/#variable-src","text":"Defined in header <doxybook/default_templates.hpp> std :: string src ; The template source.","title":"variable src"},{"location":"reference/classes/structdoxybook_1_1default__template/#variable-dependencies","text":"Defined in header <doxybook/default_templates.hpp> std :: vector < std :: string > dependencies ; Files on which the template depends. Updated on 2022-11-17","title":"variable dependencies"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/","text":"doxybook::generator::summary_section Defined in header <doxybook/generator.hpp> struct summary_section ; A section we should generate. Public Attributes Member Public Attributes Description type The type of the section. (public variable) filter The kinds we should use. (public variable) skip The kinds we should skip. (public variable) Public Attributes variable type Defined in header <doxybook/generator.hpp> folder_category type ; The type of the section. variable filter Defined in header <doxybook/generator.hpp> filter_set filter ; The kinds we should use. variable skip Defined in header <doxybook/generator.hpp> filter_set skip ; The kinds we should skip. Updated on 2022-11-17","title":"doxybook::generator::summary_section"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#doxybookgeneratorsummary_section","text":"Defined in header <doxybook/generator.hpp> struct summary_section ; A section we should generate.","title":"doxybook::generator::summary_section"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#public-attributes","text":"Member Public Attributes Description type The type of the section. (public variable) filter The kinds we should use. (public variable) skip The kinds we should skip. (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-type","text":"Defined in header <doxybook/generator.hpp> folder_category type ; The type of the section.","title":"variable type"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-filter","text":"Defined in header <doxybook/generator.hpp> filter_set filter ; The kinds we should use.","title":"variable filter"},{"location":"reference/classes/structdoxybook_1_1generator_1_1summary__section/#variable-skip","text":"Defined in header <doxybook/generator.hpp> filter_set skip ; The kinds we should skip. Updated on 2022-11-17","title":"variable skip"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/","text":"doxybook::node::class_reference Defined in header <doxybook/node.hpp> struct class_reference ; A reference to a class. Description These are usually used to represent base and derived classes Public Attributes Member Public Attributes Description name std::string (public variable) refid std::string (public variable) prot visibility (public variable) virt virtual_category (public variable) ptr node const * (public variable) Public Attributes variable name Defined in header <doxybook/node.hpp> std :: string name ; variable refid Defined in header <doxybook/node.hpp> std :: string refid ; variable prot Defined in header <doxybook/node.hpp> visibility prot ; variable virt Defined in header <doxybook/node.hpp> virtual_category virt ; variable ptr Defined in header <doxybook/node.hpp> node const * ptr { nullptr }; Updated on 2022-11-17","title":"doxybook::node::class_reference"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#doxybooknodeclass_reference","text":"Defined in header <doxybook/node.hpp> struct class_reference ; A reference to a class. Description These are usually used to represent base and derived classes","title":"doxybook::node::class_reference"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#public-attributes","text":"Member Public Attributes Description name std::string (public variable) refid std::string (public variable) prot visibility (public variable) virt virtual_category (public variable) ptr node const * (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-name","text":"Defined in header <doxybook/node.hpp> std :: string name ;","title":"variable name"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-refid","text":"Defined in header <doxybook/node.hpp> std :: string refid ;","title":"variable refid"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-prot","text":"Defined in header <doxybook/node.hpp> visibility prot ;","title":"variable prot"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-virt","text":"Defined in header <doxybook/node.hpp> virtual_category virt ;","title":"variable virt"},{"location":"reference/classes/structdoxybook_1_1node_1_1class__reference/#variable-ptr","text":"Defined in header <doxybook/node.hpp> node const * ptr { nullptr }; Updated on 2022-11-17","title":"variable ptr"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/","text":"doxybook::node::data Defined in header <doxybook/node.hpp> struct data ; The data in a doxygen node. Public Attributes Member Public Attributes Description base_classes std::vector< class_reference > (public variable) definition std::string (public variable) args_string std::string (public variable) initializer std::string (public variable) derived_classes std::vector< class_reference > (public variable) is_abstract bool (public variable) is_static bool (public variable) is_const bool (public variable) is_explicit bool (public variable) is_strong bool (public variable) is_inline bool (public variable) is_default bool (public variable) is_deleted bool (public variable) is_override bool (public variable) location source_location (public variable) details std::string (public variable) in_body std::string (public variable) includes std::string (public variable) type std::string (public variable) type_plain std::string (public variable) deprecated std::string (public variable) params std::vector< param > (public variable) template_params std::vector< param > (public variable) see std::vector< std::string > (public variable) returns std::vector< std::string > (public variable) authors std::vector< std::string > (public variable) version std::vector< std::string > (public variable) since std::vector< std::string > (public variable) date std::vector< std::string > (public variable) note std::vector< std::string > (public variable) warning std::vector< std::string > (public variable) pre std::vector< std::string > (public variable) post std::vector< std::string > (public variable) copyright std::vector< std::string > (public variable) invariant std::vector< std::string > (public variable) remark std::vector< std::string > (public variable) attention std::vector< std::string > (public variable) par std::vector< std::string > (public variable) rcs std::vector< std::string > (public variable) bugs std::vector< std::string > (public variable) tests std::vector< std::string > (public variable) todos std::vector< std::string > (public variable) param_list std::vector< node::parameter_list_item > (public variable) returns_list std::vector< node::parameter_list_item > (public variable) template_params_list std::vector< node::parameter_list_item > (public variable) exceptions_list std::vector< node::parameter_list_item > (public variable) reimplements node const * (public variable) reimplemented_by std::vector< node const * > (public variable) program_listing std::string (public variable) Public Attributes variable base_classes Defined in header <doxybook/node.hpp> std :: vector < class_reference > base_classes ; variable definition Defined in header <doxybook/node.hpp> std :: string definition ; variable args_string Defined in header <doxybook/node.hpp> std :: string args_string ; variable initializer Defined in header <doxybook/node.hpp> std :: string initializer ; variable derived_classes Defined in header <doxybook/node.hpp> std :: vector < class_reference > derived_classes ; variable is_abstract Defined in header <doxybook/node.hpp> bool is_abstract { false }; variable is_static Defined in header <doxybook/node.hpp> bool is_static { false }; variable is_const Defined in header <doxybook/node.hpp> bool is_const { false }; variable is_explicit Defined in header <doxybook/node.hpp> bool is_explicit { false }; variable is_strong Defined in header <doxybook/node.hpp> bool is_strong { false }; variable is_inline Defined in header <doxybook/node.hpp> bool is_inline { false }; variable is_default Defined in header <doxybook/node.hpp> bool is_default { false }; variable is_deleted Defined in header <doxybook/node.hpp> bool is_deleted { false }; variable is_override Defined in header <doxybook/node.hpp> bool is_override { false }; variable location Defined in header <doxybook/node.hpp> source_location location ; variable details Defined in header <doxybook/node.hpp> std :: string details ; variable in_body Defined in header <doxybook/node.hpp> std :: string in_body ; variable includes Defined in header <doxybook/node.hpp> std :: string includes ; variable type Defined in header <doxybook/node.hpp> std :: string type ; variable type_plain Defined in header <doxybook/node.hpp> std :: string type_plain ; variable deprecated Defined in header <doxybook/node.hpp> std :: string deprecated ; variable params Defined in header <doxybook/node.hpp> std :: vector < param > params ; variable template_params Defined in header <doxybook/node.hpp> std :: vector < param > template_params ; variable see Defined in header <doxybook/node.hpp> std :: vector < std :: string > see ; variable returns Defined in header <doxybook/node.hpp> std :: vector < std :: string > returns ; variable authors Defined in header <doxybook/node.hpp> std :: vector < std :: string > authors ; variable version Defined in header <doxybook/node.hpp> std :: vector < std :: string > version ; variable since Defined in header <doxybook/node.hpp> std :: vector < std :: string > since ; variable date Defined in header <doxybook/node.hpp> std :: vector < std :: string > date ; variable note Defined in header <doxybook/node.hpp> std :: vector < std :: string > note ; variable warning Defined in header <doxybook/node.hpp> std :: vector < std :: string > warning ; variable pre Defined in header <doxybook/node.hpp> std :: vector < std :: string > pre ; variable post Defined in header <doxybook/node.hpp> std :: vector < std :: string > post ; variable copyright Defined in header <doxybook/node.hpp> std :: vector < std :: string > copyright ; variable invariant Defined in header <doxybook/node.hpp> std :: vector < std :: string > invariant ; variable remark Defined in header <doxybook/node.hpp> std :: vector < std :: string > remark ; variable attention Defined in header <doxybook/node.hpp> std :: vector < std :: string > attention ; variable par Defined in header <doxybook/node.hpp> std :: vector < std :: string > par ; variable rcs Defined in header <doxybook/node.hpp> std :: vector < std :: string > rcs ; variable bugs Defined in header <doxybook/node.hpp> std :: vector < std :: string > bugs ; variable tests Defined in header <doxybook/node.hpp> std :: vector < std :: string > tests ; variable todos Defined in header <doxybook/node.hpp> std :: vector < std :: string > todos ; variable param_list Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > param_list ; variable returns_list Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > returns_list ; variable template_params_list Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > template_params_list ; variable exceptions_list Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > exceptions_list ; variable reimplements Defined in header <doxybook/node.hpp> node const * reimplements { nullptr }; variable reimplemented_by Defined in header <doxybook/node.hpp> std :: vector < node const * > reimplemented_by ; variable program_listing Defined in header <doxybook/node.hpp> std :: string program_listing ; Updated on 2022-11-17","title":"doxybook::node::data"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#doxybooknodedata","text":"Defined in header <doxybook/node.hpp> struct data ; The data in a doxygen node.","title":"doxybook::node::data"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#public-attributes","text":"Member Public Attributes Description base_classes std::vector< class_reference > (public variable) definition std::string (public variable) args_string std::string (public variable) initializer std::string (public variable) derived_classes std::vector< class_reference > (public variable) is_abstract bool (public variable) is_static bool (public variable) is_const bool (public variable) is_explicit bool (public variable) is_strong bool (public variable) is_inline bool (public variable) is_default bool (public variable) is_deleted bool (public variable) is_override bool (public variable) location source_location (public variable) details std::string (public variable) in_body std::string (public variable) includes std::string (public variable) type std::string (public variable) type_plain std::string (public variable) deprecated std::string (public variable) params std::vector< param > (public variable) template_params std::vector< param > (public variable) see std::vector< std::string > (public variable) returns std::vector< std::string > (public variable) authors std::vector< std::string > (public variable) version std::vector< std::string > (public variable) since std::vector< std::string > (public variable) date std::vector< std::string > (public variable) note std::vector< std::string > (public variable) warning std::vector< std::string > (public variable) pre std::vector< std::string > (public variable) post std::vector< std::string > (public variable) copyright std::vector< std::string > (public variable) invariant std::vector< std::string > (public variable) remark std::vector< std::string > (public variable) attention std::vector< std::string > (public variable) par std::vector< std::string > (public variable) rcs std::vector< std::string > (public variable) bugs std::vector< std::string > (public variable) tests std::vector< std::string > (public variable) todos std::vector< std::string > (public variable) param_list std::vector< node::parameter_list_item > (public variable) returns_list std::vector< node::parameter_list_item > (public variable) template_params_list std::vector< node::parameter_list_item > (public variable) exceptions_list std::vector< node::parameter_list_item > (public variable) reimplements node const * (public variable) reimplemented_by std::vector< node const * > (public variable) program_listing std::string (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-base_classes","text":"Defined in header <doxybook/node.hpp> std :: vector < class_reference > base_classes ;","title":"variable base_classes"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-definition","text":"Defined in header <doxybook/node.hpp> std :: string definition ;","title":"variable definition"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-args_string","text":"Defined in header <doxybook/node.hpp> std :: string args_string ;","title":"variable args_string"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-initializer","text":"Defined in header <doxybook/node.hpp> std :: string initializer ;","title":"variable initializer"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-derived_classes","text":"Defined in header <doxybook/node.hpp> std :: vector < class_reference > derived_classes ;","title":"variable derived_classes"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_abstract","text":"Defined in header <doxybook/node.hpp> bool is_abstract { false };","title":"variable is_abstract"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_static","text":"Defined in header <doxybook/node.hpp> bool is_static { false };","title":"variable is_static"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_const","text":"Defined in header <doxybook/node.hpp> bool is_const { false };","title":"variable is_const"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_explicit","text":"Defined in header <doxybook/node.hpp> bool is_explicit { false };","title":"variable is_explicit"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_strong","text":"Defined in header <doxybook/node.hpp> bool is_strong { false };","title":"variable is_strong"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_inline","text":"Defined in header <doxybook/node.hpp> bool is_inline { false };","title":"variable is_inline"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_default","text":"Defined in header <doxybook/node.hpp> bool is_default { false };","title":"variable is_default"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_deleted","text":"Defined in header <doxybook/node.hpp> bool is_deleted { false };","title":"variable is_deleted"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-is_override","text":"Defined in header <doxybook/node.hpp> bool is_override { false };","title":"variable is_override"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-location","text":"Defined in header <doxybook/node.hpp> source_location location ;","title":"variable location"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-details","text":"Defined in header <doxybook/node.hpp> std :: string details ;","title":"variable details"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-in_body","text":"Defined in header <doxybook/node.hpp> std :: string in_body ;","title":"variable in_body"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-includes","text":"Defined in header <doxybook/node.hpp> std :: string includes ;","title":"variable includes"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-type","text":"Defined in header <doxybook/node.hpp> std :: string type ;","title":"variable type"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-type_plain","text":"Defined in header <doxybook/node.hpp> std :: string type_plain ;","title":"variable type_plain"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-deprecated","text":"Defined in header <doxybook/node.hpp> std :: string deprecated ;","title":"variable deprecated"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-params","text":"Defined in header <doxybook/node.hpp> std :: vector < param > params ;","title":"variable params"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-template_params","text":"Defined in header <doxybook/node.hpp> std :: vector < param > template_params ;","title":"variable template_params"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-see","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > see ;","title":"variable see"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-returns","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > returns ;","title":"variable returns"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-authors","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > authors ;","title":"variable authors"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-version","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > version ;","title":"variable version"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-since","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > since ;","title":"variable since"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-date","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > date ;","title":"variable date"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-note","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > note ;","title":"variable note"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-warning","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > warning ;","title":"variable warning"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-pre","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > pre ;","title":"variable pre"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-post","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > post ;","title":"variable post"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-copyright","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > copyright ;","title":"variable copyright"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-invariant","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > invariant ;","title":"variable invariant"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-remark","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > remark ;","title":"variable remark"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-attention","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > attention ;","title":"variable attention"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-par","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > par ;","title":"variable par"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-rcs","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > rcs ;","title":"variable rcs"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-bugs","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > bugs ;","title":"variable bugs"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-tests","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > tests ;","title":"variable tests"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-todos","text":"Defined in header <doxybook/node.hpp> std :: vector < std :: string > todos ;","title":"variable todos"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-param_list","text":"Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > param_list ;","title":"variable param_list"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-returns_list","text":"Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > returns_list ;","title":"variable returns_list"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-template_params_list","text":"Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > template_params_list ;","title":"variable template_params_list"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-exceptions_list","text":"Defined in header <doxybook/node.hpp> std :: vector < node :: parameter_list_item > exceptions_list ;","title":"variable exceptions_list"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-reimplements","text":"Defined in header <doxybook/node.hpp> node const * reimplements { nullptr };","title":"variable reimplements"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-reimplemented_by","text":"Defined in header <doxybook/node.hpp> std :: vector < node const * > reimplemented_by ;","title":"variable reimplemented_by"},{"location":"reference/classes/structdoxybook_1_1node_1_1data/#variable-program_listing","text":"Defined in header <doxybook/node.hpp> std :: string program_listing ; Updated on 2022-11-17","title":"variable program_listing"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/","text":"doxybook::node::param Defined in header <doxybook/node.hpp> struct param ; A parameter. Description This is used for parameters and template parameters. Public Attributes Member Public Attributes Description type std::string (public variable) type_plain std::string (public variable) name std::string (public variable) def_val std::string (public variable) def_val_plain std::string (public variable) Public Attributes variable type Defined in header <doxybook/node.hpp> std :: string type ; variable type_plain Defined in header <doxybook/node.hpp> std :: string type_plain ; variable name Defined in header <doxybook/node.hpp> std :: string name ; variable def_val Defined in header <doxybook/node.hpp> std :: string def_val ; variable def_val_plain Defined in header <doxybook/node.hpp> std :: string def_val_plain ; Updated on 2022-11-17","title":"doxybook::node::param"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#doxybooknodeparam","text":"Defined in header <doxybook/node.hpp> struct param ; A parameter. Description This is used for parameters and template parameters.","title":"doxybook::node::param"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#public-attributes","text":"Member Public Attributes Description type std::string (public variable) type_plain std::string (public variable) name std::string (public variable) def_val std::string (public variable) def_val_plain std::string (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-type","text":"Defined in header <doxybook/node.hpp> std :: string type ;","title":"variable type"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-type_plain","text":"Defined in header <doxybook/node.hpp> std :: string type_plain ;","title":"variable type_plain"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-name","text":"Defined in header <doxybook/node.hpp> std :: string name ;","title":"variable name"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-def_val","text":"Defined in header <doxybook/node.hpp> std :: string def_val ;","title":"variable def_val"},{"location":"reference/classes/structdoxybook_1_1node_1_1param/#variable-def_val_plain","text":"Defined in header <doxybook/node.hpp> std :: string def_val_plain ; Updated on 2022-11-17","title":"variable def_val_plain"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/","text":"doxybook::node::parameter_list_item Defined in header <doxybook/node.hpp> struct parameter_list_item ; An item in a list of parameters. Description These could be used for parameters, return values, template parameters, and exceptions. Public Attributes Member Public Attributes Description name std::string (public variable) text std::string (public variable) Public Attributes variable name Defined in header <doxybook/node.hpp> std :: string name ; variable text Defined in header <doxybook/node.hpp> std :: string text ; Updated on 2022-11-17","title":"doxybook::node::parameter_list_item"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#doxybooknodeparameter_list_item","text":"Defined in header <doxybook/node.hpp> struct parameter_list_item ; An item in a list of parameters. Description These could be used for parameters, return values, template parameters, and exceptions.","title":"doxybook::node::parameter_list_item"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#public-attributes","text":"Member Public Attributes Description name std::string (public variable) text std::string (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#variable-name","text":"Defined in header <doxybook/node.hpp> std :: string name ;","title":"variable name"},{"location":"reference/classes/structdoxybook_1_1node_1_1parameter__list__item/#variable-text","text":"Defined in header <doxybook/node.hpp> std :: string text ; Updated on 2022-11-17","title":"variable text"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/","text":"doxybook::node::source_location Defined in header <doxybook/node.hpp> struct source_location ; Source code location. Public Attributes Member Public Attributes Description file std::string (public variable) line int (public variable) column int (public variable) body_file std::string (public variable) body_start int (public variable) body_end int (public variable) Public Attributes variable file Defined in header <doxybook/node.hpp> std :: string file ; variable line Defined in header <doxybook/node.hpp> int line { 0 }; variable column Defined in header <doxybook/node.hpp> int column { 0 }; variable body_file Defined in header <doxybook/node.hpp> std :: string body_file ; variable body_start Defined in header <doxybook/node.hpp> int body_start { 0 }; variable body_end Defined in header <doxybook/node.hpp> int body_end { 0 }; Updated on 2022-11-17","title":"doxybook::node::source_location"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#doxybooknodesource_location","text":"Defined in header <doxybook/node.hpp> struct source_location ; Source code location.","title":"doxybook::node::source_location"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#public-attributes","text":"Member Public Attributes Description file std::string (public variable) line int (public variable) column int (public variable) body_file std::string (public variable) body_start int (public variable) body_end int (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-file","text":"Defined in header <doxybook/node.hpp> std :: string file ;","title":"variable file"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-line","text":"Defined in header <doxybook/node.hpp> int line { 0 };","title":"variable line"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-column","text":"Defined in header <doxybook/node.hpp> int column { 0 };","title":"variable column"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_file","text":"Defined in header <doxybook/node.hpp> std :: string body_file ;","title":"variable body_file"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_start","text":"Defined in header <doxybook/node.hpp> int body_start { 0 };","title":"variable body_start"},{"location":"reference/classes/structdoxybook_1_1node_1_1source__location/#variable-body_end","text":"Defined in header <doxybook/node.hpp> int body_end { 0 }; Updated on 2022-11-17","title":"variable body_end"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/","text":"doxybook::text_markdown_printer::list_data Defined in header <doxybook/text_markdown_printer.hpp> struct list_data ; Public Attributes Member Public Attributes Description counter int (public variable) ordered bool (public variable) Public Attributes variable counter Defined in header <doxybook/text_markdown_printer.hpp> int counter { 0 }; variable ordered Defined in header <doxybook/text_markdown_printer.hpp> bool ordered { false }; Updated on 2022-11-17","title":"doxybook::text_markdown_printer::list_data"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#doxybooktext_markdown_printerlist_data","text":"Defined in header <doxybook/text_markdown_printer.hpp> struct list_data ;","title":"doxybook::text_markdown_printer::list_data"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#public-attributes","text":"Member Public Attributes Description counter int (public variable) ordered bool (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#variable-counter","text":"Defined in header <doxybook/text_markdown_printer.hpp> int counter { 0 };","title":"variable counter"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1list__data/#variable-ordered","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool ordered { false }; Updated on 2022-11-17","title":"variable ordered"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/","text":"doxybook::text_markdown_printer::print_data Defined in header <doxybook/text_markdown_printer.hpp> struct print_data ; Public Attributes Member Public Attributes Description ss std::stringstream (public variable) indent int (public variable) lists std::list< list_data > (public variable) quote bool (public variable) eol bool (public variable) table_header bool (public variable) in_computer_output bool (public variable) valid_link bool (public variable) Public Attributes variable ss Defined in header <doxybook/text_markdown_printer.hpp> std :: stringstream ss ; variable indent Defined in header <doxybook/text_markdown_printer.hpp> int indent { 0 }; variable lists Defined in header <doxybook/text_markdown_printer.hpp> std :: list < list_data > lists ; variable quote Defined in header <doxybook/text_markdown_printer.hpp> bool quote { false }; variable eol Defined in header <doxybook/text_markdown_printer.hpp> bool eol { false }; variable table_header Defined in header <doxybook/text_markdown_printer.hpp> bool table_header { false }; variable in_computer_output Defined in header <doxybook/text_markdown_printer.hpp> bool in_computer_output { false }; variable valid_link Defined in header <doxybook/text_markdown_printer.hpp> bool valid_link { false }; Updated on 2022-11-17","title":"doxybook::text_markdown_printer::print_data"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#doxybooktext_markdown_printerprint_data","text":"Defined in header <doxybook/text_markdown_printer.hpp> struct print_data ;","title":"doxybook::text_markdown_printer::print_data"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#public-attributes","text":"Member Public Attributes Description ss std::stringstream (public variable) indent int (public variable) lists std::list< list_data > (public variable) quote bool (public variable) eol bool (public variable) table_header bool (public variable) in_computer_output bool (public variable) valid_link bool (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-ss","text":"Defined in header <doxybook/text_markdown_printer.hpp> std :: stringstream ss ;","title":"variable ss"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-indent","text":"Defined in header <doxybook/text_markdown_printer.hpp> int indent { 0 };","title":"variable indent"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-lists","text":"Defined in header <doxybook/text_markdown_printer.hpp> std :: list < list_data > lists ;","title":"variable lists"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-quote","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool quote { false };","title":"variable quote"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-eol","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool eol { false };","title":"variable eol"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-table_header","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool table_header { false };","title":"variable table_header"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-in_computer_output","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool in_computer_output { false };","title":"variable in_computer_output"},{"location":"reference/classes/structdoxybook_1_1text__markdown__printer_1_1print__data/#variable-valid_link","text":"Defined in header <doxybook/text_markdown_printer.hpp> bool valid_link { false }; Updated on 2022-11-17","title":"variable valid_link"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/","text":"doxybook::xml_text_parser::node Defined in header <doxybook/xml_text_parser.hpp> struct node ; A parsed xml node. Public Types Member Types Definition type The node type. (enum) Public Attributes Member Public Attributes Description type The node type. (public variable) children The child nodes. (public variable) data The node data as a string. (public variable) extra Extra data. (public variable) Public Types enum type Defined in header <doxybook/xml_text_parser.hpp> enum class type ; Enumerator Value Description UNKNOWN -1 TEXT 0 PARA PARAS BOLD EMPHASIS STRIKE HRULER IMAGE ULINK REF COMPUTEROUTPUT LISTITEM SIMPLESEC ITEMIZEDLIST VARIABLELIST ORDEREDLIST PARAMETERLIST PARAMETERNAME PARAMETERITEM PARAMETERDESCRIPTION PARAMETERNAMELIST XREFSECT XREFTITLE XREFDESCRIPTION PROGRAMLISTING CODELINE TERM VARLISTENTRY ANCHOR SP HIGHTLIGHT SECT1 SECT2 SECT3 SECT4 SECT5 SECT6 TITLE SUPERSCRIPT NONBREAKSPACE TABLE TABLE_ROW TABLE_CELL VERBATIM SQUO NDASH MDASH LINEBREAK ONLYFOR FORMULA BLOCKQUOTE The node type. Public Attributes variable type Defined in header <doxybook/xml_text_parser.hpp> type type { type :: UNKNOWN }; The node type. variable children Defined in header <doxybook/xml_text_parser.hpp> std :: vector < node > children ; The child nodes. variable data Defined in header <doxybook/xml_text_parser.hpp> std :: string data ; The node data as a string. variable extra Defined in header <doxybook/xml_text_parser.hpp> std :: string extra ; Extra data. Updated on 2022-11-17","title":"doxybook::xml_text_parser::node"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#doxybookxml_text_parsernode","text":"Defined in header <doxybook/xml_text_parser.hpp> struct node ; A parsed xml node.","title":"doxybook::xml_text_parser::node"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-types","text":"Member Types Definition type The node type. (enum)","title":"Public Types"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-attributes","text":"Member Public Attributes Description type The node type. (public variable) children The child nodes. (public variable) data The node data as a string. (public variable) extra Extra data. (public variable)","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-types_1","text":"","title":"Public Types"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#enum-type","text":"Defined in header <doxybook/xml_text_parser.hpp> enum class type ; Enumerator Value Description UNKNOWN -1 TEXT 0 PARA PARAS BOLD EMPHASIS STRIKE HRULER IMAGE ULINK REF COMPUTEROUTPUT LISTITEM SIMPLESEC ITEMIZEDLIST VARIABLELIST ORDEREDLIST PARAMETERLIST PARAMETERNAME PARAMETERITEM PARAMETERDESCRIPTION PARAMETERNAMELIST XREFSECT XREFTITLE XREFDESCRIPTION PROGRAMLISTING CODELINE TERM VARLISTENTRY ANCHOR SP HIGHTLIGHT SECT1 SECT2 SECT3 SECT4 SECT5 SECT6 TITLE SUPERSCRIPT NONBREAKSPACE TABLE TABLE_ROW TABLE_CELL VERBATIM SQUO NDASH MDASH LINEBREAK ONLYFOR FORMULA BLOCKQUOTE The node type.","title":"enum type"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#public-attributes_1","text":"","title":"Public Attributes"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-type","text":"Defined in header <doxybook/xml_text_parser.hpp> type type { type :: UNKNOWN }; The node type.","title":"variable type"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-children","text":"Defined in header <doxybook/xml_text_parser.hpp> std :: vector < node > children ; The child nodes.","title":"variable children"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-data","text":"Defined in header <doxybook/xml_text_parser.hpp> std :: string data ; The node data as a string.","title":"variable data"},{"location":"reference/classes/structdoxybook_1_1xml__text__parser_1_1node/#variable-extra","text":"Defined in header <doxybook/xml_text_parser.hpp> std :: string extra ; Extra data. Updated on 2022-11-17","title":"variable extra"},{"location":"reference/examples/","text":"Examples Example Updated on 2022-11-17","title":"Examples"},{"location":"reference/examples/#examples","text":"Example Updated on 2022-11-17","title":"Examples"},{"location":"reference/files/","text":"Files File doxybook (directory) doxybook/config.hpp (file) doxybook/default_templates.hpp (file) doxybook/doxygen.hpp (file) doxybook/enums.hpp (file) doxybook/exception.hpp (file) doxybook/exception_utils.hpp (file) doxybook/generator.hpp (file) doxybook/json_converter.hpp (file) doxybook/node.hpp (file) doxybook/path.hpp (file) doxybook/renderer.hpp (file) doxybook/text_markdown_printer.hpp (file) doxybook/text_plain_printer.hpp (file) doxybook/text_printer.hpp (file) doxybook/utils.hpp (file) doxybook/xml.hpp (file) doxybook/xml_text_parser.hpp (file) Updated on 2022-11-17","title":"Files"},{"location":"reference/files/#files","text":"File doxybook (directory) doxybook/config.hpp (file) doxybook/default_templates.hpp (file) doxybook/doxygen.hpp (file) doxybook/enums.hpp (file) doxybook/exception.hpp (file) doxybook/exception_utils.hpp (file) doxybook/generator.hpp (file) doxybook/json_converter.hpp (file) doxybook/node.hpp (file) doxybook/path.hpp (file) doxybook/renderer.hpp (file) doxybook/text_markdown_printer.hpp (file) doxybook/text_plain_printer.hpp (file) doxybook/text_printer.hpp (file) doxybook/utils.hpp (file) doxybook/xml.hpp (file) doxybook/xml_text_parser.hpp (file) Updated on 2022-11-17","title":"Files"},{"location":"reference/files/config_8hpp/","text":"doxybook/config.hpp #include <doxybook/config.hpp> Namespaces Name Description doxybook Classes Classes Description config Configuration for the doxygen and generator classes. (struct) Updated on 2022-11-17","title":"doxybook/config.hpp"},{"location":"reference/files/config_8hpp/#doxybookconfighpp","text":"#include <doxybook/config.hpp>","title":"doxybook/config.hpp"},{"location":"reference/files/config_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/config_8hpp/#classes","text":"Classes Description config Configuration for the doxygen and generator classes. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/default__templates_8hpp/","text":"doxybook/default_templates.hpp #include <doxybook/default_templates.hpp> Namespaces Name Description doxybook Classes Classes Description default_template Describe the default template for a page. (struct) Updated on 2022-11-17","title":"doxybook/default_templates.hpp"},{"location":"reference/files/default__templates_8hpp/#doxybookdefault_templateshpp","text":"#include <doxybook/default_templates.hpp>","title":"doxybook/default_templates.hpp"},{"location":"reference/files/default__templates_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/default__templates_8hpp/#classes","text":"Classes Description default_template Describe the default template for a page. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/dir_be054a2fbefc2d6b92396c28cd6dc939/","text":"doxybook Files Files Description doxybook/config.hpp doxybook/default_templates.hpp doxybook/doxygen.hpp doxybook/enums.hpp doxybook/exception.hpp doxybook/exception_utils.hpp doxybook/generator.hpp doxybook/json_converter.hpp doxybook/node.hpp doxybook/path.hpp doxybook/renderer.hpp doxybook/text_markdown_printer.hpp doxybook/text_plain_printer.hpp doxybook/text_printer.hpp doxybook/utils.hpp doxybook/xml.hpp doxybook/xml_text_parser.hpp Updated on 2022-11-17","title":"doxybook"},{"location":"reference/files/dir_be054a2fbefc2d6b92396c28cd6dc939/#doxybook","text":"","title":"doxybook"},{"location":"reference/files/dir_be054a2fbefc2d6b92396c28cd6dc939/#files","text":"Files Description doxybook/config.hpp doxybook/default_templates.hpp doxybook/doxygen.hpp doxybook/enums.hpp doxybook/exception.hpp doxybook/exception_utils.hpp doxybook/generator.hpp doxybook/json_converter.hpp doxybook/node.hpp doxybook/path.hpp doxybook/renderer.hpp doxybook/text_markdown_printer.hpp doxybook/text_plain_printer.hpp doxybook/text_printer.hpp doxybook/utils.hpp doxybook/xml.hpp doxybook/xml_text_parser.hpp Updated on 2022-11-17","title":"Files"},{"location":"reference/files/doxygen_8hpp/","text":"doxybook/doxygen.hpp #include <doxybook/doxygen.hpp> Namespaces Name Description doxybook Classes Classes Description doxygen All the nodes representing the content of doxygen xml files. (class) Updated on 2022-11-17","title":"doxybook/doxygen.hpp"},{"location":"reference/files/doxygen_8hpp/#doxybookdoxygenhpp","text":"#include <doxybook/doxygen.hpp>","title":"doxybook/doxygen.hpp"},{"location":"reference/files/doxygen_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/doxygen_8hpp/#classes","text":"Classes Description doxygen All the nodes representing the content of doxygen xml files. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/enums_8hpp/","text":"doxybook/enums.hpp #include <doxybook/enums.hpp> Namespaces Name Description doxybook Updated on 2022-11-17","title":"doxybook/enums.hpp"},{"location":"reference/files/enums_8hpp/#doxybookenumshpp","text":"#include <doxybook/enums.hpp>","title":"doxybook/enums.hpp"},{"location":"reference/files/enums_8hpp/#namespaces","text":"Name Description doxybook Updated on 2022-11-17","title":"Namespaces"},{"location":"reference/files/exception_8hpp/","text":"doxybook/exception.hpp #include <doxybook/exception.hpp> Namespaces Name Description doxybook Classes Classes Description exception Doxybook exceptions. (class) Updated on 2022-11-17","title":"doxybook/exception.hpp"},{"location":"reference/files/exception_8hpp/#doxybookexceptionhpp","text":"#include <doxybook/exception.hpp>","title":"doxybook/exception.hpp"},{"location":"reference/files/exception_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/exception_8hpp/#classes","text":"Classes Description exception Doxybook exceptions. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/exception__utils_8hpp/","text":"doxybook/exception_utils.hpp #include <doxybook/exception_utils.hpp> Updated on 2022-11-17","title":"doxybook/exception_utils.hpp"},{"location":"reference/files/exception__utils_8hpp/#doxybookexception_utilshpp","text":"#include <doxybook/exception_utils.hpp> Updated on 2022-11-17","title":"doxybook/exception_utils.hpp"},{"location":"reference/files/generator_8hpp/","text":"doxybook/generator.hpp #include <doxybook/generator.hpp> Namespaces Name Description doxybook Classes Classes Description generator A class that stores a doxygen object and generates the markdown documentation. (class) summary_section A section we should generate. (struct) Updated on 2022-11-17","title":"doxybook/generator.hpp"},{"location":"reference/files/generator_8hpp/#doxybookgeneratorhpp","text":"#include <doxybook/generator.hpp>","title":"doxybook/generator.hpp"},{"location":"reference/files/generator_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/generator_8hpp/#classes","text":"Classes Description generator A class that stores a doxygen object and generates the markdown documentation. (class) summary_section A section we should generate. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/json__converter_8hpp/","text":"doxybook/json_converter.hpp #include <doxybook/json_converter.hpp> Namespaces Name Description doxybook Classes Classes Description json_converter Convert elements to json so they can be rendered with inja. (class) Updated on 2022-11-17","title":"doxybook/json_converter.hpp"},{"location":"reference/files/json__converter_8hpp/#doxybookjson_converterhpp","text":"#include <doxybook/json_converter.hpp>","title":"doxybook/json_converter.hpp"},{"location":"reference/files/json__converter_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/json__converter_8hpp/#classes","text":"Classes Description json_converter Convert elements to json so they can be rendered with inja. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/node_8hpp/","text":"doxybook/node.hpp #include <doxybook/node.hpp> Namespaces Name Description doxybook Classes Classes Description node A doxygen node. (class) class_reference A reference to a class. (struct) source_location Source code location. (struct) param A parameter. (struct) parameter_list_item An item in a list of parameters. (struct) data The data in a doxygen node. (struct) Updated on 2022-11-17","title":"doxybook/node.hpp"},{"location":"reference/files/node_8hpp/#doxybooknodehpp","text":"#include <doxybook/node.hpp>","title":"doxybook/node.hpp"},{"location":"reference/files/node_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/node_8hpp/#classes","text":"Classes Description node A doxygen node. (class) class_reference A reference to a class. (struct) source_location Source code location. (struct) param A parameter. (struct) parameter_list_item An item in a list of parameters. (struct) data The data in a doxygen node. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/path_8hpp/","text":"doxybook/path.hpp #include <doxybook/path.hpp> Namespaces Name Description doxybook doxybook::path Updated on 2022-11-17","title":"doxybook/path.hpp"},{"location":"reference/files/path_8hpp/#doxybookpathhpp","text":"#include <doxybook/path.hpp>","title":"doxybook/path.hpp"},{"location":"reference/files/path_8hpp/#namespaces","text":"Name Description doxybook doxybook::path Updated on 2022-11-17","title":"Namespaces"},{"location":"reference/files/renderer_8hpp/","text":"doxybook/renderer.hpp #include <doxybook/renderer.hpp> Namespaces Name Description doxybook Classes Classes Description renderer Render inja templates with the specified configuration. (class) Updated on 2022-11-17","title":"doxybook/renderer.hpp"},{"location":"reference/files/renderer_8hpp/#doxybookrendererhpp","text":"#include <doxybook/renderer.hpp>","title":"doxybook/renderer.hpp"},{"location":"reference/files/renderer_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/renderer_8hpp/#classes","text":"Classes Description renderer Render inja templates with the specified configuration. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/text__markdown__printer_8hpp/","text":"doxybook/text_markdown_printer.hpp #include <doxybook/text_markdown_printer.hpp> Namespaces Name Description doxybook Classes Classes Description text_markdown_printer Print xml nodes as markdown. (class) Updated on 2022-11-17","title":"doxybook/text_markdown_printer.hpp"},{"location":"reference/files/text__markdown__printer_8hpp/#doxybooktext_markdown_printerhpp","text":"#include <doxybook/text_markdown_printer.hpp>","title":"doxybook/text_markdown_printer.hpp"},{"location":"reference/files/text__markdown__printer_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/text__markdown__printer_8hpp/#classes","text":"Classes Description text_markdown_printer Print xml nodes as markdown. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/text__plain__printer_8hpp/","text":"doxybook/text_plain_printer.hpp #include <doxybook/text_plain_printer.hpp> Namespaces Name Description doxybook Classes Classes Description text_plain_printer Print elements as plain text. (class) Updated on 2022-11-17","title":"doxybook/text_plain_printer.hpp"},{"location":"reference/files/text__plain__printer_8hpp/#doxybooktext_plain_printerhpp","text":"#include <doxybook/text_plain_printer.hpp>","title":"doxybook/text_plain_printer.hpp"},{"location":"reference/files/text__plain__printer_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/text__plain__printer_8hpp/#classes","text":"Classes Description text_plain_printer Print elements as plain text. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/text__printer_8hpp/","text":"doxybook/text_printer.hpp #include <doxybook/text_printer.hpp> Namespaces Name Description doxybook Classes Classes Description text_printer An abstract text printer. (class) Updated on 2022-11-17","title":"doxybook/text_printer.hpp"},{"location":"reference/files/text__printer_8hpp/#doxybooktext_printerhpp","text":"#include <doxybook/text_printer.hpp>","title":"doxybook/text_printer.hpp"},{"location":"reference/files/text__printer_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/text__printer_8hpp/#classes","text":"Classes Description text_printer An abstract text printer. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/utils_8hpp/","text":"doxybook/utils.hpp #include <doxybook/utils.hpp> Namespaces Name Description doxybook doxybook::utils Updated on 2022-11-17","title":"doxybook/utils.hpp"},{"location":"reference/files/utils_8hpp/#doxybookutilshpp","text":"#include <doxybook/utils.hpp>","title":"doxybook/utils.hpp"},{"location":"reference/files/utils_8hpp/#namespaces","text":"Name Description doxybook doxybook::utils Updated on 2022-11-17","title":"Namespaces"},{"location":"reference/files/xml_8hpp/","text":"doxybook/xml.hpp #include <doxybook/xml.hpp> Namespaces Name Description doxybook Classes Classes Description xml Represents and wraps an xml node. (class) node An xml node. (class) element The data of an element nodes. (class) Updated on 2022-11-17","title":"doxybook/xml.hpp"},{"location":"reference/files/xml_8hpp/#doxybookxmlhpp","text":"#include <doxybook/xml.hpp>","title":"doxybook/xml.hpp"},{"location":"reference/files/xml_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/xml_8hpp/#classes","text":"Classes Description xml Represents and wraps an xml node. (class) node An xml node. (class) element The data of an element nodes. (class) Updated on 2022-11-17","title":"Classes"},{"location":"reference/files/xml__text__parser_8hpp/","text":"doxybook/xml_text_parser.hpp #include <doxybook/xml_text_parser.hpp> Namespaces Name Description doxybook Classes Classes Description xml_text_parser Parser for a doxygen xml file as an xml document. (class) node A parsed xml node. (struct) Updated on 2022-11-17","title":"doxybook/xml_text_parser.hpp"},{"location":"reference/files/xml__text__parser_8hpp/#doxybookxml_text_parserhpp","text":"#include <doxybook/xml_text_parser.hpp>","title":"doxybook/xml_text_parser.hpp"},{"location":"reference/files/xml__text__parser_8hpp/#namespaces","text":"Name Description doxybook","title":"Namespaces"},{"location":"reference/files/xml__text__parser_8hpp/#classes","text":"Classes Description xml_text_parser Parser for a doxygen xml file as an xml document. (class) node A parsed xml node. (struct) Updated on 2022-11-17","title":"Classes"},{"location":"reference/libraries/","text":"Libraries Library Updated on 2022-11-17","title":"Libraries"},{"location":"reference/libraries/#libraries","text":"Library Updated on 2022-11-17","title":"Libraries"},{"location":"reference/namespaces/","text":"Namespaces Namespace doxybook (namespace) path (namespace) utils (namespace) Updated on 2022-11-17","title":"Namespaces"},{"location":"reference/namespaces/#namespaces","text":"Namespace doxybook (namespace) path (namespace) utils (namespace) Updated on 2022-11-17","title":"Namespaces"},{"location":"reference/namespaces/namespacedoxybook/","text":"doxybook Namespaces Name Description doxybook::path doxybook::utils Classes Classes Description config Configuration for the doxygen and generator classes. (struct) default_template Describe the default template for a page. (struct) doxygen All the nodes representing the content of doxygen xml files. (class) exception Doxybook exceptions. (class) generator A class that stores a doxygen object and generates the markdown documentation. (class) json_converter Convert elements to json so they can be rendered with inja. (class) node A doxygen node. (class) renderer Render inja templates with the specified configuration. (class) text_markdown_printer Print xml nodes as markdown. (class) text_plain_printer Print elements as plain text. (class) text_printer An abstract text printer. (class) xml Represents and wraps an xml node. (class) xml_text_parser Parser for a doxygen xml file as an xml document. (class) Types Member Types Definition kind The kind of a symbol in a doxygen xml file. (enum) visibility Types of symbol visibility. (enum) virtual_category Types of virtual functions. (enum) type Doxygen types. (enum) folder_category Types of folder category. (enum) node_cache_map A map of nodes associated to a string. (using) Functions Member Functions Description load_config Load configuration from a path. (function) load_config_data Load configuration from a json string. (function) save_config Save configuration to a path. (function) save_default_templates Save default templates. (function) to_enum_kind Convert a string to a doxygen kind. (function) to_enum_type Convert a string to a doxygen type. (function) to_enum_visibility Convert a string to a doxygen visibility type. (function) to_enum_virtual Convert a string to a doxygen virtual category. (function) to_enum_folder_category Convert a string to a doxygen folder category. (function) to_str Convert a kind to a string. (function) kind_to_type Convert a kind to a type. (function) is_kind_language Determine if kind is a language feature. (function) is_kind_structured Determine if kind is a structured type. (function) is_kind_file Determine if kind is a file or directory. (function) type_folder_category_to_folder_name Determine the appropriate folder name for a folder category. (function) type_to_folder_name Determine the appropriate folder name for a type. (function) type_to_index_name Determine the appropriate index file name for a folder category. (function) type_to_index_template Determine the appropriate index template file name for a folder category. (function) type_to_index_title Determine the appropriate index title name for a folder category. (function) to_json Convert a visibility type to a json string. (function) from_json Convert a json string to a visibility type. (function) Attributes Member Attributes Description default_templates A map with all the default templates. (public variable) Types enum kind Defined in header <doxybook/enums.hpp> enum class kind ; Enumerator Value Description INDEX DEFINE CLASS NAMESPACE STRUCT INTERFACE FUNCTION VARIABLE TYPEDEF USING FRIEND ENUM ENUMVALUE UNION DIR FILE MODULE PAGE EXAMPLE SIGNAL SLOT PROPERTY EVENT JAVAENUM JAVAENUMCONSTANT The kind of a symbol in a doxygen xml file. enum visibility Defined in header <doxybook/enums.hpp> enum class visibility ; Enumerator Value Description PUBLIC PROTECTED PRIVATE PACKAGE Types of symbol visibility. enum virtual_category Defined in header <doxybook/enums.hpp> enum class virtual_category ; Enumerator Value Description NON_VIRTUAL VIRTUAL PURE_VIRTUAL Types of virtual functions. enum type Defined in header <doxybook/enums.hpp> enum class type ; Enumerator Value Description NONE DEFINES FUNCTIONS NAMESPACES CLASSES ATTRIBUTES TYPES DIRS FILES MODULES FRIENDS PAGES EXAMPLES SIGNALS SLOTS EVENTS PROPERTIES JAVAENUMCONSTANTS Doxygen types. enum folder_category Defined in header <doxybook/enums.hpp> enum class folder_category ; Enumerator Value Description CLASSES NAMESPACES MODULES PAGES FILES EXAMPLES Types of folder category. using node_cache_map Defined in header <doxybook/node.hpp> using node_cache_map = std :: unordered_map < std :: string , std :: shared_ptr < node > > ; A map of nodes associated to a string. Functions function load_config Defined in header <doxybook/config.hpp> void load_config ( config & config , std :: string const & path ); Load configuration from a path. Exception Safety Basic exception guarantee. function load_config_data Defined in header <doxybook/config.hpp> void load_config_data ( config & config , std :: string_view src ); Load configuration from a json string. Exception Safety Basic exception guarantee. function save_config Defined in header <doxybook/config.hpp> void save_config ( config & config , std :: string const & path ); Save configuration to a path. Exception Safety Basic exception guarantee. function save_default_templates Defined in header <doxybook/default_templates.hpp> void save_default_templates ( std :: string const & path ); Save default templates. Description This function stores all the default templates to files. The user can edit these templates to come up with new templates. Exception Safety Basic exception guarantee. function to_enum_kind Defined in header <doxybook/enums.hpp> kind to_enum_kind ( std :: string const & str ); Convert a string to a doxygen kind. Exception Safety Basic exception guarantee. function to_enum_type Defined in header <doxybook/enums.hpp> type to_enum_type ( std :: string const & str ); Convert a string to a doxygen type. Exception Safety Basic exception guarantee. function to_enum_visibility Defined in header <doxybook/enums.hpp> visibility to_enum_visibility ( std :: string const & str ); Convert a string to a doxygen visibility type. Exception Safety Basic exception guarantee. function to_enum_virtual Defined in header <doxybook/enums.hpp> virtual_category to_enum_virtual ( std :: string const & str ); Convert a string to a doxygen virtual category. Exception Safety Basic exception guarantee. function to_enum_folder_category Defined in header <doxybook/enums.hpp> folder_category to_enum_folder_category ( std :: string const & str ); Convert a string to a doxygen folder category. Exception Safety Basic exception guarantee. function to_str Defined in header <doxybook/enums.hpp> (1) std :: string to_str ( kind value ); (2) std :: string to_str ( type value ); (3) std :: string to_str ( visibility value ); (4) std :: string to_str ( virtual_category value ); (5) std :: string to_str ( folder_category value ); Convert a kind to a string. Convert a type to a string. Convert a visibility to a string. Convert a virtual_category to a string. Convert a folder_category to a string. Exception Safety Basic exception guarantee. function kind_to_type Defined in header <doxybook/enums.hpp> type kind_to_type ( kind kind ); Convert a kind to a type. Exception Safety Basic exception guarantee. function is_kind_language Defined in header <doxybook/enums.hpp> bool is_kind_language ( kind kind ); Determine if kind is a language feature. Exception Safety Basic exception guarantee. function is_kind_structured Defined in header <doxybook/enums.hpp> bool is_kind_structured ( kind kind ); Determine if kind is a structured type. Exception Safety Basic exception guarantee. function is_kind_file Defined in header <doxybook/enums.hpp> bool is_kind_file ( kind kind ); Determine if kind is a file or directory. Exception Safety Basic exception guarantee. function type_folder_category_to_folder_name Defined in header <doxybook/enums.hpp> std :: string type_folder_category_to_folder_name ( config const & config , folder_category type ); Determine the appropriate folder name for a folder category. Return value The folder name Description Get the appropriate folder name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee. function type_to_folder_name Defined in header <doxybook/enums.hpp> std :: string type_to_folder_name ( config const & config , type type ); Determine the appropriate folder name for a type. Return value The folder name Description Get the appropriate folder name in the configuration file for the specified type. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee. function type_to_index_name Defined in header <doxybook/enums.hpp> std :: string type_to_index_name ( config const & config , folder_category type ); Determine the appropriate index file name for a folder category. Return value The folder name Description Get the appropriate index file name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee. function type_to_index_template Defined in header <doxybook/enums.hpp> std :: string type_to_index_template ( config const & config , folder_category type ); Determine the appropriate index template file name for a folder category. Return value The folder name Description Get the appropriate template file name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee. function type_to_index_title Defined in header <doxybook/enums.hpp> std :: string type_to_index_title ( config const & config , folder_category type ); Determine the appropriate index title name for a folder category. Return value The folder name Description Get the appropriate index title name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee. function to_json Defined in header <doxybook/enums.hpp> (1) void to_json ( nlohmann :: json & j , visibility const & p ); (2) void to_json ( nlohmann :: json & j , folder_category const & p ); Convert a visibility type to a json string. Convert a folder category to a json string. Exception Safety Basic exception guarantee. function from_json Defined in header <doxybook/enums.hpp> (1) void from_json ( nlohmann :: json const & j , visibility & p ); (2) void from_json ( nlohmann :: json const & j , folder_category & p ); Convert a json string to a visibility type. Convert a json string to a folder category. Exception Safety Basic exception guarantee. Attributes variable default_templates Defined in header <doxybook/default_templates.hpp> std :: unordered_map < std :: string , default_template > default_templates ; A map with all the default templates. Description Unless template files are provided, these templates are used. Updated on 2022-11-17","title":"doxybook"},{"location":"reference/namespaces/namespacedoxybook/#doxybook","text":"","title":"doxybook"},{"location":"reference/namespaces/namespacedoxybook/#namespaces","text":"Name Description doxybook::path doxybook::utils","title":"Namespaces"},{"location":"reference/namespaces/namespacedoxybook/#classes","text":"Classes Description config Configuration for the doxygen and generator classes. (struct) default_template Describe the default template for a page. (struct) doxygen All the nodes representing the content of doxygen xml files. (class) exception Doxybook exceptions. (class) generator A class that stores a doxygen object and generates the markdown documentation. (class) json_converter Convert elements to json so they can be rendered with inja. (class) node A doxygen node. (class) renderer Render inja templates with the specified configuration. (class) text_markdown_printer Print xml nodes as markdown. (class) text_plain_printer Print elements as plain text. (class) text_printer An abstract text printer. (class) xml Represents and wraps an xml node. (class) xml_text_parser Parser for a doxygen xml file as an xml document. (class)","title":"Classes"},{"location":"reference/namespaces/namespacedoxybook/#types","text":"Member Types Definition kind The kind of a symbol in a doxygen xml file. (enum) visibility Types of symbol visibility. (enum) virtual_category Types of virtual functions. (enum) type Doxygen types. (enum) folder_category Types of folder category. (enum) node_cache_map A map of nodes associated to a string. (using)","title":"Types"},{"location":"reference/namespaces/namespacedoxybook/#functions","text":"Member Functions Description load_config Load configuration from a path. (function) load_config_data Load configuration from a json string. (function) save_config Save configuration to a path. (function) save_default_templates Save default templates. (function) to_enum_kind Convert a string to a doxygen kind. (function) to_enum_type Convert a string to a doxygen type. (function) to_enum_visibility Convert a string to a doxygen visibility type. (function) to_enum_virtual Convert a string to a doxygen virtual category. (function) to_enum_folder_category Convert a string to a doxygen folder category. (function) to_str Convert a kind to a string. (function) kind_to_type Convert a kind to a type. (function) is_kind_language Determine if kind is a language feature. (function) is_kind_structured Determine if kind is a structured type. (function) is_kind_file Determine if kind is a file or directory. (function) type_folder_category_to_folder_name Determine the appropriate folder name for a folder category. (function) type_to_folder_name Determine the appropriate folder name for a type. (function) type_to_index_name Determine the appropriate index file name for a folder category. (function) type_to_index_template Determine the appropriate index template file name for a folder category. (function) type_to_index_title Determine the appropriate index title name for a folder category. (function) to_json Convert a visibility type to a json string. (function) from_json Convert a json string to a visibility type. (function)","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook/#attributes","text":"Member Attributes Description default_templates A map with all the default templates. (public variable)","title":"Attributes"},{"location":"reference/namespaces/namespacedoxybook/#types_1","text":"","title":"Types"},{"location":"reference/namespaces/namespacedoxybook/#enum-kind","text":"Defined in header <doxybook/enums.hpp> enum class kind ; Enumerator Value Description INDEX DEFINE CLASS NAMESPACE STRUCT INTERFACE FUNCTION VARIABLE TYPEDEF USING FRIEND ENUM ENUMVALUE UNION DIR FILE MODULE PAGE EXAMPLE SIGNAL SLOT PROPERTY EVENT JAVAENUM JAVAENUMCONSTANT The kind of a symbol in a doxygen xml file.","title":"enum kind"},{"location":"reference/namespaces/namespacedoxybook/#enum-visibility","text":"Defined in header <doxybook/enums.hpp> enum class visibility ; Enumerator Value Description PUBLIC PROTECTED PRIVATE PACKAGE Types of symbol visibility.","title":"enum visibility"},{"location":"reference/namespaces/namespacedoxybook/#enum-virtual_category","text":"Defined in header <doxybook/enums.hpp> enum class virtual_category ; Enumerator Value Description NON_VIRTUAL VIRTUAL PURE_VIRTUAL Types of virtual functions.","title":"enum virtual_category"},{"location":"reference/namespaces/namespacedoxybook/#enum-type","text":"Defined in header <doxybook/enums.hpp> enum class type ; Enumerator Value Description NONE DEFINES FUNCTIONS NAMESPACES CLASSES ATTRIBUTES TYPES DIRS FILES MODULES FRIENDS PAGES EXAMPLES SIGNALS SLOTS EVENTS PROPERTIES JAVAENUMCONSTANTS Doxygen types.","title":"enum type"},{"location":"reference/namespaces/namespacedoxybook/#enum-folder_category","text":"Defined in header <doxybook/enums.hpp> enum class folder_category ; Enumerator Value Description CLASSES NAMESPACES MODULES PAGES FILES EXAMPLES Types of folder category.","title":"enum folder_category"},{"location":"reference/namespaces/namespacedoxybook/#using-node_cache_map","text":"Defined in header <doxybook/node.hpp> using node_cache_map = std :: unordered_map < std :: string , std :: shared_ptr < node > > ; A map of nodes associated to a string.","title":"using node_cache_map"},{"location":"reference/namespaces/namespacedoxybook/#functions_1","text":"","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook/#function-load_config","text":"Defined in header <doxybook/config.hpp> void load_config ( config & config , std :: string const & path ); Load configuration from a path. Exception Safety Basic exception guarantee.","title":"function load_config"},{"location":"reference/namespaces/namespacedoxybook/#function-load_config_data","text":"Defined in header <doxybook/config.hpp> void load_config_data ( config & config , std :: string_view src ); Load configuration from a json string. Exception Safety Basic exception guarantee.","title":"function load_config_data"},{"location":"reference/namespaces/namespacedoxybook/#function-save_config","text":"Defined in header <doxybook/config.hpp> void save_config ( config & config , std :: string const & path ); Save configuration to a path. Exception Safety Basic exception guarantee.","title":"function save_config"},{"location":"reference/namespaces/namespacedoxybook/#function-save_default_templates","text":"Defined in header <doxybook/default_templates.hpp> void save_default_templates ( std :: string const & path ); Save default templates. Description This function stores all the default templates to files. The user can edit these templates to come up with new templates. Exception Safety Basic exception guarantee.","title":"function save_default_templates"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_kind","text":"Defined in header <doxybook/enums.hpp> kind to_enum_kind ( std :: string const & str ); Convert a string to a doxygen kind. Exception Safety Basic exception guarantee.","title":"function to_enum_kind"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_type","text":"Defined in header <doxybook/enums.hpp> type to_enum_type ( std :: string const & str ); Convert a string to a doxygen type. Exception Safety Basic exception guarantee.","title":"function to_enum_type"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_visibility","text":"Defined in header <doxybook/enums.hpp> visibility to_enum_visibility ( std :: string const & str ); Convert a string to a doxygen visibility type. Exception Safety Basic exception guarantee.","title":"function to_enum_visibility"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_virtual","text":"Defined in header <doxybook/enums.hpp> virtual_category to_enum_virtual ( std :: string const & str ); Convert a string to a doxygen virtual category. Exception Safety Basic exception guarantee.","title":"function to_enum_virtual"},{"location":"reference/namespaces/namespacedoxybook/#function-to_enum_folder_category","text":"Defined in header <doxybook/enums.hpp> folder_category to_enum_folder_category ( std :: string const & str ); Convert a string to a doxygen folder category. Exception Safety Basic exception guarantee.","title":"function to_enum_folder_category"},{"location":"reference/namespaces/namespacedoxybook/#function-to_str","text":"Defined in header <doxybook/enums.hpp> (1) std :: string to_str ( kind value ); (2) std :: string to_str ( type value ); (3) std :: string to_str ( visibility value ); (4) std :: string to_str ( virtual_category value ); (5) std :: string to_str ( folder_category value ); Convert a kind to a string. Convert a type to a string. Convert a visibility to a string. Convert a virtual_category to a string. Convert a folder_category to a string. Exception Safety Basic exception guarantee.","title":"function to_str"},{"location":"reference/namespaces/namespacedoxybook/#function-kind_to_type","text":"Defined in header <doxybook/enums.hpp> type kind_to_type ( kind kind ); Convert a kind to a type. Exception Safety Basic exception guarantee.","title":"function kind_to_type"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_language","text":"Defined in header <doxybook/enums.hpp> bool is_kind_language ( kind kind ); Determine if kind is a language feature. Exception Safety Basic exception guarantee.","title":"function is_kind_language"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_structured","text":"Defined in header <doxybook/enums.hpp> bool is_kind_structured ( kind kind ); Determine if kind is a structured type. Exception Safety Basic exception guarantee.","title":"function is_kind_structured"},{"location":"reference/namespaces/namespacedoxybook/#function-is_kind_file","text":"Defined in header <doxybook/enums.hpp> bool is_kind_file ( kind kind ); Determine if kind is a file or directory. Exception Safety Basic exception guarantee.","title":"function is_kind_file"},{"location":"reference/namespaces/namespacedoxybook/#function-type_folder_category_to_folder_name","text":"Defined in header <doxybook/enums.hpp> std :: string type_folder_category_to_folder_name ( config const & config , folder_category type ); Determine the appropriate folder name for a folder category. Return value The folder name Description Get the appropriate folder name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee.","title":"function type_folder_category_to_folder_name"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_folder_name","text":"Defined in header <doxybook/enums.hpp> std :: string type_to_folder_name ( config const & config , type type ); Determine the appropriate folder name for a type. Return value The folder name Description Get the appropriate folder name in the configuration file for the specified type. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee.","title":"function type_to_folder_name"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_name","text":"Defined in header <doxybook/enums.hpp> std :: string type_to_index_name ( config const & config , folder_category type ); Determine the appropriate index file name for a folder category. Return value The folder name Description Get the appropriate index file name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee.","title":"function type_to_index_name"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_template","text":"Defined in header <doxybook/enums.hpp> std :: string type_to_index_template ( config const & config , folder_category type ); Determine the appropriate index template file name for a folder category. Return value The folder name Description Get the appropriate template file name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee.","title":"function type_to_index_template"},{"location":"reference/namespaces/namespacedoxybook/#function-type_to_index_title","text":"Defined in header <doxybook/enums.hpp> std :: string type_to_index_title ( config const & config , folder_category type ); Determine the appropriate index title name for a folder category. Return value The folder name Description Get the appropriate index title name in the configuration file for the specified folder category. Not all types have corresponding folder categories. Exception Safety Basic exception guarantee.","title":"function type_to_index_title"},{"location":"reference/namespaces/namespacedoxybook/#function-to_json","text":"Defined in header <doxybook/enums.hpp> (1) void to_json ( nlohmann :: json & j , visibility const & p ); (2) void to_json ( nlohmann :: json & j , folder_category const & p ); Convert a visibility type to a json string. Convert a folder category to a json string. Exception Safety Basic exception guarantee.","title":"function to_json"},{"location":"reference/namespaces/namespacedoxybook/#function-from_json","text":"Defined in header <doxybook/enums.hpp> (1) void from_json ( nlohmann :: json const & j , visibility & p ); (2) void from_json ( nlohmann :: json const & j , folder_category & p ); Convert a json string to a visibility type. Convert a json string to a folder category. Exception Safety Basic exception guarantee.","title":"function from_json"},{"location":"reference/namespaces/namespacedoxybook/#attributes_1","text":"","title":"Attributes"},{"location":"reference/namespaces/namespacedoxybook/#variable-default_templates","text":"Defined in header <doxybook/default_templates.hpp> std :: unordered_map < std :: string , default_template > default_templates ; A map with all the default templates. Description Unless template files are provided, these templates are used. Updated on 2022-11-17","title":"variable default_templates"},{"location":"reference/namespaces/namespacedoxybook_1_1path/","text":"doxybook::path Functions Member Functions Description join Join string arguments as a path. (function template) filename Get the filename from a path string. (function) Functions function join Defined in header <doxybook/path.hpp> template < typename ... Args > std :: string join ( Args const & ... args ); Join string arguments as a path. Exception Safety Basic exception guarantee. function filename Defined in header <doxybook/path.hpp> std :: string filename ( std :: string const & path ); Get the filename from a path string. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::path"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#doxybookpath","text":"","title":"doxybook::path"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#functions","text":"Member Functions Description join Join string arguments as a path. (function template) filename Get the filename from a path string. (function)","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#functions_1","text":"","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#function-join","text":"Defined in header <doxybook/path.hpp> template < typename ... Args > std :: string join ( Args const & ... args ); Join string arguments as a path. Exception Safety Basic exception guarantee.","title":"function join"},{"location":"reference/namespaces/namespacedoxybook_1_1path/#function-filename","text":"Defined in header <doxybook/path.hpp> std :: string filename ( std :: string const & path ); Get the filename from a path string. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function filename"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/","text":"doxybook::utils Functions Member Functions Description join Join string arguments as a path. (function template) filename Get the filename from a path string. (function) escape Escape a string. (function) title Capitalize string. (function) to_lower Convert string to lowercase. (function) safe_anchor_id Create a safe anchor for a string. (function) namespace_to_package Convert a namespace string to a package string. (function) date Get current date as a string. (function) strip_namespace Strip namespace from symbol. (function) strip_anchor Strip anchors from a string. (function) split Split string with the specified delimiter. (function) create_directory Create a directory. (function) normalize_language Normalize the language name. (function) replace_newline Replace newlines with whitespaces. (function) Functions function join Defined in header <doxybook/utils.hpp> template < typename ... Args > std :: string join ( Args const & ... args ); Join string arguments as a path. Exception Safety Basic exception guarantee. function filename Defined in header <doxybook/utils.hpp> std :: string filename ( std :: string const & path ); Get the filename from a path string. Exception Safety Basic exception guarantee. function escape Defined in header <doxybook/utils.hpp> std :: string escape ( std :: string str ); Escape a string. Exception Safety Basic exception guarantee. function title Defined in header <doxybook/utils.hpp> std :: string title ( std :: string str ); Capitalize string. Exception Safety Basic exception guarantee. function to_lower Defined in header <doxybook/utils.hpp> std :: string to_lower ( std :: string str ); Convert string to lowercase. Exception Safety Basic exception guarantee. function safe_anchor_id Defined in header <doxybook/utils.hpp> std :: string safe_anchor_id ( std :: string str , bool replace_underscores ); Create a safe anchor for a string. Parameters replace_underscores - replaces underscores with hyphens str - string to convert Return value converted string Exception Safety Basic exception guarantee. function namespace_to_package Defined in header <doxybook/utils.hpp> std :: string namespace_to_package ( std :: string str ); Convert a namespace string to a package string. Description This replaces all occurences of \"::\" with \".\" Exception Safety Basic exception guarantee. function date Defined in header <doxybook/utils.hpp> std :: string date ( std :: string const & format ); Get current date as a string. Exception Safety Basic exception guarantee. function strip_namespace Defined in header <doxybook/utils.hpp> std :: string strip_namespace ( std :: string const & format ); Strip namespace from symbol. Exception Safety Basic exception guarantee. function strip_anchor Defined in header <doxybook/utils.hpp> std :: string strip_anchor ( std :: string const & str ); Strip anchors from a string. Exception Safety Basic exception guarantee. function split Defined in header <doxybook/utils.hpp> std :: vector < std :: string > split ( std :: string const & str , std :: string const & delim ); Split string with the specified delimiter. Exception Safety Basic exception guarantee. function create_directory Defined in header <doxybook/utils.hpp> void create_directory ( std :: string const & path ); Create a directory. Exception Safety Basic exception guarantee. function normalize_language Defined in header <doxybook/utils.hpp> std :: string normalize_language ( std :: string const & language ); Normalize the language name. Exception Safety Basic exception guarantee. function replace_newline Defined in header <doxybook/utils.hpp> std :: string replace_newline ( std :: string str ); Replace newlines with whitespaces. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"doxybook::utils"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#doxybookutils","text":"","title":"doxybook::utils"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#functions","text":"Member Functions Description join Join string arguments as a path. (function template) filename Get the filename from a path string. (function) escape Escape a string. (function) title Capitalize string. (function) to_lower Convert string to lowercase. (function) safe_anchor_id Create a safe anchor for a string. (function) namespace_to_package Convert a namespace string to a package string. (function) date Get current date as a string. (function) strip_namespace Strip namespace from symbol. (function) strip_anchor Strip anchors from a string. (function) split Split string with the specified delimiter. (function) create_directory Create a directory. (function) normalize_language Normalize the language name. (function) replace_newline Replace newlines with whitespaces. (function)","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#functions_1","text":"","title":"Functions"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-join","text":"Defined in header <doxybook/utils.hpp> template < typename ... Args > std :: string join ( Args const & ... args ); Join string arguments as a path. Exception Safety Basic exception guarantee.","title":"function join"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-filename","text":"Defined in header <doxybook/utils.hpp> std :: string filename ( std :: string const & path ); Get the filename from a path string. Exception Safety Basic exception guarantee.","title":"function filename"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-escape","text":"Defined in header <doxybook/utils.hpp> std :: string escape ( std :: string str ); Escape a string. Exception Safety Basic exception guarantee.","title":"function escape"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-title","text":"Defined in header <doxybook/utils.hpp> std :: string title ( std :: string str ); Capitalize string. Exception Safety Basic exception guarantee.","title":"function title"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-to_lower","text":"Defined in header <doxybook/utils.hpp> std :: string to_lower ( std :: string str ); Convert string to lowercase. Exception Safety Basic exception guarantee.","title":"function to_lower"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-safe_anchor_id","text":"Defined in header <doxybook/utils.hpp> std :: string safe_anchor_id ( std :: string str , bool replace_underscores ); Create a safe anchor for a string. Parameters replace_underscores - replaces underscores with hyphens str - string to convert Return value converted string Exception Safety Basic exception guarantee.","title":"function safe_anchor_id"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-namespace_to_package","text":"Defined in header <doxybook/utils.hpp> std :: string namespace_to_package ( std :: string str ); Convert a namespace string to a package string. Description This replaces all occurences of \"::\" with \".\" Exception Safety Basic exception guarantee.","title":"function namespace_to_package"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-date","text":"Defined in header <doxybook/utils.hpp> std :: string date ( std :: string const & format ); Get current date as a string. Exception Safety Basic exception guarantee.","title":"function date"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-strip_namespace","text":"Defined in header <doxybook/utils.hpp> std :: string strip_namespace ( std :: string const & format ); Strip namespace from symbol. Exception Safety Basic exception guarantee.","title":"function strip_namespace"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-strip_anchor","text":"Defined in header <doxybook/utils.hpp> std :: string strip_anchor ( std :: string const & str ); Strip anchors from a string. Exception Safety Basic exception guarantee.","title":"function strip_anchor"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-split","text":"Defined in header <doxybook/utils.hpp> std :: vector < std :: string > split ( std :: string const & str , std :: string const & delim ); Split string with the specified delimiter. Exception Safety Basic exception guarantee.","title":"function split"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-create_directory","text":"Defined in header <doxybook/utils.hpp> void create_directory ( std :: string const & path ); Create a directory. Exception Safety Basic exception guarantee.","title":"function create_directory"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-normalize_language","text":"Defined in header <doxybook/utils.hpp> std :: string normalize_language ( std :: string const & language ); Normalize the language name. Exception Safety Basic exception guarantee.","title":"function normalize_language"},{"location":"reference/namespaces/namespacedoxybook_1_1utils/#function-replace_newline","text":"Defined in header <doxybook/utils.hpp> std :: string replace_newline ( std :: string str ); Replace newlines with whitespaces. Exception Safety Basic exception guarantee. Updated on 2022-11-17","title":"function replace_newline"},{"location":"reference/pages/","text":"Pages Page Updated on 2022-11-17","title":"Pages"},{"location":"reference/pages/#pages","text":"Page Updated on 2022-11-17","title":"Pages"}]}