{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doxybook2 Example This is a mainpage of Doxybook2 example output. This file is generated from \\mainpage command within Engine.hpp file. Images: Refs: Some texture class ref Some audio buffer class ref Simple list: list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with ~~strike through~~ sub sub item 4 with monospaced Enumerated list: list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with ~~strike through~~ Hyper links: GitHub repository Code blocks: #include <iostream> int main(int argc, char** argv) { std::cout << \"Hello World\" << std::endl; return 0; } Subpages: This manual is divided in the following sections: Introduction Advanced usage Snippet: #include \"Engine.hpp\" // A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique<uint8_t[]>(new uint8_t[1024*1024*3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } Filename: example-1.cpp Table: First Header Second Header Third Header Content Cell Content Cell Content Cell with ref Engine::Audio::AudioBuffer Content Cell Content Cell Content Cell with link Inline formula Please see mkdocs-readthedocs example at https://matusnovak.github.io/doxybook2/mkdocs-readthedocs/ to see a working example using mkdocs + pymdownx.arithmatex The distance between ((x_1,y_1)) and ((x_2,y_2)) is (\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}). Block formula [ |I_2|=\\left| \\int_{0}^T \\psi(t) \\left{ u(a,t)- \\int_{\\gamma(t)}^a \\frac{d\\theta}{k(\\theta,t)} \\int_{a}^\\theta c(\\xi)u_t(\\xi,t)\\,d\\xi \\right} dt \\right| ] Blockquote This is some random blockquote! Updated on 2022-11-10 at 05:33:10 +0000","title":"Doxybook2 Example"},{"location":"#doxybook2-example","text":"This is a mainpage of Doxybook2 example output. This file is generated from \\mainpage command within Engine.hpp file.","title":"Doxybook2 Example"},{"location":"#images","text":"","title":"Images:"},{"location":"#refs","text":"Some texture class ref Some audio buffer class ref","title":"Refs:"},{"location":"#simple-list","text":"list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with ~~strike through~~ sub sub item 4 with monospaced","title":"Simple list:"},{"location":"#enumerated-list","text":"list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with ~~strike through~~","title":"Enumerated list:"},{"location":"#hyper-links","text":"GitHub repository","title":"Hyper links:"},{"location":"#code-blocks","text":"#include <iostream> int main(int argc, char** argv) { std::cout << \"Hello World\" << std::endl; return 0; }","title":"Code blocks:"},{"location":"#subpages","text":"This manual is divided in the following sections: Introduction Advanced usage","title":"Subpages:"},{"location":"#snippet","text":"#include \"Engine.hpp\" // A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique<uint8_t[]>(new uint8_t[1024*1024*3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } Filename: example-1.cpp","title":"Snippet:"},{"location":"#table","text":"First Header Second Header Third Header Content Cell Content Cell Content Cell with ref Engine::Audio::AudioBuffer Content Cell Content Cell Content Cell with link","title":"Table:"},{"location":"#inline-formula","text":"Please see mkdocs-readthedocs example at https://matusnovak.github.io/doxybook2/mkdocs-readthedocs/ to see a working example using mkdocs + pymdownx.arithmatex The distance between ((x_1,y_1)) and ((x_2,y_2)) is (\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}).","title":"Inline formula"},{"location":"#block-formula","text":"[ |I_2|=\\left| \\int_{0}^T \\psi(t) \\left{ u(a,t)- \\int_{\\gamma(t)}^a \\frac{d\\theta}{k(\\theta,t)} \\int_{a}^\\theta c(\\xi)u_t(\\xi,t)\\,d\\xi \\right} dt \\right| ]","title":"Block formula"},{"location":"#blockquote","text":"This is some random blockquote! Updated on 2022-11-10 at 05:33:10 +0000","title":"Blockquote"},{"location":"Classes/","text":"Classes namespace Engine This namespace contains all of the necessary engine components. namespace Assets class Asset union Event struct Loaded struct Unloaded struct Waiting namespace Audio class AudioBuffer A simple audio buffer to hold PCM samples struct TypedAudioData Use this to populate the buffer. class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Exception namespace Graphics class Framebuffer class Handle interface Texture This is a base texture class that serves as a base class for other texture types. class Texture2D class Texture3D Some deprecated class. namespace Gui class GuiWidget Some generic gui widget class. namespace Utils class ArrayView Filesystem path utility functions. namespace Path Filesystem path utility functions. Updated on 2022-11-10 at 05:33:10 +0000","title":"Classes"},{"location":"Classes/#classes","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets class Asset union Event struct Loaded struct Unloaded struct Waiting namespace Audio class AudioBuffer A simple audio buffer to hold PCM samples struct TypedAudioData Use this to populate the buffer. class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Exception namespace Graphics class Framebuffer class Handle interface Texture This is a base texture class that serves as a base class for other texture types. class Texture2D class Texture3D Some deprecated class. namespace Gui class GuiWidget Some generic gui widget class. namespace Utils class ArrayView Filesystem path utility functions. namespace Path Filesystem path utility functions. Updated on 2022-11-10 at 05:33:10 +0000","title":"Classes"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/","text":"Engine::Assets::Asset Module: An example game engine / Generic assets #include <Asset.hpp> Public Classes Name union Event Public Functions Name Asset (const std::string & name) virtual ~Asset () =0 virtual void load () Call this method to load the asset. virtual void unload () Call this method to unload the asset. const Event & getEvent () const Returns the current status of the asset. Public Functions Documentation function Asset explicit Asset( const std::string & name ) function ~Asset virtual ~Asset() =0 function load virtual void load() Call this method to load the asset. function unload virtual void unload() Call this method to unload the asset. function getEvent inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded. Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets::Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#engineassetsasset","text":"Module: An example game engine / Generic assets #include <Asset.hpp>","title":"Engine::Assets::Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-classes","text":"Name union Event","title":"Public Classes"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions","text":"Name Asset (const std::string & name) virtual ~Asset () =0 virtual void load () Call this method to load the asset. virtual void unload () Call this method to unload the asset. const Event & getEvent () const Returns the current status of the asset.","title":"Public Functions"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset","text":"explicit Asset( const std::string & name )","title":"function Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset_1","text":"virtual ~Asset() =0","title":"function ~Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-load","text":"virtual void load() Call this method to load the asset.","title":"function load"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-unload","text":"virtual void unload() Call this method to unload the asset.","title":"function unload"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-getevent","text":"inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded. Updated on 2022-11-10 at 05:33:10 +0000","title":"function getEvent"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/","text":"Engine::Audio::AudioBuffer Module: An example game engine / Audio buffers and devices A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp> Public Classes Name struct TypedAudioData Use this to populate the buffer. Public Types Name enum class Type { UNKNOWN = 0, INT_8 = 1 << 1, INT_16 = 1 << 2, INT_24 = 1 << 3, INT_32 = 1 << 4, FLOAT_32 = 1 << 5} Different type of audio formats. template <typename T > using Utils::ArrayView < T > AudioData typedef AudioData < uint8_t > AudioData8U Public Functions Name AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer . virtual ~AudioBuffer () =default Audio::AudioBuffer destructor. void play ( AudioManager & manager) const Play this buffer. void stop ( AudioManager & manager) const Stop this buffer playing. void loop ( AudioManager & manager) const Loop this buffer forever. void setData (const TypedAudioData & data) template <size_t Size> void setDataMultiple (const TypedAudioData data[Size]) void setData (const TypedAudioData data[], size_t size) Some deprecated function. void setCallback ( Callback callback) Set the callback function. void setCallback2 ( Callback2 callback, void * user) Set the callback function. Protected Functions Name float * getData () Protected Attributes Name bool playing Friends Name class AudioManager void Audio::doSomething ( AudioBuffer & buffer) Detailed Description class Engine::Audio::AudioBuffer; A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Note : Some random note Some second random note Bug : Some random bug Some other random bug Test : Some random test description Todo : Some random todo Warning : Some random warning Precondition : First initialize the system. Lorem ipsum donor // Some random code using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); buffer.play(audioManager); More detailed description! // Another code sample #include <iostream> using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); std::cout << buffer.play(...) << std::endl; Public Types Documentation enum Type Enumerator Value Description UNKNOWN 0 Dont use this INT_8 1 << 1 8-bit signed integer INT_16 1 << 2 16-bit signed integer INT_24 1 << 3 24-bit signed integer INT_32 1 << 4 32-bit signed integer FLOAT_32 1 << 5 32-bit float Different type of audio formats. using AudioData template <typename T > using Engine::Audio::AudioBuffer::AudioData = Utils::ArrayView<T>; typedef AudioData8U typedef AudioData<uint8_t> Engine::Audio::AudioBuffer::AudioData8U; Public Functions Documentation function AudioBuffer explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer . function ~AudioBuffer virtual ~AudioBuffer() =default Audio::AudioBuffer destructor. function play void play( AudioManager & manager ) const Play this buffer. Parameters : manager Which manager to play the sound with Exceptions : Exception If this buffer is already playing function stop void stop( AudioManager & manager ) const Stop this buffer playing. Parameters : manager Which manager to stop the sound with Exceptions : Exception If this buffer is already stopped function loop void loop( AudioManager & manager ) const Loop this buffer forever. Parameters : manager Which manager to loop the sound with Exceptions : Exception If this buffer is already looping Note : This will loop forever until you call stop function setData void setData( const TypedAudioData & data ) function setDataMultiple template <size_t Size> inline void setDataMultiple( const TypedAudioData data[Size] ) function setData void setData( const TypedAudioData data[], size_t size ) Some deprecated function. Deprecated : Use the AudioBuffer::setDataMultiple instead function setCallback void setCallback( Callback callback ) Set the callback function. Parameters : callback The callback function pointer Deprecated : Use the AudioBuffer::setCallback2 instead See : Audio::Callback function setCallback2 void setCallback2( Callback2 callback, void * user ) Set the callback function. Parameters : callback The callback function pointer See : Audio::Callback Protected Functions Documentation function getData float * getData() Protected Attributes Documentation variable playing bool playing {false}; Friends friend AudioManager friend class AudioManager; friend Audio::doSomething friend void Audio::doSomething( AudioBuffer & buffer ); Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Audio::AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#engineaudioaudiobuffer","text":"Module: An example game engine / Audio buffers and devices A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-classes","text":"Name struct TypedAudioData Use this to populate the buffer.","title":"Public Classes"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types","text":"Name enum class Type { UNKNOWN = 0, INT_8 = 1 << 1, INT_16 = 1 << 2, INT_24 = 1 << 3, INT_32 = 1 << 4, FLOAT_32 = 1 << 5} Different type of audio formats. template <typename T > using Utils::ArrayView < T > AudioData typedef AudioData < uint8_t > AudioData8U","title":"Public Types"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions","text":"Name AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer . virtual ~AudioBuffer () =default Audio::AudioBuffer destructor. void play ( AudioManager & manager) const Play this buffer. void stop ( AudioManager & manager) const Stop this buffer playing. void loop ( AudioManager & manager) const Loop this buffer forever. void setData (const TypedAudioData & data) template <size_t Size> void setDataMultiple (const TypedAudioData data[Size]) void setData (const TypedAudioData data[], size_t size) Some deprecated function. void setCallback ( Callback callback) Set the callback function. void setCallback2 ( Callback2 callback, void * user) Set the callback function.","title":"Public Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions","text":"Name float * getData ()","title":"Protected Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes","text":"Name bool playing","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends","text":"Name class AudioManager void Audio::doSomething ( AudioBuffer & buffer)","title":"Friends"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#detailed-description","text":"class Engine::Audio::AudioBuffer; A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Note : Some random note Some second random note Bug : Some random bug Some other random bug Test : Some random test description Todo : Some random todo Warning : Some random warning Precondition : First initialize the system. Lorem ipsum donor // Some random code using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); buffer.play(audioManager); More detailed description! // Another code sample #include <iostream> using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); std::cout << buffer.play(...) << std::endl;","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#enum-type","text":"Enumerator Value Description UNKNOWN 0 Dont use this INT_8 1 << 1 8-bit signed integer INT_16 1 << 2 16-bit signed integer INT_24 1 << 3 24-bit signed integer INT_32 1 << 4 32-bit signed integer FLOAT_32 1 << 5 32-bit float Different type of audio formats.","title":"enum Type"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#using-audiodata","text":"template <typename T > using Engine::Audio::AudioBuffer::AudioData = Utils::ArrayView<T>;","title":"using AudioData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#typedef-audiodata8u","text":"typedef AudioData<uint8_t> Engine::Audio::AudioBuffer::AudioData8U;","title":"typedef AudioData8U"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer","text":"explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer .","title":"function AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer_1","text":"virtual ~AudioBuffer() =default Audio::AudioBuffer destructor.","title":"function ~AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-play","text":"void play( AudioManager & manager ) const Play this buffer. Parameters : manager Which manager to play the sound with Exceptions : Exception If this buffer is already playing","title":"function play"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-stop","text":"void stop( AudioManager & manager ) const Stop this buffer playing. Parameters : manager Which manager to stop the sound with Exceptions : Exception If this buffer is already stopped","title":"function stop"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-loop","text":"void loop( AudioManager & manager ) const Loop this buffer forever. Parameters : manager Which manager to loop the sound with Exceptions : Exception If this buffer is already looping Note : This will loop forever until you call stop","title":"function loop"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata","text":"void setData( const TypedAudioData & data )","title":"function setData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdatamultiple","text":"template <size_t Size> inline void setDataMultiple( const TypedAudioData data[Size] )","title":"function setDataMultiple"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata_1","text":"void setData( const TypedAudioData data[], size_t size ) Some deprecated function. Deprecated : Use the AudioBuffer::setDataMultiple instead","title":"function setData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback","text":"void setCallback( Callback callback ) Set the callback function. Parameters : callback The callback function pointer Deprecated : Use the AudioBuffer::setCallback2 instead See : Audio::Callback","title":"function setCallback"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setcallback2","text":"void setCallback2( Callback2 callback, void * user ) Set the callback function. Parameters : callback The callback function pointer See : Audio::Callback","title":"function setCallback2"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-getdata","text":"float * getData()","title":"function getData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#variable-playing","text":"bool playing {false};","title":"variable playing"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends_1","text":"","title":"Friends"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiomanager","text":"friend class AudioManager;","title":"friend AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiodosomething","text":"friend void Audio::doSomething( AudioBuffer & buffer ); Updated on 2022-11-10 at 05:33:10 +0000","title":"friend Audio::doSomething"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/","text":"Engine::Audio::AudioManager Module: An example game engine / Audio buffers and devices An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp> Public Functions Name AudioManager (int numOfChannels =128) ~AudioManager () void enque (const AudioBuffer & buffer) Detailed Description class Engine::Audio::AudioManager; An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text Followed by some more text and another list: First item Second item Public Functions Documentation function AudioManager AudioManager( int numOfChannels =128 ) function ~AudioManager ~AudioManager() function enque void enque( const AudioBuffer & buffer ) Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Audio::AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#engineaudioaudiomanager","text":"Module: An example game engine / Audio buffers and devices An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp>","title":"Engine::Audio::AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions","text":"Name AudioManager (int numOfChannels =128) ~AudioManager () void enque (const AudioBuffer & buffer)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#detailed-description","text":"class Engine::Audio::AudioManager; An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text Followed by some more text and another list: First item Second item","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager","text":"AudioManager( int numOfChannels =128 )","title":"function AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager_1","text":"~AudioManager()","title":"function ~AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-enque","text":"void enque( const AudioBuffer & buffer ) Updated on 2022-11-10 at 05:33:10 +0000","title":"function enque"},{"location":"Classes/classEngine_1_1Exception/","text":"Engine::Exception Module: An example game engine #include <Exception.hpp> Inherits from exception Public Functions Name Exception () =default Exception (std::string msg) const char * what () const override Public Functions Documentation function Exception Exception() =default function Exception inline explicit Exception( std::string msg ) function what inline const char * what() const override Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Exception"},{"location":"Classes/classEngine_1_1Exception/#engineexception","text":"Module: An example game engine #include <Exception.hpp> Inherits from exception","title":"Engine::Exception"},{"location":"Classes/classEngine_1_1Exception/#public-functions","text":"Name Exception () =default Exception (std::string msg) const char * what () const override","title":"Public Functions"},{"location":"Classes/classEngine_1_1Exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Exception/#function-exception","text":"Exception() =default","title":"function Exception"},{"location":"Classes/classEngine_1_1Exception/#function-exception_1","text":"inline explicit Exception( std::string msg )","title":"function Exception"},{"location":"Classes/classEngine_1_1Exception/#function-what","text":"inline const char * what() const override Updated on 2022-11-10 at 05:33:10 +0000","title":"function what"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/","text":"Engine::Graphics::Framebuffer Module: An example game engine / Graphical related classes #include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name Framebuffer (int width, int height) virtual ~Framebuffer () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels. Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle Public Functions Documentation function Framebuffer Framebuffer( int width, int height ) function ~Framebuffer virtual ~Framebuffer() function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics::Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#enginegraphicsframebuffer","text":"Module: An example game engine / Graphical related classes #include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions","text":"Name Framebuffer (int width, int height) virtual ~Framebuffer () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels.","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer","text":"Framebuffer( int width, int height )","title":"function Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer_1","text":"virtual ~Framebuffer()","title":"function ~Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/","text":"Engine::Graphics::Handle Module: An example game engine / Graphical related classes #include <Handle.hpp> Inherited by Engine::Graphics::Texture Public Functions Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes Name int handle Public Functions Documentation function Handle Handle() =default function ~Handle virtual ~Handle() =default function getHandle inline int getHandle() const Protected Attributes Documentation variable handle int handle; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics::Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#enginegraphicshandle","text":"Module: An example game engine / Graphical related classes #include <Handle.hpp> Inherited by Engine::Graphics::Texture","title":"Engine::Graphics::Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions","text":"Name Handle () =default virtual ~Handle () =default int getHandle () const","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes","text":"Name int handle","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle","text":"Handle() =default","title":"function Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle_1","text":"virtual ~Handle() =default","title":"function ~Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-gethandle","text":"inline int getHandle() const","title":"function getHandle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#variable-handle","text":"int handle; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/","text":"Engine::Graphics::Texture Module: An example game engine / Graphical related classes This is a base texture class that serves as a base class for other texture types. More... #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D Public Types Name enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions Name Texture ( Type type) virtual ~Texture () =default virtual int getWidth () const =0 Returns the width of the texture in pixels. virtual int getHeight () const =0 Returns the height of the texture in pixels. virtual int getDepth () const =0 Returns the depth of the texture in pixels. bool isLoaded () const Protected Attributes Name bool loaded Type type Additional inherited members Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle Detailed Description class Engine::Graphics::Texture; This is a base texture class that serves as a base class for other texture types. Bug : This has some weird bug too! #include <iostream> #include <memory> #include \"Engine.hpp\" // A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique<uint8_t[]>(new uint8_t[1024*1024*3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } Filename: example-1.cpp Public Types Documentation enum Type Enumerator Value Description UNKNOWN 0 RGBA_8 RGB_8 RGBA_16 RGB_16 RGBA_32 RGB_32 Public Functions Documentation function Texture explicit Texture( Type type ) function ~Texture virtual ~Texture() =default function getWidth virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels Reimplemented by : Engine::Graphics::Framebuffer::getWidth , Engine::Graphics::Texture3D::getWidth , Engine::Graphics::Texture2D::getWidth function getHeight virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels Reimplemented by : Engine::Graphics::Framebuffer::getHeight , Engine::Graphics::Texture3D::getHeight , Engine::Graphics::Texture2D::getHeight function getDepth virtual int getDepth() const =0 Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplemented by : Engine::Graphics::Framebuffer::getDepth , Engine::Graphics::Texture3D::getDepth , Engine::Graphics::Texture2D::getDepth function isLoaded inline bool isLoaded() const Does some more things Protected Attributes Documentation variable loaded bool loaded {false}; variable type Type type; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics::Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#enginegraphicstexture","text":"Module: An example game engine / Graphical related classes This is a base texture class that serves as a base class for other texture types. More... #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D","title":"Engine::Graphics::Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types","text":"Name enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32}","title":"Public Types"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions","text":"Name Texture ( Type type) virtual ~Texture () =default virtual int getWidth () const =0 Returns the width of the texture in pixels. virtual int getHeight () const =0 Returns the height of the texture in pixels. virtual int getDepth () const =0 Returns the depth of the texture in pixels. bool isLoaded () const","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes","text":"Name bool loaded Type type","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#additional-inherited-members","text":"Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#detailed-description","text":"class Engine::Graphics::Texture; This is a base texture class that serves as a base class for other texture types. Bug : This has some weird bug too! #include <iostream> #include <memory> #include \"Engine.hpp\" // A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique<uint8_t[]>(new uint8_t[1024*1024*3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } Filename: example-1.cpp","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#enum-type","text":"Enumerator Value Description UNKNOWN 0 RGBA_8 RGB_8 RGBA_16 RGB_16 RGBA_32 RGB_32","title":"enum Type"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture","text":"explicit Texture( Type type )","title":"function Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture_1","text":"virtual ~Texture() =default","title":"function ~Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getwidth","text":"virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels Reimplemented by : Engine::Graphics::Framebuffer::getWidth , Engine::Graphics::Texture3D::getWidth , Engine::Graphics::Texture2D::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getheight","text":"virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels Reimplemented by : Engine::Graphics::Framebuffer::getHeight , Engine::Graphics::Texture3D::getHeight , Engine::Graphics::Texture2D::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getdepth","text":"virtual int getDepth() const =0 Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplemented by : Engine::Graphics::Framebuffer::getDepth , Engine::Graphics::Texture3D::getDepth , Engine::Graphics::Texture2D::getDepth","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-isloaded","text":"inline bool isLoaded() const Does some more things","title":"function isLoaded"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-loaded","text":"bool loaded {false};","title":"variable loaded"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-type","text":"Type type; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable type"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/","text":"Engine::Graphics::Texture2D Module: An example game engine / Graphical related classes #include <Texture2D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name Texture2D (int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture2D () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels. Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle Public Functions Documentation function Texture2D Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Parameters : data The pointer to the raw pixels data width The width of the image held by the data pointer height The height of the image held by the data pointer type What is the type of this pixels array? function ~Texture2D virtual ~Texture2D() function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics::Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#enginegraphicstexture2d","text":"Module: An example game engine / Graphical related classes #include <Texture2D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions","text":"Name Texture2D (int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture2D () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels.","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d","text":"Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Parameters : data The pointer to the raw pixels data width The width of the image held by the data pointer height The height of the image held by the data pointer type What is the type of this pixels array?","title":"function Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d_1","text":"virtual ~Texture2D()","title":"function ~Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/","text":"Engine::Graphics::Texture3D Module: An example game engine / Graphical related classes Some deprecated class. More... #include <Texture3D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture3D () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels. Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle Detailed Description class Engine::Graphics::Texture3D; Some deprecated class. Deprecated : Don't use this texture type Public Functions Documentation function Texture3D Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) function ~Texture3D virtual ~Texture3D() function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics::Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#enginegraphicstexture3d","text":"Module: An example game engine / Graphical related classes Some deprecated class. More... #include <Texture3D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions","text":"Name Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8) virtual ~Texture3D () virtual int getWidth () const override Returns the width of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getDepth () const override Returns the depth of the texture in pixels.","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum class Type { UNKNOWN, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32} Public Functions inherited from Engine::Graphics::Texture Name Texture ( Type type) virtual ~Texture () =default bool isLoaded () const Protected Attributes inherited from Engine::Graphics::Texture Name bool loaded Type type Public Functions inherited from Engine::Graphics::Handle Name Handle () =default virtual ~Handle () =default int getHandle () const Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#detailed-description","text":"class Engine::Graphics::Texture3D; Some deprecated class. Deprecated : Don't use this texture type","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d","text":"Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 )","title":"function Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d_1","text":"virtual ~Texture3D()","title":"function ~Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth Updated on 2022-11-10 at 05:33:10 +0000","title":"function getDepth"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/","text":"Engine::Gui::GuiWidget Module: An example game engine / Some gui related stuff and whatever Some generic gui widget class. #include <GuiWidget.hpp> Public Slots Name void mySlot (QObject * object, int a, bool b) Public Signals Name void mySignal (QObject * object, int a, bool b) Public Functions Name GuiWidget (QObject * parent) virtual ~GuiWidget () =default Public Slots Documentation slot mySlot void mySlot( QObject * object, int a, bool b ) Public Signals Documentation signal mySignal void mySignal( QObject * object, int a, bool b ) Public Functions Documentation function GuiWidget explicit GuiWidget( QObject * parent ) function ~GuiWidget virtual ~GuiWidget() =default Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Gui::GuiWidget"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#engineguiguiwidget","text":"Module: An example game engine / Some gui related stuff and whatever Some generic gui widget class. #include <GuiWidget.hpp>","title":"Engine::Gui::GuiWidget"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots","text":"Name void mySlot (QObject * object, int a, bool b)","title":"Public Slots"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals","text":"Name void mySignal (QObject * object, int a, bool b)","title":"Public Signals"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions","text":"Name GuiWidget (QObject * parent) virtual ~GuiWidget () =default","title":"Public Functions"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-slots-documentation","text":"","title":"Public Slots Documentation"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#slot-myslot","text":"void mySlot( QObject * object, int a, bool b )","title":"slot mySlot"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-signals-documentation","text":"","title":"Public Signals Documentation"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#signal-mysignal","text":"void mySignal( QObject * object, int a, bool b )","title":"signal mySignal"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget","text":"explicit GuiWidget( QObject * parent )","title":"function GuiWidget"},{"location":"Classes/classEngine_1_1Gui_1_1GuiWidget/#function-guiwidget_1","text":"virtual ~GuiWidget() =default Updated on 2022-11-10 at 05:33:10 +0000","title":"function ~GuiWidget"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/","text":"Engine::Utils::ArrayView Module: An example game engine / Some useful utilities Filesystem path utility functions. More... #include <ArrayView.hpp> Public Functions Name ArrayView (const T * src, size_t len) virtual ~ArrayView () =default virtual const T * data () const virtual size_t size () const Detailed Description template <typename T =uint8_t> class Engine::Utils::ArrayView; Filesystem path utility functions. Template Parameters : T The type of the data, for example uint8_t Public Functions Documentation function ArrayView ArrayView( const T * src, size_t len ) function ~ArrayView virtual ~ArrayView() =default function data virtual const T * data() const function size virtual size_t size() const Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Utils::ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#engineutilsarrayview","text":"Module: An example game engine / Some useful utilities Filesystem path utility functions. More... #include <ArrayView.hpp>","title":"Engine::Utils::ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions","text":"Name ArrayView (const T * src, size_t len) virtual ~ArrayView () =default virtual const T * data () const virtual size_t size () const","title":"Public Functions"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#detailed-description","text":"template <typename T =uint8_t> class Engine::Utils::ArrayView; Filesystem path utility functions. Template Parameters : T The type of the data, for example uint8_t","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview","text":"ArrayView( const T * src, size_t len )","title":"function ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview_1","text":"virtual ~ArrayView() =default","title":"function ~ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-data","text":"virtual const T * data() const","title":"function data"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-size","text":"virtual size_t size() const Updated on 2022-11-10 at 05:33:10 +0000","title":"function size"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/","text":"Engine::Assets::Asset::Event::Loaded #include <Asset.hpp> Public Attributes Name bool success int usage Public Attributes Documentation variable success bool success; variable usage int usage; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets::Asset::Event::Loaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#engineassetsasseteventloaded","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Loaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes","text":"Name bool success int usage","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-success","text":"bool success;","title":"variable success"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-usage","text":"int usage; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable usage"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/","text":"Engine::Assets::Asset::Event::Unloaded #include <Asset.hpp> Public Attributes Name bool success Public Attributes Documentation variable success bool success; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets::Asset::Event::Unloaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#engineassetsasseteventunloaded","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Unloaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes","text":"Name bool success","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#variable-success","text":"bool success; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable success"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/","text":"Engine::Assets::Asset::Event::Waiting #include <Asset.hpp> Public Attributes Name Asset * other The pointer to the other asset this asset is waiting for. Public Attributes Documentation variable other Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets::Asset::Event::Waiting"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#engineassetsasseteventwaiting","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Waiting"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes","text":"Name Asset * other The pointer to the other asset this asset is waiting for.","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#variable-other","text":"Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Updated on 2022-11-10 at 05:33:10 +0000","title":"variable other"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/","text":"Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. #include <AudioBuffer.hpp> Public Attributes Name AudioData8U buffer Type type Public Attributes Documentation variable buffer AudioData8U buffer; variable type Type type; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Audio::AudioBuffer::TypedAudioData"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#engineaudioaudiobuffertypedaudiodata","text":"Use this to populate the buffer. #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer::TypedAudioData"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes","text":"Name AudioData8U buffer Type type","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-buffer","text":"AudioData8U buffer;","title":"variable buffer"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-type","text":"Type type; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable type"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/","text":"Engine::Assets::Asset::Event Module: An example game engine / Generic assets #include <Asset.hpp> Public Classes Name struct Loaded struct Unloaded struct Waiting Public Attributes Name struct Engine::Assets::Asset::Event::Loaded loaded struct Engine::Assets::Asset::Event::Unloaded unloaded struct Engine::Assets::Asset::Event::Waiting waiting Public Attributes Documentation variable loaded struct Engine::Assets::Asset::Event::Loaded loaded; variable unloaded struct Engine::Assets::Asset::Event::Unloaded unloaded; variable waiting struct Engine::Assets::Asset::Event::Waiting waiting; Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets::Asset::Event"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#engineassetsassetevent","text":"Module: An example game engine / Generic assets #include <Asset.hpp>","title":"Engine::Assets::Asset::Event"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-classes","text":"Name struct Loaded struct Unloaded struct Waiting","title":"Public Classes"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes","text":"Name struct Engine::Assets::Asset::Event::Loaded loaded struct Engine::Assets::Asset::Event::Unloaded unloaded struct Engine::Assets::Asset::Event::Waiting waiting","title":"Public Attributes"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-loaded","text":"struct Engine::Assets::Asset::Event::Loaded loaded;","title":"variable loaded"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-unloaded","text":"struct Engine::Assets::Asset::Event::Unloaded unloaded;","title":"variable unloaded"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-waiting","text":"struct Engine::Assets::Asset::Event::Waiting waiting; Updated on 2022-11-10 at 05:33:10 +0000","title":"variable waiting"},{"location":"Examples/","text":"Examples example example-1.cpp This is an example. Updated on 2022-11-10 at 05:33:10 +0000","title":"Examples"},{"location":"Examples/#examples","text":"example example-1.cpp This is an example. Updated on 2022-11-10 at 05:33:10 +0000","title":"Examples"},{"location":"Examples/example-1_8cpp-example/","text":"example-1.cpp This is an example This is detailed docummentation ```cpp include include include \"Engine.hpp\" // A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique (new uint8_t[1024 1024 3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } ``` Filename: example-1.cpp Updated on 2022-11-10 at 05:33:10 +0000","title":"example-1.cpp"},{"location":"Examples/example-1_8cpp-example/#example-1cpp","text":"This is an example This is detailed docummentation ```cpp","title":"example-1.cpp"},{"location":"Examples/example-1_8cpp-example/#include","text":"","title":"include "},{"location":"Examples/example-1_8cpp-example/#include_1","text":"","title":"include "},{"location":"Examples/example-1_8cpp-example/#include-enginehpp","text":"// A dummy example int main() { // Create pixels buffer const auto pixels = std::make_unique (new uint8_t[1024 1024 3]); fillData(*pixels, \"path/to/texture.png\"); // Create a texture out of the pixels Engine::Graphics::Texture2D texture(1024, 1024, *data); // Done return 0; } ``` Filename: example-1.cpp Updated on 2022-11-10 at 05:33:10 +0000","title":"include \"Engine.hpp\""},{"location":"Files/","text":"Files dir src file hpp file hpp dir src/Assets file hpp file hpp dir src/Audio file hpp file hpp file hpp dir src/Graphics file hpp file hpp file hpp file hpp file hpp file hpp file hpp dir src/Gui file hpp file hpp dir src/Utils file hpp file hpp file hpp file hpp file hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/#files","text":"dir src file hpp file hpp dir src/Assets file hpp file hpp dir src/Audio file hpp file hpp file hpp dir src/Graphics file hpp file hpp file hpp file hpp file hpp file hpp file hpp dir src/Gui file hpp file hpp dir src/Utils file hpp file hpp file hpp file hpp file hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/ArrayView_8hpp/","text":"src/Utils/ArrayView.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Utils Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Source code #pragma once namespace Engine { namespace Utils { template<typename T = uint8_t> class ArrayView { public: ArrayView(const T* src, size_t len); virtual ~ArrayView() = default; virtual const T* data() const; virtual size_t size() const; }; } } Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils/ArrayView.hpp"},{"location":"Files/ArrayView_8hpp/#srcutilsarrayviewhpp","text":"","title":"src/Utils/ArrayView.hpp"},{"location":"Files/ArrayView_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils","title":"Namespaces"},{"location":"Files/ArrayView_8hpp/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions.","title":"Classes"},{"location":"Files/ArrayView_8hpp/#source-code","text":"#pragma once namespace Engine { namespace Utils { template<typename T = uint8_t> class ArrayView { public: ArrayView(const T* src, size_t len); virtual ~ArrayView() = default; virtual const T* data() const; virtual size_t size() const; }; } } Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Asset_8hpp/","text":"src/Assets/Asset.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Assets Classes Name class Engine::Assets::Asset union Engine::Assets::Asset::Event struct Engine::Assets::Asset::Event::Loaded struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Waiting Source code #pragma once #include <queue> #include <string> namespace Engine { namespace Assets { class Asset { public: union Event { struct Loaded { bool success; int usage; } loaded; struct Unloaded { bool success; } unloaded; struct Waiting { Asset* other; } waiting; }; explicit Asset(const std::string& name); virtual ~Asset() = 0; virtual void load(); virtual void unload(); const Event& getEvent() const { return event; } private: Event event; }; } } Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Assets/Asset.hpp"},{"location":"Files/Asset_8hpp/#srcassetsassethpp","text":"","title":"src/Assets/Asset.hpp"},{"location":"Files/Asset_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Assets","title":"Namespaces"},{"location":"Files/Asset_8hpp/#classes","text":"Name class Engine::Assets::Asset union Engine::Assets::Asset::Event struct Engine::Assets::Asset::Event::Loaded struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Waiting","title":"Classes"},{"location":"Files/Asset_8hpp/#source-code","text":"#pragma once #include <queue> #include <string> namespace Engine { namespace Assets { class Asset { public: union Event { struct Loaded { bool success; int usage; } loaded; struct Unloaded { bool success; } unloaded; struct Waiting { Asset* other; } waiting; }; explicit Asset(const std::string& name); virtual ~Asset() = 0; virtual void load(); virtual void unload(); const Event& getEvent() const { return event; } private: Event event; }; } } Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Assets_8hpp/","text":"src/Assets/Assets.hpp Source code #pragma once #include \"AssetModel.hpp\" #include \"AssetManager.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Assets/Assets.hpp"},{"location":"Files/Assets_8hpp/#srcassetsassetshpp","text":"","title":"src/Assets/Assets.hpp"},{"location":"Files/Assets_8hpp/#source-code","text":"#pragma once #include \"AssetModel.hpp\" #include \"AssetManager.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/AudioBuffer_8hpp/","text":"src/Audio/AudioBuffer.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Audio Classes Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. Source code #pragma once #include \"../Utils/ArrayView.hpp\" namespace Engine { namespace Audio { class AudioManager; class AudioBuffer; typedef int (*Callback)(AudioBuffer& buffer, size_t offset); using Callback2 = int (*)(AudioBuffer& buffer, size_t offset, void* user); extern void doSomething(AudioBuffer& buffer); class AudioBuffer { public: enum class Type { UNKNOWN = 0, INT_8 = 1 << 1, INT_16 = 1 << 2, INT_24 = 1 << 3, INT_32 = 1 << 4, FLOAT_32 = 1 << 5 }; template <typename T> using AudioData = Utils::ArrayView<T>; typedef AudioData<uint8_t> AudioData8U; struct TypedAudioData { AudioData8U buffer; Type type; }; explicit AudioBuffer(const std::string& filename); virtual ~AudioBuffer() = default; void play(AudioManager& manager) const; void stop(AudioManager& manager) const; void loop(AudioManager& manager) const; void setData(const TypedAudioData& data); template <size_t Size> void setDataMultiple(const TypedAudioData data[Size]) { } void setData(const TypedAudioData data[], size_t size); friend class AudioManager; friend void Audio::doSomething(AudioBuffer& buffer); void setCallback(Callback callback); void setCallback2(Callback2 callback, void* user); protected: float* getData(); bool playing{false}; }; } // namespace Audio } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Audio/AudioBuffer.hpp"},{"location":"Files/AudioBuffer_8hpp/#srcaudioaudiobufferhpp","text":"","title":"src/Audio/AudioBuffer.hpp"},{"location":"Files/AudioBuffer_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Audio","title":"Namespaces"},{"location":"Files/AudioBuffer_8hpp/#classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer.","title":"Classes"},{"location":"Files/AudioBuffer_8hpp/#source-code","text":"#pragma once #include \"../Utils/ArrayView.hpp\" namespace Engine { namespace Audio { class AudioManager; class AudioBuffer; typedef int (*Callback)(AudioBuffer& buffer, size_t offset); using Callback2 = int (*)(AudioBuffer& buffer, size_t offset, void* user); extern void doSomething(AudioBuffer& buffer); class AudioBuffer { public: enum class Type { UNKNOWN = 0, INT_8 = 1 << 1, INT_16 = 1 << 2, INT_24 = 1 << 3, INT_32 = 1 << 4, FLOAT_32 = 1 << 5 }; template <typename T> using AudioData = Utils::ArrayView<T>; typedef AudioData<uint8_t> AudioData8U; struct TypedAudioData { AudioData8U buffer; Type type; }; explicit AudioBuffer(const std::string& filename); virtual ~AudioBuffer() = default; void play(AudioManager& manager) const; void stop(AudioManager& manager) const; void loop(AudioManager& manager) const; void setData(const TypedAudioData& data); template <size_t Size> void setDataMultiple(const TypedAudioData data[Size]) { } void setData(const TypedAudioData data[], size_t size); friend class AudioManager; friend void Audio::doSomething(AudioBuffer& buffer); void setCallback(Callback callback); void setCallback2(Callback2 callback, void* user); protected: float* getData(); bool playing{false}; }; } // namespace Audio } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/AudioManager_8hpp/","text":"src/Audio/AudioManager.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Audio Classes Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Source code #pragma once #include \"AudioBuffer.hpp\" namespace Engine { namespace Audio { class AudioManager final { public: AudioManager(int numOfChannels = 128); ~AudioManager(); void enque(const AudioBuffer& buffer); }; } // namespace Audio } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Audio/AudioManager.hpp"},{"location":"Files/AudioManager_8hpp/#srcaudioaudiomanagerhpp","text":"","title":"src/Audio/AudioManager.hpp"},{"location":"Files/AudioManager_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Audio","title":"Namespaces"},{"location":"Files/AudioManager_8hpp/#classes","text":"Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.","title":"Classes"},{"location":"Files/AudioManager_8hpp/#source-code","text":"#pragma once #include \"AudioBuffer.hpp\" namespace Engine { namespace Audio { class AudioManager final { public: AudioManager(int numOfChannels = 128); ~AudioManager(); void enque(const AudioBuffer& buffer); }; } // namespace Audio } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Audio_8hpp/","text":"src/Audio/Audio.hpp Source code #pragma once #include \"AudioBuffer.hpp\" #include \"AudioManager.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Audio/Audio.hpp"},{"location":"Files/Audio_8hpp/#srcaudioaudiohpp","text":"","title":"src/Audio/Audio.hpp"},{"location":"Files/Audio_8hpp/#source-code","text":"#pragma once #include \"AudioBuffer.hpp\" #include \"AudioManager.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Config_8hpp/","text":"src/Utils/Config.hpp Defines Name ENGINE_VERSION Autogenerated version string by CMake. ENGINE_ARCH Macros Documentation define ENGINE_VERSION #define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. define ENGINE_ARCH #define ENGINE_ARCH \"amd64\" Source code #pragma once #define ENGINE_VERSION \"v1.0.1\" #define ENGINE_ARCH \"amd64\" Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils/Config.hpp"},{"location":"Files/Config_8hpp/#srcutilsconfighpp","text":"","title":"src/Utils/Config.hpp"},{"location":"Files/Config_8hpp/#defines","text":"Name ENGINE_VERSION Autogenerated version string by CMake. ENGINE_ARCH","title":"Defines"},{"location":"Files/Config_8hpp/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/Config_8hpp/#define-engine_version","text":"#define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake.","title":"define ENGINE_VERSION"},{"location":"Files/Config_8hpp/#define-engine_arch","text":"#define ENGINE_ARCH \"amd64\"","title":"define ENGINE_ARCH"},{"location":"Files/Config_8hpp/#source-code","text":"#pragma once #define ENGINE_VERSION \"v1.0.1\" #define ENGINE_ARCH \"amd64\" Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Engine_8hpp/","text":"src/Engine.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Functions Name std::string someGlobalFunc () Some global extern function. Functions Documentation function someGlobalFunc std::string someGlobalFunc() Some global extern function. Source code #include \"Assets/Assets.hpp\" #include \"Audio/Audio.hpp\" #include \"Exception.hpp\" #include \"Graphics/Graphics.hpp\" #include \"Gui/Gui.hpp\" #include \"Utils/Utils.hpp\" extern std::string someGlobalFunc(); namespace Engine { extern std::string getVersion(); } // namespace Engine //----------------------------------------------------------- //----------------------------------------------------------- Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Engine.hpp"},{"location":"Files/Engine_8hpp/#srcenginehpp","text":"","title":"src/Engine.hpp"},{"location":"Files/Engine_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Engine_8hpp/#functions","text":"Name std::string someGlobalFunc () Some global extern function.","title":"Functions"},{"location":"Files/Engine_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Files/Engine_8hpp/#function-someglobalfunc","text":"std::string someGlobalFunc() Some global extern function.","title":"function someGlobalFunc"},{"location":"Files/Engine_8hpp/#source-code","text":"#include \"Assets/Assets.hpp\" #include \"Audio/Audio.hpp\" #include \"Exception.hpp\" #include \"Graphics/Graphics.hpp\" #include \"Gui/Gui.hpp\" #include \"Utils/Utils.hpp\" extern std::string someGlobalFunc(); namespace Engine { extern std::string getVersion(); } // namespace Engine //----------------------------------------------------------- //----------------------------------------------------------- Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Exception_8hpp/","text":"src/Exception.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Exception Source code #pragma once #include <exception> #include <string> namespace Engine { class Exception: public std::exception { public: Exception() = default; explicit Exception(std::string msg) : msg(std::move(msg)) { } const char* what() const throw() override { return msg.c_str(); } private: std::string msg; }; } Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Exception.hpp"},{"location":"Files/Exception_8hpp/#srcexceptionhpp","text":"","title":"src/Exception.hpp"},{"location":"Files/Exception_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Exception_8hpp/#classes","text":"Name class Engine::Exception","title":"Classes"},{"location":"Files/Exception_8hpp/#source-code","text":"#pragma once #include <exception> #include <string> namespace Engine { class Exception: public std::exception { public: Exception() = default; explicit Exception(std::string msg) : msg(std::move(msg)) { } const char* what() const throw() override { return msg.c_str(); } private: std::string msg; }; } Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Framebuffer_8hpp/","text":"src/Graphics/Framebuffer.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes Name class Engine::Graphics::Framebuffer Source code #pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Framebuffer : public Texture { public: Framebuffer(int width, int height); virtual ~Framebuffer(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Framebuffer.hpp"},{"location":"Files/Framebuffer_8hpp/#srcgraphicsframebufferhpp","text":"","title":"src/Graphics/Framebuffer.hpp"},{"location":"Files/Framebuffer_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics","title":"Namespaces"},{"location":"Files/Framebuffer_8hpp/#classes","text":"Name class Engine::Graphics::Framebuffer","title":"Classes"},{"location":"Files/Framebuffer_8hpp/#source-code","text":"#pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Framebuffer : public Texture { public: Framebuffer(int width, int height); virtual ~Framebuffer(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Graphics_8hpp/","text":"src/Graphics/Graphics.hpp Source code #pragma once #include \"Framebuffer.hpp\" #include \"Handle.hpp\" #include \"Renderer.hpp\" #include \"Texture.hpp\" #include \"Texture2D.hpp\" #include \"Texture3D.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Graphics.hpp"},{"location":"Files/Graphics_8hpp/#srcgraphicsgraphicshpp","text":"","title":"src/Graphics/Graphics.hpp"},{"location":"Files/Graphics_8hpp/#source-code","text":"#pragma once #include \"Framebuffer.hpp\" #include \"Handle.hpp\" #include \"Renderer.hpp\" #include \"Texture.hpp\" #include \"Texture2D.hpp\" #include \"Texture3D.hpp\" Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/GuiWidget_8hpp/","text":"src/Gui/GuiWidget.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Gui Classes Name class Engine::Gui::GuiWidget Some generic gui widget class. Source code #pragma once class QObject; // Forward definition namespace Engine { namespace Gui { class GuiWidget { public: explicit GuiWidget(QObject* parent); virtual ~GuiWidget() = default; signals: void mySignal(QObject* object, int a, bool b); public slots: void mySlot(QObject* object, int a, bool b); private: QObject* parent; }; } // namespace Gui } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Gui/GuiWidget.hpp"},{"location":"Files/GuiWidget_8hpp/#srcguiguiwidgethpp","text":"","title":"src/Gui/GuiWidget.hpp"},{"location":"Files/GuiWidget_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Gui","title":"Namespaces"},{"location":"Files/GuiWidget_8hpp/#classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class.","title":"Classes"},{"location":"Files/GuiWidget_8hpp/#source-code","text":"#pragma once class QObject; // Forward definition namespace Engine { namespace Gui { class GuiWidget { public: explicit GuiWidget(QObject* parent); virtual ~GuiWidget() = default; signals: void mySignal(QObject* object, int a, bool b); public slots: void mySlot(QObject* object, int a, bool b); private: QObject* parent; }; } // namespace Gui } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Gui_8hpp/","text":"src/Gui/Gui.hpp Source code #pragma once Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Gui/Gui.hpp"},{"location":"Files/Gui_8hpp/#srcguiguihpp","text":"","title":"src/Gui/Gui.hpp"},{"location":"Files/Gui_8hpp/#source-code","text":"#pragma once Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Handle_8hpp/","text":"src/Graphics/Handle.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes Name class Engine::Graphics::Handle Source code #pragma once namespace Engine { namespace Graphics { class Handle { public: Handle() = default; virtual ~Handle() = default; int getHandle() const { return handle; } protected: // OpenGL handle int handle; }; inline int getHandle(Handle& handle) { return handle.getHandle(); } } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Handle.hpp"},{"location":"Files/Handle_8hpp/#srcgraphicshandlehpp","text":"","title":"src/Graphics/Handle.hpp"},{"location":"Files/Handle_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics","title":"Namespaces"},{"location":"Files/Handle_8hpp/#classes","text":"Name class Engine::Graphics::Handle","title":"Classes"},{"location":"Files/Handle_8hpp/#source-code","text":"#pragma once namespace Engine { namespace Graphics { class Handle { public: Handle() = default; virtual ~Handle() = default; int getHandle() const { return handle; } protected: // OpenGL handle int handle; }; inline int getHandle(Handle& handle) { return handle.getHandle(); } } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Log_8hpp/","text":"src/Utils/Log.hpp Defines Name LOG_DEBUG (MSG, ...) Macros Documentation define LOG_DEBUG #define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Source code #pragma once #include <stdio.h> #define LOG_DEBUG(MSG, ...) printf(MSG, ##__VA_ARGS__) Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils/Log.hpp"},{"location":"Files/Log_8hpp/#srcutilsloghpp","text":"","title":"src/Utils/Log.hpp"},{"location":"Files/Log_8hpp/#defines","text":"Name LOG_DEBUG (MSG, ...)","title":"Defines"},{"location":"Files/Log_8hpp/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/Log_8hpp/#define-log_debug","text":"#define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__)","title":"define LOG_DEBUG"},{"location":"Files/Log_8hpp/#source-code","text":"#pragma once #include <stdio.h> #define LOG_DEBUG(MSG, ...) printf(MSG, ##__VA_ARGS__) Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Path_8hpp/","text":"src/Utils/Path.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Utils Engine::Utils::Path Filesystem path utility functions. Source code #pragma once #include <string> namespace Engine { namespace Utils { namespace Path { std::string getFilename(const std::string& path); std::string getExtension(const std::string& path); } } } Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils/Path.hpp"},{"location":"Files/Path_8hpp/#srcutilspathhpp","text":"","title":"src/Utils/Path.hpp"},{"location":"Files/Path_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils Engine::Utils::Path Filesystem path utility functions.","title":"Namespaces"},{"location":"Files/Path_8hpp/#source-code","text":"#pragma once #include <string> namespace Engine { namespace Utils { namespace Path { std::string getFilename(const std::string& path); std::string getExtension(const std::string& path); } } } Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Renderer_8hpp/","text":"src/Graphics/Renderer.hpp Source code #pragma once Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Renderer.hpp"},{"location":"Files/Renderer_8hpp/#srcgraphicsrendererhpp","text":"","title":"src/Graphics/Renderer.hpp"},{"location":"Files/Renderer_8hpp/#source-code","text":"#pragma once Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Texture2D_8hpp/","text":"src/Graphics/Texture2D.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes Name class Engine::Graphics::Texture2D Source code #pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Texture2D : public Texture { public: Texture2D(int width, int height, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture2D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Texture2D.hpp"},{"location":"Files/Texture2D_8hpp/#srcgraphicstexture2dhpp","text":"","title":"src/Graphics/Texture2D.hpp"},{"location":"Files/Texture2D_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics","title":"Namespaces"},{"location":"Files/Texture2D_8hpp/#classes","text":"Name class Engine::Graphics::Texture2D","title":"Classes"},{"location":"Files/Texture2D_8hpp/#source-code","text":"#pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Texture2D : public Texture { public: Texture2D(int width, int height, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture2D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Texture3D_8hpp/","text":"src/Graphics/Texture3D.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes Name class Engine::Graphics::Texture3D Some deprecated class. Source code #pragma once #pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Texture3D : public Texture { public: Texture3D(int width, int height, int depth, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture3D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Texture3D.hpp"},{"location":"Files/Texture3D_8hpp/#srcgraphicstexture3dhpp","text":"","title":"src/Graphics/Texture3D.hpp"},{"location":"Files/Texture3D_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics","title":"Namespaces"},{"location":"Files/Texture3D_8hpp/#classes","text":"Name class Engine::Graphics::Texture3D Some deprecated class.","title":"Classes"},{"location":"Files/Texture3D_8hpp/#source-code","text":"#pragma once #pragma once #include \"Texture.hpp\" namespace Engine { namespace Graphics { class Texture3D : public Texture { public: Texture3D(int width, int height, int depth, uint8_t* data, Texture::Type type = Texture::Type::RGBA8); virtual ~Texture3D(); int getWidth() const override; int getHeight() const override; int getDepth() const override; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Texture_8hpp/","text":"src/Graphics/Texture.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Graphics Classes Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. Source code #pragma once #include \"Handle.hpp\" namespace Engine { namespace Graphics { class Texture : protected Handle { public: enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32 }; explicit Texture(Type type); virtual ~Texture() = default; virtual int getWidth() const = 0; virtual int getHeight() const = 0; virtual int getDepth() const = 0; inline bool isLoaded() const { return loaded; } protected: bool loaded{false}; Type type; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics/Texture.hpp"},{"location":"Files/Texture_8hpp/#srcgraphicstexturehpp","text":"","title":"src/Graphics/Texture.hpp"},{"location":"Files/Texture_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Graphics","title":"Namespaces"},{"location":"Files/Texture_8hpp/#classes","text":"Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types.","title":"Classes"},{"location":"Files/Texture_8hpp/#source-code","text":"#pragma once #include \"Handle.hpp\" namespace Engine { namespace Graphics { class Texture : protected Handle { public: enum class Type { UNKNOWN = 0, RGBA_8, RGB_8, RGBA_16, RGB_16, RGBA_32, RGB_32 }; explicit Texture(Type type); virtual ~Texture() = default; virtual int getWidth() const = 0; virtual int getHeight() const = 0; virtual int getDepth() const = 0; inline bool isLoaded() const { return loaded; } protected: bool loaded{false}; Type type; }; } // namespace Graphics } // namespace Engine Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/Utils_8hpp/","text":"src/Utils/Utils.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Engine::Utils Source code #pragma once #include \"Path.hpp\" #include \"ArrayView.hpp\" #include \"Config.hpp\" #include \"Log.hpp\" namespace Engine { namespace Utils { inline void name_with_underscores(const std::string& arg) { (void)arg; } } } Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils/Utils.hpp"},{"location":"Files/Utils_8hpp/#srcutilsutilshpp","text":"","title":"src/Utils/Utils.hpp"},{"location":"Files/Utils_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components. Engine::Utils","title":"Namespaces"},{"location":"Files/Utils_8hpp/#source-code","text":"#pragma once #include \"Path.hpp\" #include \"ArrayView.hpp\" #include \"Config.hpp\" #include \"Log.hpp\" namespace Engine { namespace Utils { inline void name_with_underscores(const std::string& arg) { (void)arg; } } } Updated on 2022-11-10 at 05:33:10 +0000","title":"Source code"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/","text":"src/Graphics Files Name src/Graphics/Framebuffer.hpp src/Graphics/Graphics.hpp src/Graphics/Handle.hpp src/Graphics/Renderer.hpp src/Graphics/Texture.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture3D.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Graphics"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/#srcgraphics","text":"","title":"src/Graphics"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/#files","text":"Name src/Graphics/Framebuffer.hpp src/Graphics/Graphics.hpp src/Graphics/Handle.hpp src/Graphics/Renderer.hpp src/Graphics/Texture.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture3D.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"src Directories Name src/Assets src/Audio src/Graphics src/Gui src/Utils Files Name src/Engine.hpp src/Exception.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#src","text":"","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","text":"Name src/Assets src/Audio src/Graphics src/Gui src/Utils","title":"Directories"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Name src/Engine.hpp src/Exception.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/","text":"src/Utils Files Name src/Utils/ArrayView.hpp src/Utils/Config.hpp src/Utils/Log.hpp src/Utils/Path.hpp src/Utils/Utils.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Utils"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/#srcutils","text":"","title":"src/Utils"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/#files","text":"Name src/Utils/ArrayView.hpp src/Utils/Config.hpp src/Utils/Log.hpp src/Utils/Path.hpp src/Utils/Utils.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/","text":"src/Gui Files Name src/Gui/Gui.hpp src/Gui/GuiWidget.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Gui"},{"location":"Files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/#srcgui","text":"","title":"src/Gui"},{"location":"Files/dir_b5ac5e964c12a6b13a9d28feb9f3d3ed/#files","text":"Name src/Gui/Gui.hpp src/Gui/GuiWidget.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/","text":"src/Audio Files Name src/Audio/Audio.hpp src/Audio/AudioBuffer.hpp src/Audio/AudioManager.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Audio"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/#srcaudio","text":"","title":"src/Audio"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/#files","text":"Name src/Audio/Audio.hpp src/Audio/AudioBuffer.hpp src/Audio/AudioManager.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/","text":"src/Assets Files Name src/Assets/Asset.hpp src/Assets/Assets.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"src/Assets"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/#srcassets","text":"","title":"src/Assets"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/#files","text":"Name src/Assets/Asset.hpp src/Assets/Assets.hpp Updated on 2022-11-10 at 05:33:10 +0000","title":"Files"},{"location":"Modules/","text":"Modules group An example game engine This is a brief description to the engine group. group Generic assets This is a brief description to the assets group. group Audio buffers and devices This is a brief description to the audio group. group Graphical related classes This is a brief description to the graphics group. group Some gui related stuff and whatever This is a brief description to the gui group. group Some useful utilities This is a brief description to the utils group. Updated on 2022-11-10 at 05:33:10 +0000","title":"Modules"},{"location":"Modules/#modules","text":"group An example game engine This is a brief description to the engine group. group Generic assets This is a brief description to the assets group. group Audio buffers and devices This is a brief description to the audio group. group Graphical related classes This is a brief description to the graphics group. group Some gui related stuff and whatever This is a brief description to the gui group. group Some useful utilities This is a brief description to the utils group. Updated on 2022-11-10 at 05:33:10 +0000","title":"Modules"},{"location":"Modules/group__Assets/","text":"Generic assets Module: An example game engine This is a brief description to the assets group. More... Classes Name union Engine::Assets::Asset::Event class Engine::Assets::Asset Detailed Description This is a brief description to the assets group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Generic assets"},{"location":"Modules/group__Assets/#generic-assets","text":"Module: An example game engine This is a brief description to the assets group. More...","title":"Generic assets"},{"location":"Modules/group__Assets/#classes","text":"Name union Engine::Assets::Asset::Event class Engine::Assets::Asset","title":"Classes"},{"location":"Modules/group__Assets/#detailed-description","text":"This is a brief description to the assets group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Detailed Description"},{"location":"Modules/group__Audio/","text":"Audio buffers and devices Module: An example game engine This is a brief description to the audio group. More... Classes Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Detailed Description This is a brief description to the audio group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Audio buffers and devices"},{"location":"Modules/group__Audio/#audio-buffers-and-devices","text":"Module: An example game engine This is a brief description to the audio group. More...","title":"Audio buffers and devices"},{"location":"Modules/group__Audio/#classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.","title":"Classes"},{"location":"Modules/group__Audio/#detailed-description","text":"This is a brief description to the audio group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Detailed Description"},{"location":"Modules/group__Engine/","text":"An example game engine This is a brief description to the engine group. More... Modules Name Generic assets This is a brief description to the assets group. Audio buffers and devices This is a brief description to the audio group. Graphical related classes This is a brief description to the graphics group. Some gui related stuff and whatever This is a brief description to the gui group. Some useful utilities This is a brief description to the utils group. Namespaces Name Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Exception Functions Name std::string getVersion () Returns the version string. Detailed Description This is a brief description to the engine group. Some detailed description here Functions Documentation function getVersion std::string getVersion() Returns the version string. Updated on 2022-11-10 at 05:33:10 +0000","title":"An example game engine"},{"location":"Modules/group__Engine/#an-example-game-engine","text":"This is a brief description to the engine group. More...","title":"An example game engine"},{"location":"Modules/group__Engine/#modules","text":"Name Generic assets This is a brief description to the assets group. Audio buffers and devices This is a brief description to the audio group. Graphical related classes This is a brief description to the graphics group. Some gui related stuff and whatever This is a brief description to the gui group. Some useful utilities This is a brief description to the utils group.","title":"Modules"},{"location":"Modules/group__Engine/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Modules/group__Engine/#classes","text":"Name class Engine::Exception","title":"Classes"},{"location":"Modules/group__Engine/#functions","text":"Name std::string getVersion () Returns the version string.","title":"Functions"},{"location":"Modules/group__Engine/#detailed-description","text":"This is a brief description to the engine group. Some detailed description here","title":"Detailed Description"},{"location":"Modules/group__Engine/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Modules/group__Engine/#function-getversion","text":"std::string getVersion() Returns the version string. Updated on 2022-11-10 at 05:33:10 +0000","title":"function getVersion"},{"location":"Modules/group__Graphics/","text":"Graphical related classes Module: An example game engine This is a brief description to the graphics group. More... Classes Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class. interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. Functions Name int getHandle (Handle & handle) Some namespace inline function. Detailed Description This is a brief description to the graphics group. Some detailed description here Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 2022-11-10 at 05:33:10 +0000","title":"Graphical related classes"},{"location":"Modules/group__Graphics/#graphical-related-classes","text":"Module: An example game engine This is a brief description to the graphics group. More...","title":"Graphical related classes"},{"location":"Modules/group__Graphics/#classes","text":"Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class. interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types.","title":"Classes"},{"location":"Modules/group__Graphics/#functions","text":"Name int getHandle (Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"Modules/group__Graphics/#detailed-description","text":"This is a brief description to the graphics group. Some detailed description here","title":"Detailed Description"},{"location":"Modules/group__Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Modules/group__Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 2022-11-10 at 05:33:10 +0000","title":"function getHandle"},{"location":"Modules/group__Gui/","text":"Some gui related stuff and whatever Module: An example game engine This is a brief description to the gui group. More... Classes Name class Engine::Gui::GuiWidget Some generic gui widget class. Detailed Description This is a brief description to the gui group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Some gui related stuff and whatever"},{"location":"Modules/group__Gui/#some-gui-related-stuff-and-whatever","text":"Module: An example game engine This is a brief description to the gui group. More...","title":"Some gui related stuff and whatever"},{"location":"Modules/group__Gui/#classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class.","title":"Classes"},{"location":"Modules/group__Gui/#detailed-description","text":"This is a brief description to the gui group. Some detailed description here Updated on 2022-11-10 at 05:33:10 +0000","title":"Detailed Description"},{"location":"Modules/group__Utils/","text":"Some useful utilities Module: An example game engine This is a brief description to the utils group. More... Namespaces Name Engine::Utils::Path Filesystem path utility functions. Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Functions Name void name_with_underscores (const std::string & arg) Defines Name ENGINE_VERSION Autogenerated version string by CMake. LOG_DEBUG (MSG, ...) Detailed Description This is a brief description to the utils group. Some detailed description here Functions Documentation function name_with_underscores inline void name_with_underscores( const std::string & arg ) Macros Documentation define ENGINE_VERSION #define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. define LOG_DEBUG #define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Updated on 2022-11-10 at 05:33:10 +0000","title":"Some useful utilities"},{"location":"Modules/group__Utils/#some-useful-utilities","text":"Module: An example game engine This is a brief description to the utils group. More...","title":"Some useful utilities"},{"location":"Modules/group__Utils/#namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions.","title":"Namespaces"},{"location":"Modules/group__Utils/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions.","title":"Classes"},{"location":"Modules/group__Utils/#functions","text":"Name void name_with_underscores (const std::string & arg)","title":"Functions"},{"location":"Modules/group__Utils/#defines","text":"Name ENGINE_VERSION Autogenerated version string by CMake. LOG_DEBUG (MSG, ...)","title":"Defines"},{"location":"Modules/group__Utils/#detailed-description","text":"This is a brief description to the utils group. Some detailed description here","title":"Detailed Description"},{"location":"Modules/group__Utils/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Modules/group__Utils/#function-name_with_underscores","text":"inline void name_with_underscores( const std::string & arg )","title":"function name_with_underscores"},{"location":"Modules/group__Utils/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Modules/group__Utils/#define-engine_version","text":"#define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake.","title":"define ENGINE_VERSION"},{"location":"Modules/group__Utils/#define-log_debug","text":"#define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Updated on 2022-11-10 at 05:33:10 +0000","title":"define LOG_DEBUG"},{"location":"Namespaces/","text":"Namespaces namespace Engine This namespace contains all of the necessary engine components. namespace Assets namespace Audio namespace Graphics namespace Gui namespace Utils namespace Path Filesystem path utility functions. Updated on 2022-11-10 at 05:33:10 +0000","title":"Namespaces"},{"location":"Namespaces/#namespaces","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets namespace Audio namespace Graphics namespace Gui namespace Utils namespace Path Filesystem path utility functions. Updated on 2022-11-10 at 05:33:10 +0000","title":"Namespaces"},{"location":"Namespaces/namespaceEngine/","text":"Engine Module: An example game engine This namespace contains all of the necessary engine components. More... Namespaces Name Engine::Assets Engine::Audio Engine::Graphics Engine::Gui Engine::Utils Classes Name class Engine::Exception Functions Name std::string getVersion () Returns the version string. Detailed Description This namespace contains all of the necessary engine components. See : Engine::Assets Engine::Audio Engine::Graphics Engine::Utils Functions Documentation function getVersion std::string getVersion() Returns the version string. Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine"},{"location":"Namespaces/namespaceEngine/#engine","text":"Module: An example game engine This namespace contains all of the necessary engine components. More...","title":"Engine"},{"location":"Namespaces/namespaceEngine/#namespaces","text":"Name Engine::Assets Engine::Audio Engine::Graphics Engine::Gui Engine::Utils","title":"Namespaces"},{"location":"Namespaces/namespaceEngine/#classes","text":"Name class Engine::Exception","title":"Classes"},{"location":"Namespaces/namespaceEngine/#functions","text":"Name std::string getVersion () Returns the version string.","title":"Functions"},{"location":"Namespaces/namespaceEngine/#detailed-description","text":"This namespace contains all of the necessary engine components. See : Engine::Assets Engine::Audio Engine::Graphics Engine::Utils","title":"Detailed Description"},{"location":"Namespaces/namespaceEngine/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine/#function-getversion","text":"std::string getVersion() Returns the version string. Updated on 2022-11-10 at 05:33:10 +0000","title":"function getVersion"},{"location":"Namespaces/namespaceEngine_1_1Assets/","text":"Engine::Assets Classes Name class Engine::Assets::Asset Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Assets"},{"location":"Namespaces/namespaceEngine_1_1Assets/#engineassets","text":"","title":"Engine::Assets"},{"location":"Namespaces/namespaceEngine_1_1Assets/#classes","text":"Name class Engine::Assets::Asset Updated on 2022-11-10 at 05:33:10 +0000","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Audio/","text":"Engine::Audio Classes Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Types Name typedef int(*)(AudioBuffer &buffer, size_t offset) Callback Some callback function pointer type definition. using int( )( AudioBuffer &buffer, size_t offset, void user) Callback2 Some callback function pointer type definition. Functions Name void doSomething ( AudioBuffer & buffer) Do something with the buffer. Types Documentation typedef Callback typedef int(* Engine::Audio::Callback) (AudioBuffer &buffer, size_t offset); Some callback function pointer type definition. Parameters : buffer The buffer this callback is called from offset The offset of the buffer currently playing Deprecated : Use the Audio::Callback2 instead using Callback2 using Engine::Audio::Callback2 = typedef int (*)(AudioBuffer& buffer, size_t offset, void* user); Some callback function pointer type definition. Parameters : buffer The buffer this callback is called from offset The offset of the buffer currently playing user User specific data Functions Documentation function doSomething void doSomething( AudioBuffer & buffer ) Do something with the buffer. Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Audio"},{"location":"Namespaces/namespaceEngine_1_1Audio/#engineaudio","text":"","title":"Engine::Audio"},{"location":"Namespaces/namespaceEngine_1_1Audio/#classes","text":"Name class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances.","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Audio/#types","text":"Name typedef int(*)(AudioBuffer &buffer, size_t offset) Callback Some callback function pointer type definition. using int( )( AudioBuffer &buffer, size_t offset, void user) Callback2 Some callback function pointer type definition.","title":"Types"},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions","text":"Name void doSomething ( AudioBuffer & buffer) Do something with the buffer.","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Audio/#types-documentation","text":"","title":"Types Documentation"},{"location":"Namespaces/namespaceEngine_1_1Audio/#typedef-callback","text":"typedef int(* Engine::Audio::Callback) (AudioBuffer &buffer, size_t offset); Some callback function pointer type definition. Parameters : buffer The buffer this callback is called from offset The offset of the buffer currently playing Deprecated : Use the Audio::Callback2 instead","title":"typedef Callback"},{"location":"Namespaces/namespaceEngine_1_1Audio/#using-callback2","text":"using Engine::Audio::Callback2 = typedef int (*)(AudioBuffer& buffer, size_t offset, void* user); Some callback function pointer type definition. Parameters : buffer The buffer this callback is called from offset The offset of the buffer currently playing user User specific data","title":"using Callback2"},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Audio/#function-dosomething","text":"void doSomething( AudioBuffer & buffer ) Do something with the buffer. Updated on 2022-11-10 at 05:33:10 +0000","title":"function doSomething"},{"location":"Namespaces/namespaceEngine_1_1Graphics/","text":"Engine::Graphics Classes Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class. Functions Name int getHandle ( Handle & handle) Some namespace inline function. Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Graphics"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#enginegraphics","text":"","title":"Engine::Graphics"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#classes","text":"Name class Engine::Graphics::Framebuffer class Engine::Graphics::Handle interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Texture2D class Engine::Graphics::Texture3D Some deprecated class.","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions","text":"Name int getHandle ( Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 2022-11-10 at 05:33:10 +0000","title":"function getHandle"},{"location":"Namespaces/namespaceEngine_1_1Gui/","text":"Engine::Gui Classes Name class Engine::Gui::GuiWidget Some generic gui widget class. Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Gui"},{"location":"Namespaces/namespaceEngine_1_1Gui/#enginegui","text":"","title":"Engine::Gui"},{"location":"Namespaces/namespaceEngine_1_1Gui/#classes","text":"Name class Engine::Gui::GuiWidget Some generic gui widget class. Updated on 2022-11-10 at 05:33:10 +0000","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Utils/","text":"Engine::Utils Namespaces Name Engine::Utils::Path Filesystem path utility functions. Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Functions Name void name_with_underscores (const std::string & arg) Functions Documentation function name_with_underscores inline void name_with_underscores( const std::string & arg ) Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Utils"},{"location":"Namespaces/namespaceEngine_1_1Utils/#engineutils","text":"","title":"Engine::Utils"},{"location":"Namespaces/namespaceEngine_1_1Utils/#namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions.","title":"Namespaces"},{"location":"Namespaces/namespaceEngine_1_1Utils/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions.","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Utils/#functions","text":"Name void name_with_underscores (const std::string & arg)","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Utils/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Utils/#function-name_with_underscores","text":"inline void name_with_underscores( const std::string & arg ) Updated on 2022-11-10 at 05:33:10 +0000","title":"function name_with_underscores"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/","text":"Engine::Utils::Path Module: An example game engine / Some useful utilities Filesystem path utility functions. Functions Name std::string getFilename (const std::string & path) std::string getExtension (const std::string & path) Functions Documentation function getFilename std::string getFilename( const std::string & path ) function getExtension std::string getExtension( const std::string & path ) Updated on 2022-11-10 at 05:33:10 +0000","title":"Engine::Utils::Path"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#engineutilspath","text":"Module: An example game engine / Some useful utilities Filesystem path utility functions.","title":"Engine::Utils::Path"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions","text":"Name std::string getFilename (const std::string & path) std::string getExtension (const std::string & path)","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getfilename","text":"std::string getFilename( const std::string & path )","title":"function getFilename"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getextension","text":"std::string getExtension( const std::string & path ) Updated on 2022-11-10 at 05:33:10 +0000","title":"function getExtension"},{"location":"Pages/","text":"Pages page Advanced Usage page Bug List page Deprecated List page Doxybook2 Example page Introduction page Test List page Todo List Updated on 2022-11-10 at 05:33:10 +0000","title":"Pages"},{"location":"Pages/#pages","text":"page Advanced Usage page Bug List page Deprecated List page Doxybook2 Example page Introduction page Test List page Todo List Updated on 2022-11-10 at 05:33:10 +0000","title":"Pages"},{"location":"Pages/advanced/","text":"Advanced Usage This page is for advanced users. Make sure you have first read the introduction . Updated on 2022-11-10 at 05:33:10 +0000","title":"Advanced Usage"},{"location":"Pages/advanced/#advanced-usage","text":"This page is for advanced users. Make sure you have first read the introduction . Updated on 2022-11-10 at 05:33:10 +0000","title":"Advanced Usage"},{"location":"Pages/bug/","text":"Bug List Class Engine::Audio::AudioBuffer Some random bug Some other random bug Class Engine::Graphics::Texture This has some weird bug too! Updated on 2022-11-10 at 05:33:10 +0000","title":"Bug List"},{"location":"Pages/bug/#bug-list","text":"Class Engine::Audio::AudioBuffer Some random bug Some other random bug Class Engine::Graphics::Texture This has some weird bug too! Updated on 2022-11-10 at 05:33:10 +0000","title":"Bug List"},{"location":"Pages/deprecated/","text":"Deprecated List Member Engine::Audio::AudioBuffer::setCallback (Callback callback) Use the AudioBuffer::setCallback2 instead Member Engine::Audio::AudioBuffer::setData (const TypedAudioData data[], size_t size) Use the AudioBuffer::setDataMultiple instead Member Engine::Audio::Callback )( AudioBuffer &buffer, size_t offset) Use the Audio::Callback2 instead Class Engine::Graphics::Texture3D Don't use this texture type Updated on 2022-11-10 at 05:33:10 +0000","title":"Deprecated List"},{"location":"Pages/deprecated/#deprecated-list","text":"Member Engine::Audio::AudioBuffer::setCallback (Callback callback) Use the AudioBuffer::setCallback2 instead Member Engine::Audio::AudioBuffer::setData (const TypedAudioData data[], size_t size) Use the AudioBuffer::setDataMultiple instead Member Engine::Audio::Callback )( AudioBuffer &buffer, size_t offset) Use the Audio::Callback2 instead Class Engine::Graphics::Texture3D Don't use this texture type Updated on 2022-11-10 at 05:33:10 +0000","title":"Deprecated List"},{"location":"Pages/intro/","text":"Introduction This page introduces the user to the topic. Now you can proceed to the advanced section . Updated on 2022-11-10 at 05:33:10 +0000","title":"Introduction"},{"location":"Pages/intro/#introduction","text":"This page introduces the user to the topic. Now you can proceed to the advanced section . Updated on 2022-11-10 at 05:33:10 +0000","title":"Introduction"},{"location":"Pages/test/","text":"Test List Class Engine::Audio::AudioBuffer Some random test description Updated on 2022-11-10 at 05:33:10 +0000","title":"Test List"},{"location":"Pages/test/#test-list","text":"Class Engine::Audio::AudioBuffer Some random test description Updated on 2022-11-10 at 05:33:10 +0000","title":"Test List"},{"location":"Pages/todo/","text":"Todo List Class Engine::Audio::AudioBuffer Some random todo Updated on 2022-11-10 at 05:33:10 +0000","title":"Todo List"},{"location":"Pages/todo/#todo-list","text":"Class Engine::Audio::AudioBuffer Some random todo Updated on 2022-11-10 at 05:33:10 +0000","title":"Todo List"}]}